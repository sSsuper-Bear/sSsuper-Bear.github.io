<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ADF检验</title>
    <url>/2021/12/26/ADF%E6%A3%80%E9%AA%8C/</url>
    <content><![CDATA[<h1 id="ADF检验"><a href="#ADF检验" class="headerlink" title="ADF检验"></a>ADF检验</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>在使用很多时间序列模型的时候，如ARMA、ARIMA，都会要求时间序列是平稳的，所以一般在研究一段时间序列的时候，第一步都需要进行平稳性检验，除了用肉眼检测的方法，另外比较常用的严格的统计检验方法就是<strong>ADF检验</strong>，也叫做<strong>单位根检验</strong>。</p>
<p>ADF检验全程是Augmented Dickey-Fuller test，顾名思义，ADF是Dickey-Fuller检验的增广形式。DF检验只能应用于一阶情况，当序列存在高阶的滞后相关时，可以使用ADF检验，所以说ADF是对DF检验的扩展。</p>
<h2 id="单位根（unit-root）"><a href="#单位根（unit-root）" class="headerlink" title="单位根（unit root）"></a>单位根（unit root）</h2><p>在做ADF检验，也就是单位根检验时，需要先明白一个概念，也就是要检验的对象——单位根。</p>
<p>在一个自回归的过程中：</p>
<p>$$<br>y _ { t } = b y _ { t - 1 } + a + \epsilon _ { t }<br>$$</p>
<p>，如果滞后项系数b为1，就称为单位根。当单位根存在时，自变量和因变量之间的关系具有欺骗性，因为残差序列的任何误差都不会随着样本量（即时期数）增大而衰退，也就是说模型中的残差的影响是永久的。这种回归又称为伪回归。如果单位根存在，这个过程就是一个随机漫步（random walk）。</p>
<h2 id="ADF检验的原理"><a href="#ADF检验的原理" class="headerlink" title="ADF检验的原理"></a>ADF检验的原理</h2><p>ADF检验就是判断序列是否存在单位根：<strong>如果序列平稳，就不存在单位根；否则，就会存在单位根。</strong></p>
<p>所以，ADF检验的H0假设就是存在单位根，如果得到的显著性检验统计量小于三个置信度（10%， 5%， 1%），则对应有（90%， 95%， 99%）的把握来拒绝假设。</p>
<h2 id="ADF检验的python实现"><a href="#ADF检验的python实现" class="headerlink" title="ADF检验的python实现"></a>ADF检验的python实现</h2><p>adfuller函数的参数意义分别是：</p>
<ol>
<li>x：一维的数据序列。</li>
<li>maxlag：最大滞后数目。</li>
<li>regression：回归中的包含项（c：只有常数项，默认；ct：常数项和趋势项；ctt：常数项，线性二次项；nc：没有常数项和趋势项）</li>
<li>autolag：自动选择滞后数目（AIC：赤池信息准则，默认；BIC：贝叶斯信息准则；t-stat：基于maxlag，从maxlag开始并删除一个滞后直到最后一个滞后长度基于 t-statistic 显著性小于5%为止；None：使用maxlag指定的滞后）</li>
<li>store：True False，默认。</li>
<li>regresults：True 完整的回归结果将返回。False，默认。</li>
</ol>
<p>返回值意义为：</p>
<ol>
<li>adf：Test statistic，T检验，假设检验值。</li>
<li>pvalue：假设检验结果。</li>
<li>usedlag：使用的滞后阶数。</li>
<li>nobs：用于ADF回归和计算临界值用到的观测值数目。</li>
<li>icbest：如果autolag不是None的话，返回最大的信息准则值。</li>
<li>resstore：将结果合并为一个dummy</li>
</ol>
<p>源代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">adfuller</span>(<span class="params">x, maxlag=<span class="literal">None</span>, regression=<span class="string">&quot;c&quot;</span>, autolag=<span class="string">&#x27;AIC&#x27;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">             store=<span class="literal">False</span>, regresults=<span class="literal">False</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Augmented Dickey-Fuller unit root test</span></span><br><span class="line"><span class="string">    The Augmented Dickey-Fuller test can be used to test for a unit root in a</span></span><br><span class="line"><span class="string">    univariate process in the presence of serial correlation.</span></span><br><span class="line"><span class="string">    Parameters</span></span><br><span class="line"><span class="string">    ----------</span></span><br><span class="line"><span class="string">    x : array_like, 1d</span></span><br><span class="line"><span class="string">        data series</span></span><br><span class="line"><span class="string">    maxlag : int</span></span><br><span class="line"><span class="string">        Maximum lag which is included in test, default 12*(nobs/100)^&#123;1/4&#125;</span></span><br><span class="line"><span class="string">    regression : &#123;&#x27;c&#x27;,&#x27;ct&#x27;,&#x27;ctt&#x27;,&#x27;nc&#x27;&#125;</span></span><br><span class="line"><span class="string">        Constant and trend order to include in regression</span></span><br><span class="line"><span class="string">        * &#x27;c&#x27; : constant only (default)</span></span><br><span class="line"><span class="string">        * &#x27;ct&#x27; : constant and trend</span></span><br><span class="line"><span class="string">        * &#x27;ctt&#x27; : constant, and linear and quadratic trend</span></span><br><span class="line"><span class="string">        * &#x27;nc&#x27; : no constant, no trend</span></span><br><span class="line"><span class="string">    autolag : &#123;&#x27;AIC&#x27;, &#x27;BIC&#x27;, &#x27;t-stat&#x27;, None&#125;</span></span><br><span class="line"><span class="string">        * if None, then maxlag lags are used</span></span><br><span class="line"><span class="string">        * if &#x27;AIC&#x27; (default) or &#x27;BIC&#x27;, then the number of lags is chosen</span></span><br><span class="line"><span class="string">          to minimize the corresponding information criterion</span></span><br><span class="line"><span class="string">        * &#x27;t-stat&#x27; based choice of maxlag.  Starts with maxlag and drops a</span></span><br><span class="line"><span class="string">          lag until the t-statistic on the last lag length is significant</span></span><br><span class="line"><span class="string">          using a 5%-sized test</span></span><br><span class="line"><span class="string">    store : bool</span></span><br><span class="line"><span class="string">        If True, then a result instance is returned additionally to</span></span><br><span class="line"><span class="string">        the adf statistic. Default is False</span></span><br><span class="line"><span class="string">    regresults : bool, optional</span></span><br><span class="line"><span class="string">        If True, the full regression results are returned. Default is False</span></span><br><span class="line"><span class="string">    Returns</span></span><br><span class="line"><span class="string">    -------</span></span><br><span class="line"><span class="string">    adf : float</span></span><br><span class="line"><span class="string">        Test statistic</span></span><br><span class="line"><span class="string">    pvalue : float</span></span><br><span class="line"><span class="string">        MacKinnon&#x27;s approximate p-value based on MacKinnon (1994, 2010)</span></span><br><span class="line"><span class="string">    usedlag : int</span></span><br><span class="line"><span class="string">        Number of lags used</span></span><br><span class="line"><span class="string">    nobs : int</span></span><br><span class="line"><span class="string">        Number of observations used for the ADF regression and calculation of</span></span><br><span class="line"><span class="string">        the critical values</span></span><br><span class="line"><span class="string">    critical values : dict</span></span><br><span class="line"><span class="string">        Critical values for the test statistic at the 1 %, 5 %, and 10 %</span></span><br><span class="line"><span class="string">        levels. Based on MacKinnon (2010)</span></span><br><span class="line"><span class="string">    icbest : float</span></span><br><span class="line"><span class="string">        The maximized information criterion if autolag is not None.</span></span><br><span class="line"><span class="string">    resstore : ResultStore, optional</span></span><br><span class="line"><span class="string">        A dummy class with results attached as attributes</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>参考代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> statsmodels.tsa.stattools <span class="keyword">import</span> adfuller <span class="keyword">as</span> ADF</span><br><span class="line">adf = ADF(data)</span><br><span class="line"><span class="built_in">print</span>(adf)</span><br><span class="line"></span><br><span class="line">(-<span class="number">0.45153867687808574</span>, <span class="number">0.9011315454402649</span>, <span class="number">1</span>, <span class="number">198</span>, &#123; <span class="string">&#x27;1%&#x27;</span>: -<span class="number">3.4638151713286316</span>, <span class="string">&#x27;5%&#x27;</span>: -<span class="number">2.876250632135043</span>,<span class="string">&#x27;10%&#x27;</span>: -<span class="number">2.574611347821651</span>&#125;, <span class="number">1172.4579344852016</span>)</span><br></pre></td></tr></table></figure>

<p>看到t-statistic的值-0.451要大于10%，所以无法拒绝原假设，另外，p-value的值也很大。</p>
<h3 id="如何确定该序列能否平稳呢？主要看："><a href="#如何确定该序列能否平稳呢？主要看：" class="headerlink" title="如何确定该序列能否平稳呢？主要看："></a>如何确定该序列能否平稳呢？主要看：</h3><p>1、1%、%5、%10不同程度拒绝原假设的统计值和ADF Test result的比较，ADF Test result同时小于1%、5%、10%即说明非常好地拒绝该假设，本数据中，adf结果为-9， 小于三个level的统计值。<br>2、P-value是否非常接近0。</p>
<p>ADF检验的原假设是存在单位根，只要这个统计值是小于1%水平下的数字就可以极显著的拒绝原假设，认为数据平稳。注意，ADF值一般是负的，也有正的，但是它只有小于1%水平下的才能认为是及其显著的拒绝原假设。<br>对于ADF结果在1% 以上 5%以下的结果，也不能说不平稳，关键看检验要求是什么样子的。</p>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><ul>
<li><a href="https://blog.csdn.net/FrankieHello/article/details/86766625?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.nonecase&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.nonecase">时间序列分析之ADF检验</a></li>
<li><a href="https://blog.csdn.net/weixin_44342108/article/details/102300595?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0.essearch_pc_relevant&spm=1001.2101.3001.4242.1">时间序列—-ADF检验</a></li>
</ul>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>信号处理</tag>
      </tags>
  </entry>
  <entry>
    <title>AI斗地主</title>
    <url>/2021/07/20/AI%E6%96%97%E5%9C%B0%E4%B8%BB/</url>
    <content><![CDATA[<h2 id="DouZero分析"><a href="#DouZero分析" class="headerlink" title="DouZero分析"></a>DouZero分析</h2><h3 id="1-DouZero介绍"><a href="#1-DouZero介绍" class="headerlink" title="1.DouZero介绍"></a>1.DouZero介绍</h3><p>DouZero项目地址：<a href="https://github.com/kwai/DouZero">https://github.com/kwai/DouZero</a></p>
<p>在线Demo地址：<a href="https://www.douzero.org/">https://www.douzero.org/</a></p>
<p>原理我就不过多说明，有兴趣的可以查看论文：<a href="https://arxiv.org/abs/2106.06135">https://arxiv.org/abs/2106.06135</a></p>
<p>运行程序，评估胜率只需三步：进入项目目录，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip3 install -r requirements.txt    <span class="comment"># 安装依赖</span></span><br><span class="line">python3 generate_eval_data.py        <span class="comment"># 生成评估用的数据</span></span><br><span class="line">python3 evaluate.py                    <span class="comment"># 开始评估</span></span><br></pre></td></tr></table></figure>

<p>运行结果是以胜率的形式展现。<br>关于如何训练以及更多参数设置，请查看DouZero项目的说明文档。</p>
<p>当然现在这样对实际应用是没有直接帮助的，所以要改造一下，利用训练好的AI来帮我们出牌。</p>
<h3 id="2-DouZero源码分析"><a href="#2-DouZero源码分析" class="headerlink" title="2.DouZero源码分析"></a>2.DouZero源码分析</h3><p>项目结构十分清晰，<code>douzero</code>目录包含主要代码文件，<code>baselines</code>目录放置预训练模型。根目录下的 <code>evaluate.py</code>为入口，拿到参数后传递到 <code>douzero/evaluation/simulation.py</code>中的 <code>evaluate()</code>函数，再将数据分配给多个进程调用 <code>mp_simulate()</code>函数。</p>
<p><img src="https://tqraf.cn/images/image-210713-1.png" alt="项目结构"></p>
<center>项目结构</center>

<p><code>mp_simulate()</code>函数中，players为三个生成的AI，代表斗地主中的三个角色。<code>GameEnv()</code>类表示游戏环境，控制一局游戏流程的进行与结束。</p>
<p><img src="https://tqraf.cn/images/image-210713-2.png" alt="mp_simulate()函数"></p>
<center>mp_simulate()函数</center>

<p>看到这里，整个项目就清晰了，可以着手按照需求定制AI了。</p>
<h2 id="DouZero定制"><a href="#DouZero定制" class="headerlink" title="DouZero定制"></a>DouZero定制</h2><ul>
<li><p>首先，三个AI互斗肯定是不可行的，我们只需要一个，并且代表了玩家的角色。只要给这个AI输入开局时我的手牌和三张底牌，并且告诉它谁是地主，再输入每轮中其他两人的出牌，那么AI就能够给出最优出牌决策。</p>
</li>
<li><p>对于生成AI，可以控制只生成玩家角色对应的AI。开局时获取玩家的位置(<strong>地主上家、地主、地主下家</strong>），并用 <code>0, 1, 2</code>分别表示。</p>
</li>
<li><p>对于获取手牌等信息，<code>DouZero</code>项目中有对扑克牌进行转换。注意到在 <code>DouZero</code>与 <code>rlcard-showdown</code>两个项目中，这种对应关系有些许差异，这是因为将 <code>10</code>用 <code>T</code>来代替就可以将扑克牌用一串字符串来表示，便于参数传递。因此本项目也采取这种做法。</p>
<p>python</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># DouZero</span></span><br><span class="line">EnvCard2RealCard = &#123;<span class="number">3</span>: <span class="string">&#x27;3&#x27;</span>, <span class="number">4</span>: <span class="string">&#x27;4&#x27;</span>, <span class="number">5</span>: <span class="string">&#x27;5&#x27;</span>, <span class="number">6</span>: <span class="string">&#x27;6&#x27;</span>, <span class="number">7</span>: <span class="string">&#x27;7&#x27;</span>,</span><br><span class="line">                  <span class="number">8</span>: <span class="string">&#x27;8&#x27;</span>, <span class="number">9</span>: <span class="string">&#x27;9&#x27;</span>, <span class="number">10</span>: <span class="string">&#x27;10&#x27;</span>, <span class="number">11</span>: <span class="string">&#x27;J&#x27;</span>, <span class="number">12</span>: <span class="string">&#x27;Q&#x27;</span>,</span><br><span class="line">                  <span class="number">13</span>: <span class="string">&#x27;K&#x27;</span>, <span class="number">14</span>: <span class="string">&#x27;A&#x27;</span>, <span class="number">17</span>: <span class="string">&#x27;2&#x27;</span>, <span class="number">20</span>: <span class="string">&#x27;X&#x27;</span>, <span class="number">30</span>: <span class="string">&#x27;D&#x27;</span>&#125;</span><br><span class="line">RealCard2EnvCard = &#123;<span class="string">&#x27;3&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;4&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;5&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;6&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;7&#x27;</span>: <span class="number">7</span>,</span><br><span class="line">                  <span class="string">&#x27;8&#x27;</span>: <span class="number">8</span>, <span class="string">&#x27;9&#x27;</span>: <span class="number">9</span>, <span class="string">&#x27;10&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;J&#x27;</span>: <span class="number">11</span>, <span class="string">&#x27;Q&#x27;</span>: <span class="number">12</span>,</span><br><span class="line">                  <span class="string">&#x27;K&#x27;</span>: <span class="number">13</span>, <span class="string">&#x27;A&#x27;</span>: <span class="number">14</span>, <span class="string">&#x27;2&#x27;</span>: <span class="number">17</span>, <span class="string">&#x27;X&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;D&#x27;</span>: <span class="number">30</span>&#125;</span><br><span class="line"><span class="comment"># rlcard-showdown</span></span><br><span class="line">EnvCard2RealCard = &#123;<span class="number">3</span>: <span class="string">&#x27;3&#x27;</span>, <span class="number">4</span>: <span class="string">&#x27;4&#x27;</span>, <span class="number">5</span>: <span class="string">&#x27;5&#x27;</span>, <span class="number">6</span>: <span class="string">&#x27;6&#x27;</span>, <span class="number">7</span>: <span class="string">&#x27;7&#x27;</span>,</span><br><span class="line">                  <span class="number">8</span>: <span class="string">&#x27;8&#x27;</span>, <span class="number">9</span>: <span class="string">&#x27;9&#x27;</span>, <span class="number">10</span>: <span class="string">&#x27;T&#x27;</span>, <span class="number">11</span>: <span class="string">&#x27;J&#x27;</span>, <span class="number">12</span>: <span class="string">&#x27;Q&#x27;</span>,</span><br><span class="line">                  <span class="number">13</span>: <span class="string">&#x27;K&#x27;</span>, <span class="number">14</span>: <span class="string">&#x27;A&#x27;</span>, <span class="number">17</span>: <span class="string">&#x27;2&#x27;</span>, <span class="number">20</span>: <span class="string">&#x27;X&#x27;</span>, <span class="number">30</span>: <span class="string">&#x27;D&#x27;</span>&#125;</span><br><span class="line">RealCard2EnvCard = &#123;<span class="string">&#x27;3&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;4&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;5&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;6&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;7&#x27;</span>: <span class="number">7</span>,</span><br><span class="line">                  <span class="string">&#x27;8&#x27;</span>: <span class="number">8</span>, <span class="string">&#x27;9&#x27;</span>: <span class="number">9</span>, <span class="string">&#x27;T&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;J&#x27;</span>: <span class="number">11</span>, <span class="string">&#x27;Q&#x27;</span>: <span class="number">12</span>,</span><br><span class="line">                  <span class="string">&#x27;K&#x27;</span>: <span class="number">13</span>, <span class="string">&#x27;A&#x27;</span>: <span class="number">14</span>, <span class="string">&#x27;2&#x27;</span>: <span class="number">17</span>, <span class="string">&#x27;X&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;D&#x27;</span>: <span class="number">30</span>&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>对于预测胜率，<code>DouZero</code>项目中并未给出，但是在 <code>rlcard-showdown</code>中能看到该参数，由 <code>deep.py</code>文件中 <code>DeepAgent()</code>类的 <code>act()</code>函数计算得到。</p>
<p>python</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">best_action_confidence = y_pred[best_action_index]</span><br></pre></td></tr></table></figure></li>
<li><p>感谢Couwisdet指点，变量 <code>y_pred</code>是预测的所有合法动作的Q值，取其中最大的一个对应的策略即为最优策略。对于 <code>WP</code>模型，取值在 <code>[-1, 1]</code>，可以按比例换算成胜率，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">win_rates = &#123;&#125;</span><br><span class="line">win_rate = max(best_action_confidence, -1)</span><br><span class="line">win_rate = min(win_rate, 1)</span><br><span class="line">win_rate = str(round(float((win_rate + 1) / 2), 4))</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="控制台版本"><a href="#控制台版本" class="headerlink" title="控制台版本"></a>控制台版本</h2><h3 id="1-用法"><a href="#1-用法" class="headerlink" title="1.用法"></a>1.用法</h3><ul>
<li>这个版本仅仅通过<strong>控制台</strong>进行交互。</li>
</ul>
<p><img src="https://tqraf.cn/images/image-210713-3.png" alt="控制台版本"></p>
<center>控制台版本</center>

<ul>
<li>开局的时候玩家要把自己的手牌，地主的位置，三张底牌手动输入进去。手牌输入按照 <code>333456789TJQKA2XD</code>的形式，然后输入玩家的角色：<code>0-地主上家, 1-地主, 2-地主下家</code>，最后输入三张底牌，例如 <code>2XD</code>。</li>
<li>然后就开始轮流出牌，在其它两个人出牌后都需要将对应的牌输入，用于AI决策，这样在轮到玩家出牌时，AI就能告知最优策略。</li>
<li>不出的话，直接 <code>Enter</code>即可，会返回空列表。同理，当AI返回空列表时表示不出。</li>
<li>这么做的优点就是，逻辑简单，并且工作量少哇。主要是想第一时间测试AI在实战斗地主中的实力。</li>
<li>缺点很明显，十分拼手速，并且没有撤销机制与输入检测，如果着急输错了，那么程序就会崩溃。</li>
</ul>
<h3 id="2-分析"><a href="#2-分析" class="headerlink" title="2.分析"></a>2.分析</h3><ul>
<li>去除了不必要的文件以及参数，根目录只保留 <code>start.py</code>用于启动。</li>
<li><code>evaluate()</code>函数要求输入玩家手牌、玩家角色、三张底牌。由于原先评估代码中太多处涉及对其他角色手牌的操作如删除和检测，为避免大量改动原项目代码，需要为其他两个角色分配手牌。</li>
<li>这里就将整幅牌减去玩家手牌，再按角色分配给它们。为避免其他玩家出牌时，在其手牌中找不到该牌，将<strong>在其他玩家手牌中删除刚出的牌</strong>改为<strong>在其他玩家手牌中删除与刚出的牌等量的牌</strong>。这么做的依据是：AI决策时只需要考虑其他角色手牌数量而不需要知道具体是什么牌。</li>
<li>创建AI时根据玩家角色来创建，并且在 <code>env.step()</code>中，调用 <code>act()</code>函数获取AI决策前判断一下当前是否为玩家出牌，是则通过AI决策，否则由玩家输入。</li>
<li>当任意角色手牌数量为0时则代表游戏结束。</li>
</ul>
<blockquote>
<p>俗话说得好，一个成熟的AI，是应该能够自己看牌出牌的。于是我又改出了pyqt5版本，实现部分<strong>自动化操作</strong>。</p>
</blockquote>
<h2 id="pyqt5版本"><a href="#pyqt5版本" class="headerlink" title="pyqt5版本"></a>pyqt5版本</h2><h3 id="1-用法-1"><a href="#1-用法-1" class="headerlink" title="1.用法"></a>1.用法</h3><ul>
<li>打开欢乐斗地主，需要<strong>窗口模式下最大化</strong>运行，并且要求屏幕分辨率 <code>1920x1080</code>，程序窗口需要移至<strong>右下角</strong>，不能遮挡<strong>手牌、地主标志、底牌、历史出牌</strong></li>
</ul>
<p><img src="https://tqraf.cn/images/image-210713-4.png" alt="pyqt5版本"></p>
<center>pyqt5版本</center>

<ul>
<li>在抢地主结束后，手牌出现、底牌出现、地主角色确认，点击<strong>开始</strong>，耗时几秒完成扑克牌的识别。</li>
<li>窗口内显示识别结果，地主角色使用淡红色标出。识别完成自动开始记录出牌。</li>
<li>观察AI建议的出牌，在游戏中手动选择并打出。游戏结束后会弹出对话框提示输赢。</li>
<li>识别错误或无反应导致错过出牌，可通过<strong>结束</strong>按钮停止本局。至于游戏，就自己手动打完吧。</li>
</ul>
<h3 id="2-分析-1"><a href="#2-分析-1" class="headerlink" title="2.分析"></a>2.分析</h3><ul>
<li>利用 <code>pyqt5</code>设计一个简单的窗体用于展示出牌信息</li>
</ul>
<p><img src="https://tqraf.cn/images/image-210713-5.png" alt="主窗口"></p>
<center>主窗口</center>

<ul>
<li>使用 <code>pyautogui</code>来实现自动化。借鉴了<a href="https://github.com/ZDZX-T/cardRecorder">cardRecorder</a>项目的部分代码以及模板图片，用于识别扑克牌。</li>
</ul>
<p><img src="https://tqraf.cn/images/image-210713-6.png" alt="图片模板"></p>
<center>图片模板</center>

<ul>
<li>通过 <code>pyautogui.locateAll()</code>函数将所有扑克牌的模板图片与屏幕特定区域的截图进行对比，获取手牌、底牌与出牌。</li>
<li>由于出牌区域显示的牌较小，因此使用一大一小两套模板。而底牌则更小，通过 <code>resize()</code>函数将截图区域放大，在进行模板比对。</li>
<li><code>pyautogui.locateOnScreen</code>用于白块检测与“不出”检测，“地主”检测，用来自动识别出牌流程。这里仍有一点Bug，例如王炸时出牌特效时间较长，有一定几率导致只能识别出一个王。但是缩短等待时间又会导致两人连续“不出”时无法自动切换到下一个人出牌的状态。</li>
<li>另外，由于像素级操作过于局限，并且识别过程容易出错，有小几率Bug，因此放弃完全自动化的想法，即通过 <code>pyautogui</code>来点击屏幕自动出牌。</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>至少现在，这个AI可以辅助我们出牌了，虽然AI的思路可能跟我们完全不一样。</li>
<li>要注意到，斗地主是个<strong>运气成分很强</strong>的游戏，牌好的时候，闭着眼睛打也能赢。牌烂的时候，高手也救不了（例如被“春天”）。所以只有在自己的牌不好也不烂的时候，AI的优势才能被明显体现出来。</li>
<li>综合来看，在发完牌后，自己没有把握打赢又不至于直接认输的情况下，用AI辅助是不错的选择。毕竟，它天生自带记牌器，能够合理配合，做农民的时候是个不错的队友。</li>
<li>github项目地址：<a href="https://github.com/tianqiraf/DouZero_For_HappyDouDiZhu">DouZero_For_HappyDouDiZhu</a></li>
<li>演示视频链接：<a href="https://www.zhihu.com/zvideo/1398424460945444864">知乎视频</a></li>
</ul>
<h3 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h3><ul>
<li>有时候程序中自己的牌堆显示会与实际手牌不同</li>
<li>使用AI的胜率一般，不知道大家的体验如何</li>
</ul>
<h3 id="转载自：使用DouZero玩欢乐斗地主"><a href="#转载自：使用DouZero玩欢乐斗地主" class="headerlink" title="转载自：使用DouZero玩欢乐斗地主"></a>转载自：<a href="https://tqraf.cn/2021/07/DouZero-For-HappyDouDiZhu.html">使用DouZero玩欢乐斗地主</a></h3>]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>InterestingCode</tag>
      </tags>
  </entry>
  <entry>
    <title>ARIMA</title>
    <url>/2021/12/26/ARIMA/</url>
    <content><![CDATA[<h1 id="（差分自回归移动平均）ARIMA"><a href="#（差分自回归移动平均）ARIMA" class="headerlink" title="（差分自回归移动平均）ARIMA"></a>（差分自回归移动平均）ARIMA</h1><h2 id="1-时间序列平稳性"><a href="#1-时间序列平稳性" class="headerlink" title="1. 时间序列平稳性"></a>1. 时间序列平稳性</h2><h3 id="1-1-平稳性"><a href="#1-1-平稳性" class="headerlink" title="1.1 平稳性"></a>1.1 平稳性</h3><p>平稳性就是要求经由样本时间序列锁得到的拟合曲线在未来一段时间内仍能顺着现有的形态惯性地延续下去。平稳性要求序列的均值和方差不发生明显的变化。</p>
<h4 id="严平稳"><a href="#严平稳" class="headerlink" title="严平稳"></a>严平稳</h4><p>严平稳表示的分布不随时间的改变而改变。如白噪声（正态分布），无论怎么取，都是期望为0，方差为1</p>
<h4 id="宽平稳"><a href="#宽平稳" class="headerlink" title="宽平稳"></a>宽平稳</h4><p>期望与相关系数（依赖性）不变。未来某时刻的t的值$Xt$就要依赖于它的过去的信息，所以需要依赖性。这种依赖性不能有明显的变化</p>
<h3 id="1-2-差分法"><a href="#1-2-差分法" class="headerlink" title="1.2 差分法"></a>1.2 差分法</h3><p>使用差分法可以使得数据更平稳，常用的方法就是一阶差分和二阶差分。</p>
<p>时间序列差分值的求解可以直接通过pandas中的diff函数得到：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// 一阶差分</span><br><span class="line">data = data.diff(<span class="number">1</span>)</span><br><span class="line">// 二阶差分</span><br><span class="line">data = data.diff(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h2 id="2-ARIMA模型介绍"><a href="#2-ARIMA模型介绍" class="headerlink" title="2. ARIMA模型介绍"></a>2. ARIMA模型介绍</h2><h3 id="2-1-自回归模型AR"><a href="#2-1-自回归模型AR" class="headerlink" title="2.1 自回归模型AR"></a>2.1 自回归模型AR</h3><p>自回归模型描述当前值与历史值之间的关系，用变量自身的历史数据对自身进行预测。自回归模型必须满足平稳性的要求。</p>
<p>自回归模型首先需要确定一个阶数p，表示用几期的值来预测当前值。p阶自回归模型的公式定义为：<br>$$<br>y _ { t } = \mu + \sum _ { i = 1 } ^ { p } \gamma _ { i } y _ { t - i } + \epsilon _ { t }<br>$$<br>上式中$yt$是当前值，$\mu$是常数项，$p$ 是阶数，$\gamma i$是自相关系数， $\epsilon_t$是误差</p>
<p>自回归模型有很多限制：</p>
<ul>
<li>自回归模型是用自身的数据进行预测</li>
<li>时间序列数据必须具有平稳性</li>
<li>自回归只适用于预测与自身前期相关的现象</li>
</ul>
<h3 id="2-2-移动平均模型MA"><a href="#2-2-移动平均模型MA" class="headerlink" title="2.2 移动平均模型MA"></a>2.2 移动平均模型MA</h3><p>移动平均模型关注的是自回归模型中的误差项的累加，q阶自回归的过程的公式定义如下：<br>$$<br>y _ { t } = \mu + \epsilon _ { t } + \sum _ { i = 1 } ^ { q } \theta _ { i } \epsilon_{t - i}​<br>$$<br>移动平均法能有效地消除预测中的随机波动。</p>
<h3 id="2-3-自回归移动平均ARMA"><a href="#2-3-自回归移动平均ARMA" class="headerlink" title="2.3 自回归移动平均ARMA"></a>2.3 自回归移动平均ARMA</h3><p>自回归模型AR和移动平均模型MA模型相结合，我们就得到了自回归移动平均模型ARMA(p,q)，计算公式如下：<br>$$<br>y _ { t } = \mu + \sum _ { i = 1 } ^ { p } \gamma _ { i }  y _ { t - i } + \epsilon _ { t } + \sum _ { i = 1 } ^ { q } \theta _ { i } \epsilon _ { t - i }<br>$$</p>
<h3 id="2-4-差分自回归移动平均模型ARIMA"><a href="#2-4-差分自回归移动平均模型ARIMA" class="headerlink" title="2.4 差分自回归移动平均模型ARIMA"></a>2.4 差分自回归移动平均模型ARIMA</h3><p>将自回归模型、移动平均模型和差分算法结合，我们就得到了差分自回归移动平均模型ARIMA(p,d,q)，其中d是需要对数据进行差分和阶数。</p>
<h2 id="3、建立ARIMA模型的过程"><a href="#3、建立ARIMA模型的过程" class="headerlink" title="3、建立ARIMA模型的过程"></a>3、建立ARIMA模型的过程</h2><p>一般来说，建立ARIMA模型一般有三个阶段，分别是模型识别和定阶、参数估计和模型检验。</p>
<h3 id="3-1-模型识别和定阶"><a href="#3-1-模型识别和定阶" class="headerlink" title="3.1 模型识别和定阶"></a>3.1 模型识别和定阶</h3><p>模型的识别问题和定阶问题，主要是确定p,d,q三个参数，差分的阶数d一般通过观察图示，1阶或2阶即可。这里我们主要介绍p和q的确定。我们首先介绍两个函数。</p>
<h4 id="自相关函数ACF-autocorrelation-function"><a href="#自相关函数ACF-autocorrelation-function" class="headerlink" title="自相关函数ACF(autocorrelation function)"></a>自相关函数ACF(autocorrelation function)</h4><p>自相关函数ACF描述的是时间序列观测值与其过去的观测值之间的线性相关性。计算公式如下：<br>$$<br>A C F ( k ) = \rho  _ { k } = \frac { C ov ( y _ { t } , y _ { t - k } ) } { V a r ( y _ { t } ) }<br>$$<br>其中k表示滞后期数，如果$k$=2，则代表$y_t$和$y_{t-2}$</p>
<h4 id="偏自相关函数PACF-partial-autocorrelation-function"><a href="#偏自相关函数PACF-partial-autocorrelation-function" class="headerlink" title="偏自相关函数PACF(partial autocorrelation function)"></a>偏自相关函数PACF(partial autocorrelation function)</h4><p>偏自相关函数PACF描述的是在给定中间观测值的条件下，时间序列观测值预期过去的观测值之间的线性相关性。</p>
<p>举个例子：假设k=3，那么我们描述的是$y_t$和$y_{t-3}$之间的相关性，但是这个相关性还收到yt-1和yt-2的影响。PACF剔除了这个影响，而ACF包含了这个影响。</p>
<h4 id="拖尾和截尾"><a href="#拖尾和截尾" class="headerlink" title="拖尾和截尾"></a>拖尾和截尾</h4><p>拖尾指序列以指数率单调递减或震荡衰减，而截尾指序列从某个时点变得非常小：</p>
<p><img src="https://pic.imgdb.cn/item/61c833332ab3f51d91bdf3da.png" alt="img"></p>
<p>出现以下情况，通常是为（偏）自相关系数d阶截尾：</p>
<ol>
<li>在最初的d阶明显大于2倍标准差范围以内</li>
<li>之后几乎95%的（偏）自相关系数都落在2倍标准差范围以内</li>
<li>且由非零自相关系数衰减为在零附近小值波动的过程非常突然</li>
</ol>
<p><img src="https://pic.imgdb.cn/item/61c8335c2ab3f51d91be05a6.png" alt="img"></p>
<p>出现以下情况，通常视为（偏）自相关系数拖尾：</p>
<ol>
<li>如果有超过5%的样本（偏）自相关系数都落入2倍标准差范围之外</li>
<li>或者是由显著非0的（偏）自相关系数衰减为小值波动的过程比较缓慢或非常连续</li>
</ol>
<p><img src="https://pic.imgdb.cn/item/61c833792ab3f51d91be1186.png" alt="img"></p>
<h4 id="p，q阶数的确定"><a href="#p，q阶数的确定" class="headerlink" title="p，q阶数的确定"></a>p，q阶数的确定</h4><p>根据刚才判定截尾和拖尾的准则，p， q的确定基于如下规则：</p>
<table>
<thead>
<tr>
<th>模型（序列）</th>
<th>AR（p）</th>
<th>MA（q）</th>
<th>ARMA（p,q）</th>
</tr>
</thead>
<tbody><tr>
<td>自相关函数</td>
<td>拖尾</td>
<td>第q个后截尾</td>
<td>拖尾</td>
</tr>
<tr>
<td>偏自相关函数</td>
<td>第p个后拖尾</td>
<td>拖尾</td>
<td>拖尾</td>
</tr>
</tbody></table>
<h3 id="3-2-参数估计"><a href="#3-2-参数估计" class="headerlink" title="3.2 参数估计"></a>3.2 参数估计</h3><p>通过拖尾和截尾对模型进行定阶的方法，往往具有很强的主观性，回想我们之前在参数预估的时候往往是怎么做的，不就是和损失和正则项的加权么？我们这里能不能结合最终的预测误差来确定p，q的阶数呢？在相同的预测误差情况下，根据奥斯卡姆剃刀准则，模型越小是越好的。那么，平均预测误差和参数个数，我们可以根据信息准则函数法，来确定模型的阶数。预测误差通常用平方误差即残差平方和来表示。</p>
<p>常用的信息准则函数法有下面几种：</p>
<h4 id="AIC准则"><a href="#AIC准则" class="headerlink" title="AIC准则"></a>AIC准则</h4><p>AIC准则全称为最小信息量准则（Akaike Information Criterion），计算公式如下：</p>
<p>AIC=2*(模型参数的个数) -2ln(模型的极大似然估计函数)</p>
<h4 id="BIC准则"><a href="#BIC准则" class="headerlink" title="BIC准则"></a>BIC准则</h4><p>AIC准则存在一定的不足之处。当样本容量很大时，在AIC准则中拟合误差提供的信息就要受到样本容量的放大，</p>
<p>而参数个数的惩罚因子却和样本容量没关系（一直是2），因此当样本容量很大时，使用AIC准则选择的模型不收敛与真实模型，它通常比真实模型所含的未知参数个数要多。BIC（Bayesian InformationCriterion）贝叶斯信息准则弥补了AIC的不足，计算公式如下：</p>
<p>BIC = ln(n) * (模型中参数的个数) - 2ln(模型的极大似然函数值)，n是样本容量</p>
<p>我们通过类似网格搜索二等方式来寻找我们模型的最佳p，q组合吧。我们可以使用简单的方法来得到p和q的最优值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_results = sm.tsa.arma_order_select_ic(train, ic=[<span class="string">&#x27;aic&#x27;</span>, <span class="string">&#x27;bic&#x27;</span>], trend=<span class="string">&#x27;nc&#x27;</span>, max_ar=<span class="number">8</span>, max_ma=<span class="number">8</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;AIC&#x27;</span>, train_results.aic_min_order)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;BIC&#x27;</span>, train_results.bic_min_order)</span><br></pre></td></tr></table></figure>

<p>结果为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AIC (1, 0)</span><br><span class="line">BIC (1, 0)</span><br></pre></td></tr></table></figure>

<p>表明我们应该选择AR(1)模型。</p>
<p>一般来说，BIC准则得到的ARMA模型的阶数较AIC的低。</p>
<h3 id="3-3-模型检验"><a href="#3-3-模型检验" class="headerlink" title="3.3 模型检验"></a>3.3 模型检验</h3><p>这里的模型检验主要有两个：</p>
<ol>
<li>检验参数估计的显著性（t检验）</li>
<li>检验残差序列的随机性，即残差直接是独立的</li>
</ol>
<p>残差序列的随机性可以通过自相关函数法来检验，即做残差的自相关函数图：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">model = sm.tsa.ARIMA(train, order=(1, 0, 0))</span><br><span class="line">results = model.fit()</span><br><span class="line">resid = results.resid #赋值</span><br><span class="line">fig = plt.figure(figsize=(12,8))</span><br><span class="line">fig = sm.graphics.tsa.plot_acf(resid.values.squeeze(), lags=40)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<p><img src="https://pic.imgdb.cn/item/61c832f52ab3f51d91bdd962.png" alt="img"></p>
<p>这里很明显的检测是通过的。</p>
<h3 id="3-4-模型训练"><a href="#3-4-模型训练" class="headerlink" title="3.4 模型训练"></a>3.4 模型训练</h3><p>预测主要有两个函数，一个是<strong>predict</strong>函数，一个是<strong>forecast</strong>函数。</p>
<p><strong>predict中进行预测的时间段必须在我们训练ARIMA模型的数据中。</strong></p>
<p><strong>forecast则是对训练数据集末尾下一个时间段的值进行预估。</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model = sm.tsa.ARIMA(data, order=(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">results = model.fit()</span><br><span class="line">predict_sunspots = results.predict(start=<span class="built_in">str</span>(<span class="string">&#x27;2014-04&#x27;</span>),end=<span class="built_in">str</span>(<span class="string">&#x27;2014-05&#x27;</span>),dynamic=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<p>预估下一个值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">results.forecast()[0]</span><br></pre></td></tr></table></figure>



<h2 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h2><ul>
<li><a href="https://blog.csdn.net/sunnyxidian/article/details/92946542">ARIMA模型原理及实现</a></li>
</ul>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>传统算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Savitzky-Golay 滤波器</title>
    <url>/2021/12/24/Savitzky-Golay%20%E6%BB%A4%E6%B3%A2%E5%99%A8/</url>
    <content><![CDATA[<h4 id="Savitzky-Golay-滤波器"><a href="#Savitzky-Golay-滤波器" class="headerlink" title="Savitzky-Golay 滤波器"></a>Savitzky-Golay 滤波器</h4><p>Savitzky-Golay平滑滤波是光谱预处理中常用滤波方法，它的<strong>核心思想是对一定长度窗口内的数据点进行k阶多项式拟合，从而得到拟合后的结果</strong>。对他进行离散化处理后，<strong>S-G滤波其实是一种移动窗口的加权平均算法，</strong>但是其加权系数不是简单的窗口函数，而是通过在滑动窗口内对定高阶多项式的最小二乘拟合得出。</p>
<p>Savitzky-Golay平滑滤波被广泛地运用于数据流平滑除噪，是一种在时域内基于局域多项式最小二乘法拟合的滤波方法。<strong>这种滤波器最大的特点在于在滤除噪声的同时可以确保信号的形状、宽度不变。</strong></p>
<p>使用平滑滤波器对信号滤波时，<strong>实际上是拟合了信号中的低频成分，而将高频成分平滑出去了</strong>。如果噪声在高频端，那么滤波的结果就是去除了噪声，反之，若噪声在低频段，那么滤波的结果就是留下了噪声。</p>
<p>总之，平滑滤波是光谱分析中常用的预处理方法之一。用Savitzky-Golay方法进行平滑滤波，可以提高光谱的平滑性，并降低噪音的干扰。S-G平滑滤波的效果，随着选取窗宽不同而不同，可以满足多种不同场合的要求。</p>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><ul>
<li><p>测试代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">y_smooth = scipy.signal.savgol_filter(y,5,3)  </span><br><span class="line"></span><br><span class="line"># 备注：</span><br><span class="line">y：代表曲线点坐标（x,y）中的y值数组</span><br><span class="line">window_length：窗口长度，该值需为正奇整数。例如：此处取值53</span><br><span class="line">k值：polyorder为对窗口内的数据点进行k阶多项式拟合，k的值需要小于window_length。例如：此处取值3</span><br><span class="line">mode：确定了要应用滤波器的填充信号的扩展类型。（This determines the type of extension to use for the padded signal to which t</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>window_length和K这两个值对曲线的影响。</p>
<ul>
<li>window_length对曲线的平滑作用：window_length的值越小，曲线月贴近真实曲线，window_length值越大，平滑效果越厉害（该值必须为正奇整数）</li>
<li>k值对曲线的平滑作用：k值越大，曲线越贴近真实曲线；k值越小，曲线平滑越厉害。另外，当k值较大时，受窗口长度限制，拟合会出现问题，高频曲线会变成直线。</li>
</ul>
</li>
</ul>
<h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><ul>
<li><a href="https://www.cnblogs.com/manuowen-123/p/14967367.html">https://www.cnblogs.com/manuowen-123/p/14967367.html</a></li>
<li><a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.savgol_filter.html">https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.savgol_filter.html</a></li>
</ul>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>信号处理</tag>
      </tags>
  </entry>
  <entry>
    <title>bootdo项目通过jar包启动</title>
    <url>/2021/05/24/bootdo%E9%A1%B9%E7%9B%AE%E9%80%9A%E8%BF%87jar%E5%8C%85%E5%90%AF%E5%8A%A8/</url>
    <content><![CDATA[<h3 id="bootdo项目通过jar包启动"><a href="#bootdo项目通过jar包启动" class="headerlink" title="bootdo项目通过jar包启动"></a>bootdo项目通过jar包启动</h3><ul>
<li><p>本项目来自<a href="https://gitee.com/lcg0124/bootdo">gitee李春光</a>，具体<a href="https://gitee.com/lcg0124/bootdo/wikis/%E5%90%AF%E5%8A%A8%E9%A1%B9%E7%9B%AE?sort_id=64319">参考文档</a></p>
<p><img src="https://img.imgdb.cn/item/608b57c6d1a9ae528fa2373d.png" alt="image-20210304220122324"></p>
</li>
<li><p>首先在本地IDEA启动成功</p>
</li>
</ul>
<p><img src="https://img.imgdb.cn/item/608b57dbd1a9ae528fa2e9f5.png" alt="image-20210304215220295"></p>
<ul>
<li>进入网址</li>
</ul>
<p><img src="https://img.imgdb.cn/item/608b57ebd1a9ae528fa36741.png" alt="image-20210304215801788"></p>
<ul>
<li><p>使用maven打包bootdo并运行，bootdo项目生成jar包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">maven clean</span><br><span class="line">maven package</span><br></pre></td></tr></table></figure>

<p><img src="https://img.imgdb.cn/item/608b57fcd1a9ae528fa3f3c0.png" alt="image-20210408152239126"></p>
<ul>
<li>把test文件都给注释掉</li>
</ul>
</li>
<li><p>把jar包和Dockerfile文件放到同一目录下</p>
<p><img src="https://img.imgdb.cn/item/608b5812d1a9ae528fa4a47c.png" alt="image-20210408160354212"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Dockerfile</span><br><span class="line">  1 FROM java:8</span><br><span class="line">  2 </span><br><span class="line">  3 VOLUME /tmp</span><br><span class="line">  4 </span><br><span class="line">  5 COPY bootdo-2.0.0.jar app.jar</span><br><span class="line">  6 </span><br><span class="line">  7 RUN bash -c &quot;touch /app.jar&quot;</span><br><span class="line">  8 </span><br><span class="line">  9 EXPOSE 8088</span><br><span class="line"> 10 </span><br><span class="line"> 11 ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;app.jar&quot;, &quot;--spring.profiles.active=test&quot;, &quot;--server.port=8088&quot;, &quot;&gt; /log/app.log&quot;]</span><br></pre></td></tr></table></figure></li>
<li><p>运行指令将jar包打包成镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker image build -t bootdo-2.0.0 .</span><br></pre></td></tr></table></figure>

<p><img src="https://img.imgdb.cn/item/608b582ad1a9ae528fa55ad7.png" alt="image-20210408160443433"></p>
</li>
<li><p>查看镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<p><img src="https://img.imgdb.cn/item/608b5839d1a9ae528fa5d370.png" alt="image-20210408160750151"></p>
</li>
<li><p>通过jar包运行项目</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar study-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>

<p><img src="https://img.imgdb.cn/item/608b584bd1a9ae528fa6621d.png" alt="image-20210422091705400"></p>
<p><img src="https://img.imgdb.cn/item/608b5859d1a9ae528fa6d3c6.png" alt="image-20210422091719557"></p>
</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://blog.csdn.net/qq_37525899/article/details/86736835">使用maven打包bootdo并运行</a></li>
</ul>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>docker概念</title>
    <url>/2021/05/28/docker%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><h3 id="操作概念图"><a href="#操作概念图" class="headerlink" title="操作概念图"></a>操作概念图</h3><p><img src="https://pic.imgdb.cn/item/60b03e3a08f74bc159e36b7c.png" alt="操作概念图"></p>
<h3 id="对应概念"><a href="#对应概念" class="headerlink" title="对应概念"></a>对应概念</h3><ul>
<li><p>镜像：就类似于我们用虚拟机，创建虚拟机前要下载的系统镜像文件，比如iso文件、img文件等等这样一些镜像文件。通俗来说就是为容器用来创建容器的</p>
</li>
<li><p>容器：它可以类比成正在运行中的一个虚拟机。</p>
</li>
<li><p>tar文件：tar文件就类似于vm使用时的vmdk文件，它可以将镜像直接保存成一个tar文件，然后怎样给别人然后别人通过load指令，重新加载成一个镜像，然后通过run指令就可以起来一个正在运行中的容器了。</p>
</li>
<li><p>Dockerfile：Dockerfile相当于一个配置文件，通过写“如何构建”的步骤，来指定一个镜像是如何构建的。通过docker build指令可以将dockerfile构建成一个镜像。</p>
</li>
<li><p>仓库(Repository)：仓库中保存了很多的镜像，包括一些共有的第三方已经做好的镜像比如ubuntu镜像nginx镜像mysql镜像tomcat镜像等等。我们可以通过docker poll指令下载这些镜像到本地。当然也可以把这些镜像通过push上传上去。</p>
</li>
</ul>
<h4 id="docker总述"><a href="#docker总述" class="headerlink" title="docker总述"></a>docker总述</h4><div class="note info flat">
            <p>通过以上这些技术的组合，最后的结果就是，绝大部分应用，开发者都可以通过docker build创建镜像，通过docker push上传镜像，用户通过docker pull下载镜像，用docker run运行应用。用户不需要再去关心如何搭建环境，如何安装，如何解决不同发行版的库冲突——而且通常不会需要消耗更多的硬件资源，不会明显降低性能。这就是其他答主所说的标准化、集装箱的原因所在。</p>
          </div>





]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>git使用</title>
    <url>/2021/12/26/git%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="git的基本使用"><a href="#git的基本使用" class="headerlink" title="git的基本使用"></a>git的基本使用</h3><ul>
<li><strong>Git是什么？****Git是目前世界上最先进的分布式版本控制系统。</strong></li>
<li><strong>工作原理 / 流程：</strong><img src="file://D:\noteBook\git\images\59c31e4400013bc911720340.png?lastModify=1640523474" alt="图片描述"></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Workspace：工作区</span><br><span class="line">Index / Stage：暂存区</span><br><span class="line">Repository：仓库区（或本地仓库)</span><br><span class="line">Remote：远程仓库</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>git设置用户名和邮箱</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;superbear&quot;</span><br><span class="line">$ git config --global user.email &quot;809900832@qq.com&quot;</span><br></pre></td></tr></table></figure></li>
<li><strong>git init将当前目录变成git管理仓库</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git init</span><br><span class="line">Initialized empty Git repository in D:/gitTest/.git/</span><br></pre></td></tr></table></figure></li>
<li><strong>添加文件到暂存区</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git add readme.txt</span><br></pre></td></tr></table></figure></li>
<li><strong>把文件提交仓库</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git commit -m &quot;readme.txt提交&quot;</span><br><span class="line">[master (root-commit) da56bfb] readme.txt提交</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 readme.txt</span><br></pre></td></tr></table></figure></li>
<li><strong>查看文件提交状态</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure></li>
<li><strong>修改readme.txt文件，查看status（readme.txt已经被修改但是文件未提交）</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line">        modified:   readme.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure></li>
<li><strong>查看readme.txt修改了什么内容</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git diff readme.txt</span><br><span class="line">diff --git a/readme.txt b/readme.txt</span><br><span class="line">index 748099d..1ae13e4 100644</span><br><span class="line">--- a/readme.txt</span><br><span class="line">+++ b/readme.txt</span><br><span class="line">@@ -1 +1,2 @@</span><br><span class="line">-11111111</span><br><span class="line">\ No newline at end of file</span><br><span class="line">+11111111</span><br><span class="line">+22222222</span><br><span class="line">\ No newline at end of file</span><br></pre></td></tr></table></figure></li>
<li><strong>提交修改后的内容</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">80990@SuperBear-LAPTOP MINGW64 /d/gitTest (master)</span><br><span class="line">$ git add readme.txt</span><br><span class="line"></span><br><span class="line">80990@SuperBear-LAPTOP MINGW64 /d/gitTest (master)</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)</span><br><span class="line">        modified:   readme.txt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">80990@SuperBear-LAPTOP MINGW64 /d/gitTest (master)</span><br><span class="line">$ git commit -m &quot;文件增加222222内容&quot;</span><br><span class="line">[master c37756b] 文件增加222222内容</span><br><span class="line"> 1 file changed, 2 insertions(+), 1 deletion(-)</span><br><span class="line"></span><br><span class="line">80990@SuperBear-LAPTOP MINGW64 /d/gitTest (master)</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h4><ul>
<li><strong>添加一行3333333333</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">80990@SuperBear-LAPTOP MINGW64 /d/gitTest (master)</span><br><span class="line">$ git add readme.txt</span><br><span class="line"></span><br><span class="line">80990@SuperBear-LAPTOP MINGW64 /d/gitTest (master)</span><br><span class="line">$ git commit -m &quot;文件增加3333333333内容&quot;</span><br><span class="line">[master 365183a] 文件增加3333333333内容</span><br><span class="line"> 1 file changed, 2 insertions(+), 1 deletion(-)</span><br></pre></td></tr></table></figure></li>
<li><strong>查看历史记录</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git log</span><br><span class="line">commit 365183a8190fd656187a692d1b87534f3aea2565 (HEAD -&gt; master)</span><br><span class="line">Author: superbear &lt;809900832@qq.com&gt;</span><br><span class="line">Date:   Thu Aug 26 11:23:13 2021 +0800</span><br><span class="line"></span><br><span class="line">    文件增加3333333333内容</span><br><span class="line"></span><br><span class="line">commit c37756b902d3c950a3f9abc31598165a6680e0ad</span><br><span class="line">Author: superbear &lt;809900832@qq.com&gt;</span><br><span class="line">Date:   Thu Aug 26 11:15:15 2021 +0800</span><br><span class="line"></span><br><span class="line">    文件增加222222内容</span><br><span class="line"></span><br><span class="line">commit da56bfb0131b6a23e6d28d8f9311baa72073d014</span><br><span class="line">Author: superbear &lt;809900832@qq.com&gt;</span><br><span class="line">Date:   Thu Aug 26 11:09:48 2021 +0800</span><br><span class="line"></span><br><span class="line">    readme.txt提交</span><br><span class="line">    </span><br></pre></td></tr></table></figure></li>
<li><strong>简化版显示版本信息</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git log --oneline</span><br><span class="line">365183a (HEAD -&gt; master) 文件增加3333333333内容</span><br><span class="line">c37756b 文件增加222222内容</span><br><span class="line">da56bfb readme.txt提交</span><br></pre></td></tr></table></figure></li>
<li><strong>版本回退</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">80990@SuperBear-LAPTOP MINGW64 /d/gitTest (master)</span><br><span class="line">$ cat readme.txt</span><br><span class="line">11111111</span><br><span class="line">22222222</span><br><span class="line">3333333333</span><br><span class="line">80990@SuperBear-LAPTOP MINGW64 /d/gitTest (master)</span><br><span class="line">$ git reset --hard HEAD^</span><br><span class="line">HEAD is now at c37756b 文件增加222222内容</span><br><span class="line"></span><br><span class="line">80990@SuperBear-LAPTOP MINGW64 /d/gitTest (master)</span><br><span class="line">$ cat readme.txt</span><br><span class="line">11111111</span><br><span class="line">22222222</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><strong>再次查看历史记录</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git log --oneline</span><br><span class="line">c37756b (HEAD -&gt; master) 文件增加222222内容</span><br><span class="line">da56bfb readme.txt提交</span><br></pre></td></tr></table></figure></li>
<li><strong>回退到最新版本</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">80990@SuperBear-LAPTOP MINGW64 /d/gitTest (master)</span><br><span class="line">$ git reflog</span><br><span class="line">c37756b (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to HEAD^</span><br><span class="line">365183a HEAD@&#123;1&#125;: commit: 文件增加3333333333内容</span><br><span class="line">c37756b (HEAD -&gt; master) HEAD@&#123;2&#125;: commit: 文件增加222222内容</span><br><span class="line">da56bfb HEAD@&#123;3&#125;: commit (initial): readme.txt提交</span><br><span class="line"></span><br><span class="line">80990@SuperBear-LAPTOP MINGW64 /d/gitTest (master)</span><br><span class="line">$ git reset --hard 365183a</span><br><span class="line">HEAD is now at 365183a 文件增加3333333333内容</span><br><span class="line"></span><br><span class="line">80990@SuperBear-LAPTOP MINGW64 /d/gitTest (master)</span><br><span class="line">$ cat readme.txt</span><br><span class="line">11111111</span><br><span class="line">22222222</span><br><span class="line">3333333333</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><strong>理解工作区与暂存区的区别？</strong><ul>
<li><strong>工作区：就是你在电脑上看到的目录，比如目录下testgit里的文件(.git隐藏目录版本库除外)。或者以后需要再新建的目录文件等等都属于工作区范畴。</strong></li>
<li><strong>版本库(Repository)：工作区有一个隐藏目录.git,这个不属于工作区，这是版本库。其中版本库里面存了很多东西，其中最重要的就是stage(暂存区)，还有Git为我们自动创建了第一个分支master,以及指向master的一个指针HEAD。</strong></li>
</ul>
</li>
<li><strong>Git提交文件到版本库有两步：<strong><strong>第一步：是使用 git add 把文件添加进去，实际上就是把文件添加到暂存区。</strong></strong>第二步：使用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支上。</strong></li>
</ul>
<h4 id="参考：Git使用教程-最详细，最傻瓜，最浅显，真正手把手教"><a href="#参考：Git使用教程-最详细，最傻瓜，最浅显，真正手把手教" class="headerlink" title="参考：Git使用教程,最详细，最傻瓜，最浅显，真正手把手教"></a>参考：<a href="https://www.cnblogs.com/joyco773/p/10591820.html">Git使用教程,最详细，最傻瓜，最浅显，真正手把手教</a></h4>]]></content>
  </entry>
  <entry>
    <title>python实现发送邮件</title>
    <url>/2021/05/24/python%E5%AE%9E%E7%8E%B0%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="python实现发送邮件"><a href="#python实现发送邮件" class="headerlink" title="python实现发送邮件"></a>python实现发送邮件</h1><h3 id="申请STMP授权码"><a href="#申请STMP授权码" class="headerlink" title="申请STMP授权码"></a>申请STMP授权码</h3><ol>
<li>在QQ邮箱主界面里面开启POP/SMTP服务：设置-账户-开启pop/smtp服务</li>
</ol>
<p><img src="https://img.imgdb.cn/item/607a9dd78322e6675c8be16b.png" alt="img"></p>
<p><img src="https://img.imgdb.cn/item/607a9dd78322e6675c8be16f.png" alt="img"></p>
<p>2.点击开启pop/smtp服务后，会弹出验证密保，就是通过密保手机号，发送“配置邮件客户端”到1069 0700 69，（自己用手机弄一下就好了），用自己手机发送完后点击“我已发送”</p>
<p><img src="https://img.imgdb.cn/item/607a9dd78322e6675c8be179.png" alt="img"></p>
<p>3.点击“我已发送”后会弹出一个开启POP3/SMTP服务的授权码，这个授权码很重要，要记住这个授权码：授权码很重要，然后点击确定。</p>
<p><img src="https://img.imgdb.cn/item/607a9dd78322e6675c8be193.png" alt="img"></p>
<h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import smtplib</span><br><span class="line">from email.mime.text import MIMEText</span><br><span class="line">from email.utils import formataddr</span><br><span class="line"></span><br><span class="line">my_sender = &#x27;XXXXXXXXX@qq.com&#x27;  # 发件人邮箱账号</span><br><span class="line">my_pass = &#x27;XXXXXXXXXXXXXXXXX&#x27;  # 发件人SMTP授权码</span><br><span class="line">my_user = &#x27;XXXXXXXXX@qq.com&#x27;  # 收件人邮箱账号，我这边发送给自己</span><br><span class="line">msg = MIMEText(&#x27;出bug了&#x27;, &#x27;plain&#x27;, &#x27;utf-8&#x27;)</span><br><span class="line">msg[&#x27;From&#x27;] = formataddr([&quot;xxxxxx&quot;, my_sender])  # 括号里的对应发件人邮箱昵称、发件人邮箱账号</span><br><span class="line">msg[&#x27;To&#x27;] = formataddr([&quot;xxxxxx&quot;, my_user])  # 括号里的对应收件人邮箱昵称、收件人邮箱账号</span><br><span class="line">msg[&#x27;Subject&#x27;] = &quot;bug&quot;  # 邮件的主题，也可以说是标题</span><br><span class="line"></span><br><span class="line">server = smtplib.SMTP_SSL(&quot;smtp.qq.com&quot;, 465)  # 发件人邮箱中的SMTP服务器</span><br><span class="line">server.login(my_sender, my_pass)  # 括号中对应的是发件人邮箱账号、邮箱密码</span><br><span class="line">server.sendmail(my_sender, [my_user, ], msg.as_string())  # 括号中对应的是发件人邮箱账号、收件人邮箱账号、发送邮件</span><br><span class="line">server.quit()  # 关闭连接</span><br></pre></td></tr></table></figure>

<p>参考文献：<a href="https://blog.csdn.net/weixin_38166074/article/details/91350457?utm_term=qq%E9%82%AE%E7%AE%B1%E5%8F%91%E9%82%AE%E4%BB%B6api&utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~sobaiduweb~default-0-91350457&spm=3001.4430">java编写QQ邮箱发送邮件_调用QQ邮箱接口</a><br><a href="https://juejin.cn/post/6844903865083494408">Python3实现邮箱发送</a></p>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>人像嘴唇颜色更改</title>
    <url>/2021/06/04/%E4%BA%BA%E5%83%8F%E5%98%B4%E5%94%87%E9%A2%9C%E8%89%B2%E6%9B%B4%E6%94%B9/</url>
    <content><![CDATA[<h3 id="人像嘴唇颜色更改"><a href="#人像嘴唇颜色更改" class="headerlink" title="人像嘴唇颜色更改"></a>人像嘴唇颜色更改</h3><ul>
<li><p>打开图片</p>
<p><img src="https://pic.imgdb.cn/item/60b9d4138355f7f718862da7.png" alt="image-20210604112727351"></p>
</li>
<li><p>方法一</p>
<ul>
<li><p>新建一个空白图层，图层混合模式设为<em><strong>“颜色”</strong></em>，这样只会更改它的颜色，而不会更改他的质感。</p>
</li>
<li><p>选择画笔工具调整不透明度（51%）+流量（56%）</p>
</li>
<li><p>找到所需要的颜色，找到之后就可以直接画了</p>
</li>
<li><p>涂完之后如果觉得有点太过了的话，可以降低一点他的透明度。</p>
<p><img src="https://pic.imgdb.cn/item/60b9d4298355f7f7188811e5.png" alt="image-20210604113032303"></p>
</li>
</ul>
</li>
<li><p>方法二</p>
<ul>
<li><p>建立一个纯色图层</p>
<p><img src="https://pic.imgdb.cn/item/60b9d4348355f7f71888f1d2.png" alt="image-20210604141536603"></p>
</li>
<li><p>ctrl+i  反向蒙版颜色</p>
</li>
<li><p>把图层模式改成颜色</p>
</li>
<li><p>调节不透明度使其自然</p>
</li>
</ul>
</li>
<li><p>方法三</p>
<ul>
<li>对于已经涂了口红的图，嘴唇的颜色杂色不多的情况下</li>
<li>复制图层，选择滤镜—&gt;camera raw</li>
<li>HSL调整—&gt;饱和度—&gt;红色</li>
<li>如果不想影响其他地方红色，选择蒙版，把她嘴唇涂出来</li>
</ul>
</li>
<li><p>方法四</p>
<ul>
<li><p>添加选择可选颜色图层</p>
<p><img src="https://pic.imgdb.cn/item/60b9d4448355f7f7188a45c7.png" alt="image-20210604150219774"></p>
</li>
<li><p>调节颜色之后，添加蒙版，选择嘴唇</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>摄影</category>
      </categories>
      <tags>
        <tag>PS</tag>
        <tag>人像</tag>
      </tags>
  </entry>
  <entry>
    <title>人像眉毛精致化处理</title>
    <url>/2021/06/04/%E4%BA%BA%E5%83%8F%E7%9C%89%E6%AF%9B%E7%B2%BE%E8%87%B4%E5%8C%96%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h3 id="人像眉毛精致化处理"><a href="#人像眉毛精致化处理" class="headerlink" title="人像眉毛精致化处理"></a>人像眉毛精致化处理</h3><ul>
<li>导入图像，稍微调整一下曝光度(+0.25)+对比度(+6)使眉毛比较明显。</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/60b9d34d8355f7f71875cddc.png" alt="image-20210604101144306"></p>
<ul>
<li><p>放大图片，看一下眉毛所存在的问题</p>
<ul>
<li>眉毛中间有很多空缺</li>
<li>外面存在杂发、杂眉毛</li>
</ul>
</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/60b9d35d8355f7f718771b44.png" alt="image-20210604101722568"></p>
<ul>
<li><p>处理步骤</p>
<ul>
<li><p>复制图层，用修补工具把外面杂乱的眉毛修掉</p>
<p><img src="https://pic.imgdb.cn/item/60b9d3788355f7f718796aa5.png" alt="image-20210604102339995"></p>
</li>
<li><p>用锁套工具将长得比较好的眉毛截选出来，然后将截选出的眉毛拷贝成一个图层</p>
<p><img src="https://pic.imgdb.cn/item/60b9d3898355f7f7187ac111.png" alt="image-20210604102640501"></p>
</li>
<li><p>将眉毛移动到眉毛空缺的地方</p>
</li>
<li><p>利用自有变换工具（ctrl+t）调整角度，使其纹理走向与原图匹配</p>
</li>
<li><p>将图层混合模式改成深色</p>
<p><img src="https://pic.imgdb.cn/item/60b9d3988355f7f7187bf9e0.png" alt="image-20210604103202011"></p>
</li>
<li><p>创建蒙版，<em><strong>ctrl+i</strong></em>蒙版反向（蒙版黑色不可见，白色可见）</p>
<p><img src="https://pic.imgdb.cn/item/60b9d3a78355f7f7187d3db4.png" alt="image-20210604103253913"></p>
<p><img src="https://pic.imgdb.cn/item/60b9d3b48355f7f7187e5391.png" alt="image-20210604103800722"></p>
</li>
<li><p>使用画笔，将画笔颜色改成白色，降低画笔不透明度（这里不透明度为54%）。</p>
</li>
<li><p>将眉毛用白色画笔画出来</p>
</li>
<li><p>如果还不够就新建一个图层</p>
</li>
<li><p>利用吸管工具吸取一个眉毛中比较深的颜色</p>
</li>
<li><p>将画笔调小一点（2）不透明度调低一点（36%）</p>
</li>
<li><p>调整完毕之后就大功告成了</p>
<p><img src="https://pic.imgdb.cn/item/60b9d3cb8355f7f718803ef7.png" alt="image-20210604112307771"></p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>摄影</category>
      </categories>
      <tags>
        <tag>PS</tag>
        <tag>人像</tag>
      </tags>
  </entry>
  <entry>
    <title>后期PS处理调色思路</title>
    <url>/2021/06/07/%E5%90%8E%E6%9C%9FPS%E5%A4%84%E7%90%86%E8%B0%83%E8%89%B2%E6%80%9D%E8%B7%AF/</url>
    <content><![CDATA[<h4 id="后期PS处理调色思路"><a href="#后期PS处理调色思路" class="headerlink" title="后期PS处理调色思路"></a>后期PS处理调色思路</h4><ul>
<li>基础调整<ul>
<li>白平衡<ul>
<li>色温：控制照片冷暖感觉的工具</li>
<li>色调：照片整体的一个色彩倾向（一般默认不调）</li>
</ul>
</li>
<li>曝光：调节照片的明暗</li>
<li>高光：压低高光，可以找回高光区的细节</li>
<li>白色：压低白色，找回照片中白色的细节</li>
<li>阴影：控制照片中偏暗的部分</li>
<li>黑色：控制照片中黑色看不到细节的部分</li>
</ul>
</li>
<li>HSL调整<ul>
<li>色相：色彩的相貌<ul>
<li>把某个颜色定义成自己拖动到的颜色</li>
</ul>
</li>
<li>饱和度：颜色的纯度<ul>
<li>数字越大说明纯度越高</li>
</ul>
</li>
<li>明亮度：颜色的明暗程度<ul>
<li>拉高橙色，画面中橙色就会变亮一些，拉低橙色，画面中的橙色就会变暗一些</li>
</ul>
</li>
<li>如何使用？<ul>
<li>亚洲人的皮肤<em><strong>橙色</strong></em>是最多的，亚洲人的皮肤关键在于橙色<ul>
<li>降低橙色饱和度，使其皮肤通透点</li>
<li>提高橙色明亮度，使其皮肤白皙水嫩</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>摄影</category>
      </categories>
      <tags>
        <tag>PS</tag>
      </tags>
  </entry>
  <entry>
    <title>差分与复原</title>
    <url>/2021/12/26/%E5%B7%AE%E5%88%86%E4%B8%8E%E5%A4%8D%E5%8E%9F/</url>
    <content><![CDATA[<h1 id="时间序列的差分与复原"><a href="#时间序列的差分与复原" class="headerlink" title="时间序列的差分与复原"></a>时间序列的差分与复原</h1><p><strong>在时序分析时，我们经常需要将原始序列进行差分，然后做出拟合或者预测，最后还需要将拟合的或者预测的值恢复成原始序列。这里，使用Pandas的Series中的diff和cumsum函数可以方便的实现。</strong></p>
<h2 id="一阶差分与复原"><a href="#一阶差分与复原" class="headerlink" title="一阶差分与复原"></a>一阶差分与复原</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import pandas as pd</span><br><span class="line">time_series = pd.Series([2, 4, 3, 5, 6, 7, 4, 5, 6, 3, 2, 4])</span><br><span class="line">time_series_diff = time_series.diff(1).dropna()</span><br><span class="line">time_series_restored = pd.Series([time_series[0]], index=[time_series.index[0]]).append(time_series_diff).cumsum()</span><br><span class="line">print(time_series)</span><br><span class="line">print(time_series_diff)</span><br><span class="line">print(time_series_restored)</span><br><span class="line">plt.plot(time_series, color=&#x27;red&#x27;, label=&#x27;time_series&#x27;)</span><br><span class="line">plt.plot(time_series_diff, color=&#x27;green&#x27;, label=&#x27;time_series_diff&#x27;)</span><br><span class="line">plt.plot(time_series_restored, color=&#x27;blue&#x27;,linestyle=&#x27;--&#x27;, label=&#x27;time_series_restored&#x27;)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<h2 id="多阶差分复原"><a href="#多阶差分复原" class="headerlink" title="多阶差分复原"></a>多阶差分复原</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import pandas as pd</span><br><span class="line">time_series = pd.Series([2,4,3,5,6,7,4,5,6,3,2,4], index=pd.date_range(start=&#x27;2000&#x27;, periods=12, freq=&#x27;a&#x27;))</span><br><span class="line">time_series_diff = time_series</span><br><span class="line">diff_times = 3</span><br><span class="line">first_values = []</span><br><span class="line">for i in range(diff_times):</span><br><span class="line">    first_values.append(pd.Series([time_series_diff[0]],index=[time_series_diff.index[0]]))</span><br><span class="line">    time_series_diff = time_series_diff.diff(1).dropna()</span><br><span class="line"></span><br><span class="line">time_series_restored = time_series_diff</span><br><span class="line">for first in reversed(first_values):</span><br><span class="line">    time_series_restored = first.append(time_series_restored).cumsum()</span><br><span class="line">print(time_series)</span><br><span class="line">print(time_series_diff)</span><br><span class="line">print(time_series_restored)</span><br><span class="line">plt.plot(time_series, color=&#x27;red&#x27;, label=&#x27;time_series&#x27;)</span><br><span class="line">plt.plot(time_series_diff, color=&#x27;green&#x27;, label=&#x27;time_series_diff&#x27;)</span><br><span class="line">plt.plot(time_series_restored, color=&#x27;blue&#x27;,linestyle=&#x27;--&#x27;, label=&#x27;time_series_restored&#x27;)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><ul>
<li><a href="https://www.jianshu.com/p/88d663ecdf25">Pandas 连续差分diff后恢复原始的序列</a></li>
</ul>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>信号处理</tag>
      </tags>
  </entry>
  <entry>
    <title>图片压缩</title>
    <url>/2021/05/27/%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9/</url>
    <content><![CDATA[<h2 id="图片压缩"><a href="#图片压缩" class="headerlink" title="图片压缩"></a>图片压缩</h2><h3 id="导言"><a href="#导言" class="headerlink" title="导言"></a>导言</h3><div class="note info modern">
            <p>最近想做一个相册，图片需要上传到图床然后，调用图床链接进行相册图片显示。为实现图片快速加载，以及节约图床存储空间，写了一个实现图片压缩的小脚本。</p>
          </div>

<p>所用图床：<a href="https://imgtu.com/">路过图床</a></p>
<!-- 最近想做一个相册，图片需要上传到图床然后，调用图床链接进行相册图片显示。为实现图片快速加载，以及节约图床存储空间，写了一个实现图片压缩的小脚本 -->

<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tree 压缩图片</span></span><br><span class="line">|-- compress</span><br><span class="line">|-- compressPic.py</span><br><span class="line">|-- finish</span><br><span class="line">`-- prepare</span><br><span class="line">    |-- test</span><br><span class="line">    |   `-- IMG1.JPG</span><br><span class="line">    `-- test2</span><br><span class="line">        `-- IMG2.JPG</span><br></pre></td></tr></table></figure>

<h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time : 2021/5/25 14:54 </span></span><br><span class="line"><span class="comment"># @Author : SuperBear</span></span><br><span class="line"><span class="comment"># @File : compressPic.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> os, shutil</span><br><span class="line"></span><br><span class="line"><span class="comment"># 图片压缩批处理</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compressImage</span>(<span class="params">srcPath, dstPath</span>):</span></span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(srcPath):</span><br><span class="line">        <span class="comment"># 如果不存在目的目录则创建一个，保持层级结构</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(dstPath):</span><br><span class="line">            os.makedirs(dstPath)</span><br><span class="line">        <span class="comment"># 拼接完整的文件或文件夹路径</span></span><br><span class="line">        srcFile = os.path.join(srcPath, filename)</span><br><span class="line">        dstFile = os.path.join(dstPath, filename)</span><br><span class="line">        <span class="comment"># 如果是文件就处理</span></span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(srcFile):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 打开原图片缩小后保存，可以用if srcFile.endswith(&quot;.jpg&quot;)或者split，splitext等函数等针对特定文件压缩</span></span><br><span class="line">                sImg = Image.<span class="built_in">open</span>(srcFile)</span><br><span class="line">                w, h = sImg.size</span><br><span class="line">                dImg = sImg.resize((<span class="built_in">int</span>(w / <span class="number">1.5</span>), <span class="built_in">int</span>(h / <span class="number">1.5</span>)), Image.ANTIALIAS)  <span class="comment"># 设置压缩尺寸和选项，注意尺寸要用括号</span></span><br><span class="line">                dImg.save(dstFile)  <span class="comment"># 也可以用srcFile原路径保存,或者更改后缀保存，save这个函数后面可以加压缩编码选项JPEG之类的</span></span><br><span class="line">                <span class="built_in">print</span>(dstPath+ dstFile + <span class="string">&quot; 成功！&quot;</span>)</span><br><span class="line">            <span class="keyword">except</span> Exception:</span><br><span class="line">                <span class="built_in">print</span>(dstFile + <span class="string">&quot;失败！&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果是文件夹就递归</span></span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(srcFile):</span><br><span class="line">            <span class="comment"># print(srcFile)</span></span><br><span class="line">            compressImage(srcFile, dstFile)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 遍历压缩图片</span></span><br><span class="line">    compressImage(<span class="string">&quot;./prepare&quot;</span>, <span class="string">&quot;./compress&quot;</span>)</span><br><span class="line">    <span class="comment"># 移动文件夹prepare到finish</span></span><br><span class="line">    src_path = <span class="string">&#x27;./prepare/&#x27;</span></span><br><span class="line">    target_path = <span class="string">&#x27;./finish/&#x27;</span></span><br><span class="line">    file_list = os.listdir(src_path)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(file_list) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> file_list:</span><br><span class="line">            shutil.move(src_path + file, target_path + file)</span><br></pre></td></tr></table></figure>

<p>github源代码：<a href="https://github.com/sSsuper-Bear/compressPicture/tree/master">https://github.com/sSsuper-Bear/compressPicture/tree/master</a></p>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>控制相机对焦参数</title>
    <url>/2021/06/06/%E6%8E%A7%E5%88%B6%E7%9B%B8%E6%9C%BA%E5%AF%B9%E7%84%A6%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<h3 id="控制相机对焦的参数"><a href="#控制相机对焦的参数" class="headerlink" title="控制相机对焦的参数"></a>控制相机对焦的参数</h3><h4 id="画面清晰"><a href="#画面清晰" class="headerlink" title="画面清晰"></a>画面清晰</h4><ul>
<li><p>什么是对焦</p>
</li>
<li><p>对焦区域</p>
<ul>
<li><p>区域自动对焦，大区域自动对焦</p>
<ul>
<li>特点：精度一般</li>
<li>适合场景：运动员/运动题材</li>
</ul>
</li>
<li><p>45点自动对焦</p>
<ul>
<li>特点：对焦容易/精确度较差</li>
<li>适合场景：风格/大场景</li>
</ul>
</li>
<li><p>单点自动对焦</p>
<ul>
<li>特点：精确度高</li>
<li>适合场景：人物/产品/特写</li>
</ul>
</li>
</ul>
</li>
<li><p>对焦模式</p>
<ul>
<li><p>AF（自动对焦）</p>
<ul>
<li>使用<ul>
<li>半按快门</li>
</ul>
</li>
<li>分类<ul>
<li>单次自动对焦—&gt;半按快门对焦一次，适合拍静止物体</li>
<li>人工智能伺服对焦——半按快门对焦多次，适合拍运动物体</li>
<li>人工智能自动对焦——适合拍无法准确预判是否运动的物体</li>
</ul>
</li>
</ul>
</li>
<li><p>MF（手动对焦）</p>
<ul>
<li><p>使用</p>
<ul>
<li><p>转动对焦环对焦</p>
<p><img src="https://pic.imgdb.cn/item/60bc351d8355f7f718b747fa.png" alt="image-20210606101212207"></p>
</li>
</ul>
</li>
<li><p>适用场景</p>
<ul>
<li>暗环境下拍摄<ul>
<li>在AF自动对焦模式下，经常会出现对焦困难的情况</li>
</ul>
</li>
<li>逆光环境<ul>
<li>光线进入镜头很多，有较强烈的眩光效果，用AF可能不太好对焦</li>
</ul>
</li>
<li>光斑等特殊效果拍摄<ul>
<li>转动对焦环，直到出现较漂亮的光斑效果，再进行拍摄</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>摄影</category>
      </categories>
      <tags>
        <tag>相机</tag>
      </tags>
  </entry>
  <entry>
    <title>控制相机曝光参数</title>
    <url>/2021/06/06/%E6%8E%A7%E5%88%B6%E7%9B%B8%E6%9C%BA%E6%9B%9D%E5%85%89%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<h3 id="控制相机曝光的参数"><a href="#控制相机曝光的参数" class="headerlink" title="控制相机曝光的参数"></a>控制相机曝光的参数</h3><h4 id="明暗合适"><a href="#明暗合适" class="headerlink" title="明暗合适"></a>明暗合适</h4><ul>
<li><p>曝光三要素</p>
<ul>
<li><p>光圈</p>
<ul>
<li>光圈在相机中是F来表示，F后面的数字越小，表示光圈越大（光圈越大—&gt;进光量越多）</li>
<li>F+数字越小—&gt;光圈越大</li>
<li>光圈越大，背景虚化越强    光圈越小，背景虚化越弱</li>
<li>使用<ul>
<li>当相机在<em><strong>Av光圈</strong></em>优先模式下，可以通过转动<em><strong>快门附近的拨盘</strong></em>进行调节。</li>
<li>当相机在<em><strong>M手动模式</strong></em>的时候，转动<em><strong>DIAL FUNC拨盘</strong></em>进行调节。</li>
</ul>
</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/60bc357f8355f7f718bc2167.png" alt="image-20210605183802551"></p>
</li>
<li><p>快门</p>
<ul>
<li>快门时间长—&gt;进光量多—&gt;照片亮</li>
<li>1/60或60表示1/60秒，1’’表示1秒</li>
<li>短快门—&gt;抓拍瞬间，长快门—&gt;记录轨迹</li>
<li>使用<ul>
<li>Tv快门优先和M手动模式都是通过<em><strong>快门拨盘</strong></em>来调节</li>
</ul>
</li>
</ul>
</li>
<li><p>ISO（感光度）</p>
<ul>
<li>感光度是感光元件对光线的敏感程度与，简称ISO</li>
<li>数字越大—&gt;对光线越敏感，数字越小—&gt;对光线越不敏感</li>
<li>ISO越高—&gt;噪点越多—&gt;画面越粗糙，ISO越低—&gt;噪点越少—&gt;画面越细腻</li>
<li>手持排夜景、抓拍运动物体、长焦镜头拍摄可调高ISO</li>
</ul>
</li>
</ul>
</li>
<li><p>光圈、快门、ISO之间的关系</p>
<ul>
<li><p>以水龙头作为比喻</p>
<ul>
<li>阀门打开的大小—&gt;光圈大小</li>
<li>水流的时间—&gt;快门时间</li>
<li>流出水的总量—&gt;进光量</li>
</ul>
</li>
<li><p>在光线比较充足的情况下，为了保证照片的画质，我们通常会选择100-200之间的低ISO，ISO作为一个相对固定的参数，我们暂时不予考虑</p>
</li>
<li><p>进光量一定 光圈越大—&gt;快门时间越短，光圈越小—&gt;快门时间越长</p>
</li>
<li><p>虚化效果—&gt;大光圈+短快门</p>
</li>
<li><p>运动轨迹/慢门效果—&gt;长快门+小光圈</p>
</li>
</ul>
</li>
<li><p>曝光模式</p>
<ul>
<li><p>A+    全自动模式</p>
<ul>
<li>光圈、快门、ISO都由相机自动设置</li>
</ul>
</li>
<li><p>P      程序自动模式</p>
<ul>
<li>光圈、快门由相机自动设置，ISO可以手动设置</li>
</ul>
</li>
<li><p>Tv     快门优先模式</p>
<ul>
<li>快门时间、ISO可手动设置，光圈由相机自动匹配</li>
</ul>
</li>
<li><p>Av     光圈优先模式(很多人喜欢这种模式)</p>
<ul>
<li>光圈、ISO可手动设置，快门速度由相机自动匹配</li>
</ul>
</li>
<li><p>M      全手动模式</p>
<ul>
<li>光圈、快门、ISO都由我们手动设置</li>
</ul>
</li>
<li><p>SCN  场景自动模式</p>
<ul>
<li>人像：相机会自动采用大光圈形成背景虚化突出人物</li>
<li>风光：相机自动采用小光圈使整体清晰</li>
<li>运动：相机自动提高快门速度跟容易抓拍运动物体</li>
</ul>
</li>
</ul>
</li>
<li><p>测光模式</p>
<ul>
<li><p>测光模式：相机可以自动侦测周围光线情况，侦测光线的方式不同就有了不同的测光模式</p>
</li>
<li><p>新手常用的测光模式：</p>
<ul>
<li>评价测光（矩阵）：把画面分成若干个区域进行测光，加权平均后作为曝光基准（适合生活中90%的拍摄场景）</li>
<li>点测光：对画面中的“点”进行测光作为曝光基准（适合在逆光等复杂的环境下进行拍摄）</li>
</ul>
</li>
</ul>
</li>
<li><p>曝光补偿</p>
<ul>
<li>什么是曝光补偿：曝光补偿就是对画面亮度的补偿效果，在Av/Tv/P这种半自动模式下，可以手动调整曝光补偿改变画面亮度。</li>
<li>曝光补偿在相机中是如何表示的：曝光补偿在相机中是以刻度表的形式呈现的，并且可以调节正负</li>
<li>如何使用<ul>
<li>白加黑减（拍白色占比比较大的物体加一点曝光补偿，拍黑色占比比较大的物体减一些曝光补偿）</li>
<li>明快小清新风格照片：交易点曝光补偿，让照片微微过曝</li>
<li>剪影效果照片：减一点曝光补偿，让剪影效果更加明显</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>摄影</category>
      </categories>
      <tags>
        <tag>相机</tag>
      </tags>
  </entry>
  <entry>
    <title>控制相机色彩参数</title>
    <url>/2021/06/06/%E6%8E%A7%E5%88%B6%E7%9B%B8%E6%9C%BA%E8%89%B2%E5%BD%A9%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<h3 id="控制相机色彩的参数"><a href="#控制相机色彩的参数" class="headerlink" title="控制相机色彩的参数"></a>控制相机色彩的参数</h3><h4 id="色彩合理"><a href="#色彩合理" class="headerlink" title="色彩合理"></a>色彩合理</h4><ul>
<li><p>白平衡</p>
<ul>
<li><p>白平衡可以帮助我们在复杂光源下，还原物体本身的颜色</p>
</li>
<li><p>几种白平衡模式</p>
<ul>
<li><p>自动（AWB）</p>
</li>
<li><p>日光</p>
</li>
<li><p>阴影</p>
<ul>
<li>拍摄夕阳是，想要营造暖色调，故意调到阴影白平衡，让相机给画面加入更多的暖色调</li>
</ul>
</li>
<li><p>阴天</p>
</li>
<li><p>钨丝灯</p>
</li>
<li><p>白色荧光灯</p>
<ul>
<li>拍摄大海时，为了突出大海碧蓝的清冷效果，也可以故意设置成白色荧光灯白平衡，让相机为画面加入更多的蓝色调</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>摄影</category>
      </categories>
      <tags>
        <tag>相机</tag>
      </tags>
  </entry>
  <entry>
    <title>摄影经验——转载</title>
    <url>/2021/06/07/%E6%91%84%E5%BD%B1%E7%BB%8F%E9%AA%8C%E2%80%94%E2%80%94%E8%BD%AC%E8%BD%BD/</url>
    <content><![CDATA[<h3 id="人像摄影怎么拍"><a href="#人像摄影怎么拍" class="headerlink" title="人像摄影怎么拍"></a>人像摄影怎么拍</h3><h2 id="1-构图"><a href="#1-构图" class="headerlink" title="1. 构图"></a><strong>1. 构图</strong></h2><p>首先，是人像拍摄中，构图的问题。</p>
<p>关于构图在摄影中的重要性大家都有自己的认知，面对于不同的摄影风格，有的风格讲究构图讲究严谨，例如古风，有的风格构图上更倾向于自然不拘谨，例如很多日系生活感的照片拍摄，有的风格会倾向于以画面的张力和情绪为优先考虑，而完全不会被构图束缚。例如我们都听说的日本荒木老前辈，所以摄影的构图该如何去做，其实取决于你所喜欢并想要做到极致的那一类摄影风格而定。</p>
<p>我今天就说一下我自己的构图习惯，我的拍摄风格，多数是安静的画面，画面感比较干净，构图也算是偏向严谨类方向的类型，当然我的风格也可能会慢慢转变，毕竟这些都是受自己的审美所影响的，审美发生了变化，风格也会慢慢的发生变化。</p>
<p>我的很多学生，来找我报名课程系统学习摄影的时候，他们多数都是近似一张白纸，在这样的情况下，面对构图的问题，我基本会对他们有两点要求：就是<strong>先用好居中构图和三分之一构图。</strong>用好这两种构图方法的同时再慢慢去找到自己在摄影中的风格和感觉，当这两种构图方法能运用得心应手的时候， 再去在画面中尝试加入别的变化也是很轻松的事情。</p>
<p>你可能会说：老师，你说的这两种方法我都懂都明白，这也太简单了吧？其实，你能把居中构图和三分之一构图用明白，用好，并不是一件看上去那么简单的事情呦~~~</p>
<p>我对学生的要求是：用三分之一构图去拍照，画面的人物主体虽然在这个位置，但是<strong>你要尝试用别的方法让他们在画面中找到平衡感</strong>；使用居中构图的时候，<strong>尝试用你的创意让的照片变的与众不同</strong>。</p>
<p><img src="https://pic2.zhimg.com/v2-22c0ce4a3965d372445b1af9f364720d_b.jpg" alt="img"></p>
<p>佳能5D4+24 70 2.8L，客户的拍摄，青海茶卡盐湖</p>
<p>例如这张照片，如果从构图上说，他就是一个很普通的居中构图，但是因为加入了多重曝光的创意配合夕阳时的美丽景色，让照片变的不那么普通。</p>
<p><img src="https://pic4.zhimg.com/v2-bc609a0d431d430d607c4fe65e86b7f3_b.jpg" alt="img"></p>
<p>佳能5D4+24 70 2.8L ，来自我的广州面授摄影教学课程</p>
<p><img src="https://pic4.zhimg.com/v2-8537eddd6a8ac347b287c858661e4247_b.jpg" alt="img"></p>
<p>这是一张三分之一构图的照片,人物位于照片中的三分之一的位置，虽然只是简单的坐在那里，但是因为<strong>人物视线的方向与光线的互动</strong>，给阅读这张照片的读者做出了读图的引导，也是因为这样简单的互动，让照片有了氛围感。</p>
<p><img src="https://pic1.zhimg.com/v2-ac0ed4d69b7c1b8fe37ebb729c96f5c4_b.jpg" alt="img"></p>
<p>佳能胶片机EOS1V+2470 2.8L+portra400 拍摄于香港</p>
<p><img src="https://pic4.zhimg.com/v2-53160f3e08573c69bb18a77b51e49e7f_b.jpg" alt="img"></p>
<p>佳能5D4+24 70 2.8L ，来自我的广州面授摄影教学课程</p>
<p>而这两张照片人物也是所处于三分之一的位置，通过线条的延伸感和画面中其他的色块，来让画面变的平衡。</p>
<p>我在拍摄当中，极少出现那类地平线歪歪斜斜的画面，<strong>多数都是这类四平八稳的构图方式。</strong>但是就像给大家展示的思路那样，我喜欢用画面中其他的元素，让这类构图简单的画面，变得不那么普通。</p>
<p>虽然看似基础，但可以变化的思路真的是超级多，构图的其他思路就真的太多了，什么框式构图，什么线条，什么构图中的三角形，但觉得你不妨先把最基本的做到最好，我总会和学生们墨迹一句话:对于摄影师来说，好的拍摄习惯一旦养成以后，就会像吃饭，睡觉一样变成你的一种习惯，好的构图习惯和用光方式也是一样可以成为这样的习惯。</p>
<p>其实我自己现在在拍照的时候很多都是习惯性的就那样去拍摄了，拍摄的当时并没有刻意 的去烧脑纠结什么构图之类的，希望这个思路可以对大家有点启发。</p>
<h2 id="2-引导模特"><a href="#2-引导模特" class="headerlink" title="2. 引导模特"></a><strong>2. 引导模特</strong></h2><p>人像拍摄中，如何沟通引导被拍摄的人，拍出自然的感觉呢？</p>
<p>关于引导的思路很多摄影师都是不一样的，我今天就和大家说一下最简单的方法，这个引导的思路也有很多摄影师都提到过。可能你们都听腻了，我管这类方法称为<strong>《代入法》</strong>。</p>
<p>有些同学一听这个名字就能猜到个七七八八，有些同学听到这个名词的时候一脸懵逼。我举个例子，很多同学都关心的，怎么把女孩拍得好看拍得自然。我觉得当你以男朋友的视角去代入自己的角色，那时想到的画面都不会很做作，尝试脑补女孩子和男朋友互动的画面感，然后去做引导多数都会比较自然。</p>
<p><img src="https://pic1.zhimg.com/v2-86306b8ffa8d7a6ca4d23f13c114d410_b.jpg" alt="img"></p>
<p>佳能5D4+24 70 2.8L ，来自我的广州面授摄影教学课程</p>
<p><img src="https://pic4.zhimg.com/v2-d3c9dfb4326bfcfdf3ba868b9d47c10f_b.jpg" alt="img"></p>
<p>佳能5D4+24 70 2.8L ，来自我的广州面授摄影教学课程</p>
<p><img src="https://pic3.zhimg.com/v2-f41d6a3d8c2d0b29d8bd21bab7b66592_b.jpg" alt="img"></p>
<p>佳能5D4+24 70 2.8L ，来自我的广州面授摄影教学课程</p>
<p><img src="https://pic4.zhimg.com/v2-4c00007666f61d07cb2637cad08324df_b.jpg" alt="img"></p>
<p>佳能5D4+24 70 2.8L ，来自我的广州面授摄影教学课程</p>
<p>我比较喜欢拍外景的环境人像，觉得那样会有更多的元素可以互动，这套照片是我在给报名面授课程的同学们，上课时所拍摄的。那次也是第一次尝试室内生活感的主题，我当时设计主题时的思路就是想拍那种假日和女朋友腻在家里的感觉，在拍摄之前就事先通过民宿的照片，观看到场地的情况，<strong>脑补了很多情侣之间可能会发生的场景</strong>。</p>
<p>例如周末赖床，男朋友给女朋友做早餐，女朋友在衣柜中淘气的画面等，虽然不像严谨的商业摄影那种会写成ppt的格式，但<strong>每个场景也都是自己脑补带入过的</strong>。只有这样，你到了拍摄场地，才能用语言把你想要的感觉比较清晰的告诉给模特，当语言不能清晰传达的时候，我甚至会直接在那个位置做一个我脑海中动作，我很多面授同学我看到过这一幕都……</p>
<p>我猜，看这篇文章的朋友，肯定有好多，在拍摄面对模特，连自己想要的感觉都用语言说不清楚的吧? 你要想一下，<strong>你自己都说不出来的东西怎么指望模特可以很好的理解呢</strong></p>
<p><img src="https://pic1.zhimg.com/v2-2288251b24c93aff73d5346c1bf76408_b.jpg" alt="img"></p>
<p>佳能5D4+24 70 2.8L ，拍摄于香港</p>
<p>这张照片在拍摄的时候，我很简单的和小青说: 闭上眼睛，感觉阳光照在脸上很舒服的感觉。其实很多的时候，你脑中有了画面感，再用语言表达，就是一件很简单的事情了。</p>
<p><img src="https://pic1.zhimg.com/v2-336f690b0ae39d568a7c5eedf77c0d5c_b.jpg" alt="img"></p>
<p>佳能5D4+24 70 2.8L ，拍摄于斯里兰卡</p>
<p>这张照片，是我和朋友一起在斯里兰卡旅行的时候拍摄的，当时是暴风雨的前夕，乌云就是那么恐怖的，其实当时的引导很简单，我当时告诉楠楠：你感觉远方的云在和你说话，你把手放在耳边闭上眼睛在安静的听他和你说话。实际上当时乌云密布老恐怖了……你明白自己想要的画面，就可以做出轻松的引导。</p>
<p><img src="https://pic2.zhimg.com/v2-e6283ef36ab4884c9ad17f94fa2e4a15_b.jpg" alt="img"></p>
<p>佳能5D4+24 70 2.8L ，拍摄于大理</p>
<p>这是我帮朋友在云南大理拍摄的全家福，引导的时候，我和圆圆（孩子的妈妈）说，你和女儿商量一句话，然后你们一起在老公的耳边用手挡住感觉要说悄悄话，当时母女俩说的好像是：爸爸是大坏蛋。然后老公很自然地就笑了，<strong>因为预估到会有很多真实感的画面，所以这张照片拍摄的时候，我是开连拍模式拍摄的</strong>。</p>
<p><img src="https://pic1.zhimg.com/v2-03a838da35a3bdbace9e4b8ba4f50154_b.jpg" alt="img"></p>
<p>佳能5D4+24 70 2.8L ，拍摄于大理</p>
<p>这张在拍摄的时候，我让他们夫妻俩紧紧的亲孩子的脸颊，小宝贝的脸肉嘟嘟的被爸爸妈妈的嘴挤住，一笑自然就是这样的小表情了。</p>
<p>另外作为一位也是从萌新小白走过来的摄影师说句心里话，<strong>你闷头在家里就算是看过1万位顶级大咖的经验分享，都不如自己去认真的策划拍个10场</strong>，别看我和你说的好像很简单 ，你也感觉是理解了，但是自己上手去做也还是需要很多临场经验的，所以，别懒别仅仅是看纸上谈兵，动起来多去实现你心中的想法，引导的经验都是这样越来越丰富的。</p>
<h2 id="3-天气"><a href="#3-天气" class="headerlink" title="3. 天气"></a><strong>3. 天气</strong></h2><p>如何在各种不同天气情况下，无论光线是否完美，都可以很好的完成拍摄呢？</p>
<p>我到现在好像就只有下雪天没拍过了，面对各种各样的天气我也算是见过世面了，昨天和前天还在济州岛一边拍摄一边被风吹雨打。</p>
<p>我们一步一步来说，首先是阳光晴好的日子，一般在日照正常的地区，如果拍摄的时间你可以控制，我比较建议上午选择10点30-11点之前的时间进行室外部分的拍摄，下午选择三点半左右到日落结束的时间，因为<strong>这些时间段的阳光没有那么强烈</strong>，相机的宽容度你前期控制一下都没有太大问题的。</p>
<p>晴天的日子室内就不必说了，都不会有太大的影响，但是如果你是想玩光影创意的话，例如这样：</p>
<p><img src="https://pic4.zhimg.com/v2-fa4c546c8023df7f71ea65422b0c57f3_b.jpg" alt="img"></p>
<p>佳能5D4+24 70 2.8L ，拍摄于深圳</p>
<p><img src="https://pic3.zhimg.com/v2-c5b7a87b3eba8635559e9f90651de69e_b.jpg" alt="img"></p>
<p>佳能5D4+24 70 2.8L ，拍摄于深圳</p>
<p>这类的室内光影创意就比较建议参考刚才所说的室外拍摄时间段了，也是因为光线会比较好控制。</p>
<p>然后我们说说<strong>阴天</strong>的时候，阴天的时候，我的建议是多找顺光的位置去进行拍摄，虽然阴天没有直射光，但是你找到顺光的位置面部的光线质感应该也都不会很差，例如这几张照片我就是狂风暴雨前后拍摄的。</p>
<p><img src="https://pic4.zhimg.com/v2-cf139d2453fbe1d42efc103416f9ebaf_b.jpg" alt="img"></p>
<p>佳能5D4+24 70 2.8L ，拍摄于我的香港摄影面授课程</p>
<p><img src="https://pic2.zhimg.com/v2-c0e2a470097f32a76c6104565f3a5385_b.jpg" alt="img"></p>
<p>佳能5D4+24 70 2.8L ，拍摄于我的香港摄影面授课程</p>
<p>大家可以看到，天空阴的云都完全没有层次了，面部的光感还是可以拍到和打了闪光灯一样的效果，虽然有些许的后期辅助，但是前期的拍摄至关重要，<strong>这就是在阴天顺光拍摄的一个思路</strong>，希望对大家有些许的帮助。</p>
<p>另外关于白平衡，我都是<strong>自动白平衡</strong>的，现在相机的电子化程度我觉得白平衡是可以信任的，我自己使用的是一台佳能5D4相机。就算是自动白平衡有些许的偏差，我们在LR里面都是可以很轻松的去做白平衡统一。</p>
<h2 id="4-策划思路"><a href="#4-策划思路" class="headerlink" title="4. 策划思路"></a><strong>4. 策划思路</strong></h2><p>下面我们说一下：关于一次人像拍摄的策划思路。这个问题我用之前拍摄的一套作品作为案例，<strong>真实的还原一下我当时策划的情况</strong>。这样分析案例，应该比生硬地和大家说道理效果会更好。</p>
<p><img src="https://pic4.zhimg.com/v2-88f39d4aebcd212e765d8b8329db5527_b.jpg" alt="img"></p>
<p>佳能5D4+24 70 2.8L</p>
<p>就是这组照片，听课的同学应该有很多都会去图虫看片的吧，这组在图虫挺受欢迎的，之前报名京东的摄影比赛，还得了最受欢迎作品奖，最受欢迎作品完全是看网友人气来评选的。</p>
<p>我在拍摄的初期是在手机浏览民宿的时候看到了一家位于深圳很有感觉的场地，当时看到的场景是这样的：</p>
<p><img src="https://pic2.zhimg.com/v2-41831df41c26f9b93570e7154849c815_b.jpg" alt="img"></p>
<p><img src="https://pic1.zhimg.com/v2-24761009ccaf3d0f978adfc268021578_b.jpg" alt="img"></p>
<p><img src="https://pic1.zhimg.com/v2-d8cdc211b7c01d6324d3e98eb56c40ec_b.jpg" alt="img"></p>
<p><img src="https://pic4.zhimg.com/v2-28fa4d3bf39e06c5e007912570b42723_b.jpg" alt="img"></p>
<p>那段时间广州的天气如果没有空调真的是痛不欲生，所以我对室内的拍摄特别的感兴趣。看到这么干净的场景，脑子里立刻就有了这样的色彩组合。</p>
<p><img src="https://pic1.zhimg.com/v2-ce6386cf00619092ff0e6fd805518d4c_b.jpg" alt="img"></p>
<p>我可能是因为有了一些拍摄的经验，所以面对这类很干净的拍摄场地很快就可以找到服装和环境色搭配的感觉，如果对这类搭配你们开始找不到感觉的时候，<strong>可以尝试网上找一些配色表</strong>，把环境色往里面套用一下。</p>
<p><img src="https://pic1.zhimg.com/v2-5efabd3e62a884dbc88c72384876d64c_b.jpg" alt="img"></p>
<p>色彩都是有自己的语言的，另外什么颜色搭配在一起也都是有讲究的。刚开始对于没有经验的萌新来说，<strong>巧用配色表是比较有效率有质量的配色解决办法</strong>。我是在自己定下了照片的色彩配比以后购买了一件蓝色的男士衬衣，出片效果来看这样的男朋友款式衬衣效果还蛮不错的。</p>
<p>拍摄的前期准备都到位了，在拍摄当天我也是像前面和同学们说的那样，有代入感地去和模特在拍摄中沟通。这位朋友叫妙妙，我在拍摄之前和妙妙沟通说想拍一套一个女孩周末自己在家，那种没有肉欲的清冷私房，其实拍摄的时候妙妙上下都有穿打底的，但是因为角度控制到位，基本出片的感觉传达到了，基本是这样的：</p>
<p><img src="https://pic4.zhimg.com/v2-ba9e88e0f42c485fde00666ab2b3419f_b.jpg" alt="img"></p>
<p>佳能5D4+24 70 2.8L 拍摄于深圳</p>
<p><img src="https://pic3.zhimg.com/v2-19e34862855e03bec10dbe86ffc3fca2_b.jpg" alt="img"></p>
<p>佳能5D4+24 70 2.8L 拍摄于深圳</p>
<p><img src="https://pic4.zhimg.com/v2-7a3a9620aad6c2859c2632f3bb0d8037_b.jpg" alt="img"></p>
<p>佳能5D4+24 70 2.8L 拍摄于深圳</p>
<p><img src="https://pic3.zhimg.com/v2-5fb3fad81b506037a590cf5e3d1b842e_b.jpg" alt="img"></p>
<p>佳能5D4+24 70 2.8L 拍摄于深圳</p>
<p>顺便一提中间还有小插曲，我们拍着拍着老板的狗来巡场了。被我顺手抓来入境，然后效果还不错，所以拍摄的时候也要多随机应变。说道这里，大家应该明白了，一次有质量的拍摄：踩点，适合场景的选择，服装和场景色彩的搭配，以及模特的引导都是同样重要的。</p>
<h2 id="5-皮肤如何后期"><a href="#5-皮肤如何后期" class="headerlink" title="5. 皮肤如何后期"></a><strong>5.</strong> <strong>皮肤如何后期</strong></h2><p>关于通透的问题我给大家看一张原片：</p>
<p><img src="https://pic3.zhimg.com/v2-2dd8f9327c6eeabc99c71bbb78f677f2_b.jpg" alt="img"></p>
<p>佳能5D4+24 70 2.8L 拍摄于我在广州的摄影面授课程</p>
<p>这是一张只有曝光度调整的原片，我是想和大家说一个道理。很多同学有误区，觉得照片舒服都是靠后期的。<strong>实际前期的拍摄非常的重要</strong>，后期是实现前期想法的辅助工具，关于皮肤处理的部分这个真的就不是一小时能说完的问题了。</p>
<p>（悄悄告诉大家，<strong>我和AIRPHOTO最近合作了一期人像修肤的课程</strong>，对这块感兴趣的小伙伴，可以查看<a href="https://link.zhihu.com/?target=http://mp.weixin.qq.com/s/ctrX1btn0hyAlxJH8l0taA">这么好的皮肤质感，为什么不是我修的？！</a>报名哦）</p>
<p><img src="https://pic4.zhimg.com/v2-2abd7b92c13de7e924ca21c185bec6cf_b.jpg" alt="img"></p>
<h2 id="6-如何约漂亮女生"><a href="#6-如何约漂亮女生" class="headerlink" title="6. 如何约漂亮女生"></a><strong>6.</strong> <strong>如何约漂亮女生</strong></h2><p>其实我想说，我刚才以上说的几个问题，分享的经验思路。你全都很好地做到了，就可以轻松的靠实力约到好看的妹子当模特了。这个是最实在的大实话，其他的撩妹技巧都是浮云。</p>
<p><img src="https://pic2.zhimg.com/v2-75e7224167ed9416b3dd39b659a9b071_b.jpg" alt="img"></p>
<h3 id="转载自：-https-zhuanlan-zhihu-com-p-30879193"><a href="#转载自：-https-zhuanlan-zhihu-com-p-30879193" class="headerlink" title="转载自： https://zhuanlan.zhihu.com/p/30879193"></a>转载自： <a href="https://zhuanlan.zhihu.com/p/30879193">https://zhuanlan.zhihu.com/p/30879193</a></h3>]]></content>
      <categories>
        <category>摄影</category>
      </categories>
      <tags>
        <tag>人像</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库常用指令</title>
    <url>/2021/07/22/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="mysql-sql常用语句大全"><a href="#mysql-sql常用语句大全" class="headerlink" title="mysql sql常用语句大全"></a><a href="https://blog.csdn.net/hzw6991/article/details/87757426?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162514485316780264064821%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=162514485316780264064821&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-2-87757426.pc_v2_rank_blog_default&utm_term=%E6%95%B0%E6%8D%AE%E5%BA%93&spm=1018.2226.3001.4450">mysql sql常用语句大全</a></h1><h3 id="一-、常用操作数据库的命令"><a href="#一-、常用操作数据库的命令" class="headerlink" title="一 、常用操作数据库的命令"></a>一 、常用操作数据库的命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.show databases; 查看所有的数据库</span><br><span class="line">2.create database test; 创建一个叫test的数据库</span><br><span class="line">3.drop database test;删除一个叫test的数据库</span><br><span class="line">4.use test;选中库 ,在建表之前必须要选择数据库</span><br><span class="line">5.show tables; 在选中的数据库之中查看所有的表</span><br><span class="line">6.create table 表名 (字段1 类型, 字段2 类型);</span><br><span class="line">7.desc 表名;查看所在的表的字段</span><br><span class="line">8.drop table 表名; 删除表</span><br><span class="line">9.show create database 库名;查看创建库的详细信息</span><br><span class="line">10.show create table 表名; 查看创建表的详细信息</span><br></pre></td></tr></table></figure>

<h3 id="二、修改表的命令"><a href="#二、修改表的命令" class="headerlink" title="二、修改表的命令"></a>二、修改表的命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.修改字段类型 alter table 表名 modify 字段 字段类型;</span><br><span class="line">2.添加新的字段 alter table 表名 add 字段 字段类型</span><br><span class="line">3.添加字段并指定位置  alter table 表名 add 字段 字段类型   after 字段;</span><br><span class="line">4.删除表字段  alter table 表名 drop 字段名;</span><br><span class="line">5.修改指定的字段  alter table 表名 change 原字段名字  新的字段名字 字段类型</span><br></pre></td></tr></table></figure>

<h3 id="三、对数据的操作"><a href="#三、对数据的操作" class="headerlink" title="三、对数据的操作"></a>三、对数据的操作</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.增加数据(insert)3种方式</span><br><span class="line">    1.1 insert into 表名 values(值1，值2，...)(很少用)</span><br><span class="line">    1.2 insert into 表名(字段1，字段2...) values(值1，值2，....);（较常用）</span><br><span class="line">    1.3 insert into 表名(字段1，字段2...) values(值1，值2，....)，(值1，值2，....)，(值1，值2，....);</span><br><span class="line">2.删除数据(delete) delete from 表名 where 条件 注意：where 条件必须加，否则数据会被全部删除</span><br><span class="line">3.更新数据(update)  update 表名 set字段1 = 值1, 字段2 = 值2 where 条件</span><br><span class="line">4.查询数据(select)</span><br><span class="line">    4.1 查询表中的所有数据   select * from 表名</span><br><span class="line">    4.2 指定数据查询    select 字段 from 表名 </span><br><span class="line">    根据条件查询出来的数据  select 字段 from 表名 where 条件 (最常用的)</span><br><span class="line">    where 条件后面跟的条件</span><br><span class="line">     关系：&gt;,&lt;,&gt;=,&lt;=,!=  </span><br><span class="line">     逻辑：or, and </span><br><span class="line">     区间：id between 4 and 6 ;闭区间，包含边界</span><br><span class="line">5.排序</span><br><span class="line">select 字段 from 表 order by 字段  排序关键词(desc | asc)</span><br><span class="line">排序关键词 desc 降序 asc 升序(默认)</span><br><span class="line">    5.1 通过字段来排序</span><br><span class="line">    例如 ：select * from star orser by money desc, age asc;   </span><br><span class="line">    5.2 多字段排序</span><br><span class="line">    select 字段 from 表 order by 字段1  desc |asc,...字段n desc| asc;</span><br><span class="line">6.常用的统计函数 sum，avg，count，max,min</span><br><span class="line">    只分组:select * from 表 group by 字段</span><br><span class="line">    例子: select count(sex) as re,sex from star group by sex having re &gt; 3;</span><br><span class="line">    分组统计: select count(sex) from star group by sex;</span><br><span class="line">7.分组 select * from 表名  limit 偏移量,数量</span><br><span class="line">    说明:</span><br><span class="line">        8.1.不写偏移量的话就是默认的为0</span><br><span class="line">        8.2.实现分页的时候必须写偏移量</span><br><span class="line">        偏移量怎么计算？:</span><br><span class="line">        limit (n-1)*数量 ,数量 </span><br></pre></td></tr></table></figure>

<h3 id="四、多表联合查询"><a href="#四、多表联合查询" class="headerlink" title="四、多表联合查询"></a>四、多表联合查询</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.内连接</span><br><span class="line">隐式内连接 select username,name from user,goods where user,gid=gods,gid;</span><br><span class="line">显示内连接</span><br><span class="line">select username,from user inner join goods on user.gid=goods.gid;</span><br><span class="line">select * from user left join goods on user.gid=goods.gid;</span><br><span class="line">2.外链接</span><br><span class="line">左连接 包含所有的左边表中的记录以及右边表中没有和他匹配的记录</span><br><span class="line">右连接 </span><br><span class="line">select * from user where gid in(select gid from goods);</span><br><span class="line">select * from user right jOin goods on user.gid=goods.gid;</span><br><span class="line">子嵌套查询</span><br><span class="line">数据联合查询</span><br><span class="line">select * from user left join goods on user.gid=goods.gid union select * from user right join goods on user.gid=goods.gid;</span><br><span class="line">两个表同时更新</span><br><span class="line">update user u, goods g set u.gid=12,g.price=1 where u.id=2 and u.gid=g.gid;</span><br></pre></td></tr></table></figure>

<h3 id="五、DCL-数据控制语言"><a href="#五、DCL-数据控制语言" class="headerlink" title="五、DCL 数据控制语言"></a>五、DCL 数据控制语言</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.创建用户:create user&#x27;xiaoming&#x27;@&#x27;localhost&#x27; identified by &#x27;666666&#x27;;</span><br><span class="line">2.授权用户:grant all on test.*to&#x27;xiaoming&#x27;@&#x27;localhost&#x27;;</span><br><span class="line">3.刷新权限:flush privileges;</span><br><span class="line">4.取消授权:revoke all on test.* from &#x27;xiaoming&#x27;@&#x27;localhost&#x27;;</span><br><span class="line">5.删除用户: drop user&#x27;xiaoming&#x27;@&#x27;localhost&#x27;;</span><br></pre></td></tr></table></figure>

<h3 id="六、DTL-数据事务语言"><a href="#六、DTL-数据事务语言" class="headerlink" title="六、DTL 数据事务语言"></a>六、DTL 数据事务语言</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">开启事务：set autocommit=0;</span><br><span class="line">操作回滚：rollback;</span><br><span class="line">提交事务：commit;</span><br></pre></td></tr></table></figure>

<p>转自：<a href="https://blog.csdn.net/hzw6991/article/details/87757426?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162514485316780264064821%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=162514485316780264064821&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-2-87757426.pc_v2_rank_blog_default&amp;utm_term=%E6%95%B0%E6%8D%AE%E5%BA%93&amp;spm=1018.2226.3001.4450">https://blog.csdn.net/hzw6991/article/details/87757426?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162514485316780264064821%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=162514485316780264064821&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-2-87757426.pc_v2_rank_blog_default&amp;utm_term=%E6%95%B0%E6%8D%AE%E5%BA%93&amp;spm=1018.2226.3001.4450</a></p>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>比特币和区块链</title>
    <url>/2021/05/24/%E6%AF%94%E7%89%B9%E5%B8%81%E5%92%8C%E5%8C%BA%E5%9D%97%E9%93%BE/</url>
    <content><![CDATA[<h3 id="一：比特币：数字货币"><a href="#一：比特币：数字货币" class="headerlink" title="一：比特币：数字货币"></a>一：比特币：数字货币</h3><p><img src="https://pic.imgdb.cn/item/607a6b148322e6675c121da4.png" alt="image-123"></p>
<ul>
<li>2008年11月1日 中本聪《白皮书》</li>
<li>去中心化的电子<strong>记账</strong>系统<ul>
<li>现在的中心化是谁的：银行，谁谁谁用了多少钱，还剩多少钱*</li>
<li>很多条交易记录进行打包连接成一个区块，区块再连接起来，成为区块链</li>
<li>三个问题<ul>
<li>以谁为准</li>
<li>为何记账</li>
<li>如何防伪</li>
</ul>
</li>
<li>记账奖励<ul>
<li>手续费</li>
<li>打包奖励<ul>
<li>每10分钟打一个包，最开始会奖励打包者50个比特币，过了4年之后奖励25个比特币……</li>
<li>一共有多少个比特币<ul>
<li>50x6x24x365x4x(1+1/2+1/2*1/2+….)=2100万</li>
</ul>
</li>
</ul>
</li>
<li>以谁为准<ul>
<li>工作量证明（挖矿）：每一个参与的用户都要做一个很难的数学题，这个数学题没有一个人能够通过脑子把它算出来，我们必须一个一个去试，只有你把它尝试出来了才能获得这个奖励，这个过程称之为挖矿。</li>
<li>挖矿原理<ul>
<li>哈希函数：<ul>
<li>我们能够把一个字符串通过一定的运算转换为摘要的形式</li>
<li>正着算容易反着算难</li>
<li>sha256（美国国家安全局发明的一种算法）<ul>
<li>比如输入“Apple”输出一个256位的二进制数</li>
</ul>
</li>
</ul>
</li>
<li>原理<ul>
<li>字符串：前块头部+账单信息+时间戳+随机数<ul>
<li>改变这个随机数不断去试</li>
</ul>
</li>
<li>hash=sha256（sha256（字符串））</li>
<li>前n位必须为0</li>
<li>如果你算对了，你就有资格去打包，就可以把你的哈希值作为新块的头部打一个包，再把这个包接到区块链的后面去。（每个块有头部+信息）</li>
</ul>
</li>
<li>难度n的确定</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>参考资料：<a href="https://www.youtube.com/watch?v=g_fSistU3MQ">比特币和区块链啥原理？矿机挖矿咋回事？李永乐老师讲比特币(1)</a></p>
]]></content>
      <categories>
        <category>科普</category>
      </categories>
      <tags>
        <tag>科普</tag>
      </tags>
  </entry>
  <entry>
    <title>添加git快捷方式</title>
    <url>/2021/12/26/%E6%B7%BB%E5%8A%A0git%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="Git-右键添加Git-Bash"><a href="#Git-右键添加Git-Bash" class="headerlink" title="Git 右键添加Git Bash"></a>Git 右键添加Git Bash</h2><ol>
<li><strong>win + r</strong></li>
<li><strong>输入regedit</strong></li>
<li><strong>进入 计算机\HKEY_CLASSES_ROOT\Directory\Background\shell</strong></li>
<li><strong>新建如下的项 git bash 和 command</strong></li>
</ol>
<p><img src="https://pic.imgdb.cn/item/61c867322ab3f51d91d28270.jpg" alt="img"></p>
<ol start="5">
<li><strong>在git bash 中添加字符串值 Icon ，数值位于git 安装目录下\Git\mingw64\share\git\git-for-windows.ico</strong><img src="https://pic.imgdb.cn/item/61c8674a2ab3f51d91d289b4.jpg" alt="img"></li>
<li><strong>在command 中添加运行的命令，修改默认的数值 \Git\git-bash.exe</strong><img src="https://pic.imgdb.cn/item/61c867662ab3f51d91d2ac8f.jpg" alt="img"></li>
</ol>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><ul>
<li><a href="https://www.cnblogs.com/mythdoraemon/p/9865567.html">Git 右键添加Git Bash</a></li>
</ul>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>移动通讯技术</title>
    <url>/2021/05/24/%E7%A7%BB%E5%8A%A8%E9%80%9A%E8%AE%AF%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<h3 id="移动通讯技术"><a href="#移动通讯技术" class="headerlink" title="移动通讯技术"></a><a href="https://www.cnblogs.com/SssuperBear/p/14670473.html">移动通讯技术</a></h3><p><img src="https://img.imgdb.cn/item/607a6b0c8322e6675c1209ff.png" alt="image-20210107123834018"></p>
<h4 id="一：移动通讯技术"><a href="#一：移动通讯技术" class="headerlink" title="一：移动通讯技术"></a>一：移动通讯技术</h4><ul>
<li><p>1G：移动蜂窝技术 </p>
<ul>
<li>传输的是模拟信号，只能传输语音不能传输文字，保密性很差，而且通话质量也不好</li>
</ul>
<p><img src="https://img.imgdb.cn/item/607a6b0c8322e6675c120a06.png" alt="image-20210107124105969"></p>
</li>
<li><p>2G：数字信号</p>
<ul>
<li>一段语音，进行采样，转换为数字，再转换为二进制码传输</li>
<li>这样既能传输语音也能传输文字还能进行加密</li>
</ul>
</li>
<li><p>3G：CDMA（码分多址）</p>
</li>
<li><p>4G：OFDMA（正交频分多址）</p>
<p><img src="https://img.imgdb.cn/item/607a6b0c8322e6675c120a0f.png" alt="image-20210107124612998"></p>
<ul>
<li>他可以在同一个频段内传输很多个信号。信号彼此是正交的，一个信号最强的时候其他信号为0。这样一来，虽然他们都在一个频段内却不会彼此干扰。</li>
</ul>
</li>
</ul>
<h4 id="二：5G-5G毫米波"><a href="#二：5G-5G毫米波" class="headerlink" title="二：5G/5G毫米波"></a>二：5G/5G毫米波</h4><ul>
<li>高速率<ul>
<li>4G 5G速率对比<ul>
<li>4G：100Mbps（大约是10M字节每秒）</li>
<li>5G：2Gbps</li>
</ul>
</li>
<li>香农公式  C=Wlog2（1+S/N）<ul>
<li>C：速率极限（再怎么编码都超不过这个速率）</li>
<li>W：频带宽度（1Ghz-2Ghz的频率那么频宽就有1Ghz）</li>
<li>S：信号功率</li>
<li>N：噪声功率</li>
</ul>
</li>
<li>4G频段<ul>
<li>中国移动885M-909Mhz（24Mhz带宽） 930M-954Mhz（24Mhz带宽）</li>
</ul>
</li>
<li>5G频段<ul>
<li>6Ghz以下（sub6 5G）<ul>
<li>大概是5倍的4G</li>
<li>中国移动拿到两个5G频段<ul>
<li>2515M-2575M（160M带宽）</li>
<li>4800M-4900M（100M带宽）</li>
</ul>
</li>
</ul>
</li>
<li>24Ghz以上（毫米波5G）（24-100Ghz）<ul>
<li>大概是4倍的sub6 5G</li>
</ul>
</li>
<li>VR眼镜带的时间长了会头晕？<ul>
<li>视频不够高清</li>
<li>延迟比较严重</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>低延迟<ul>
<li>4G：10ms-100ms</li>
<li>5G-sub6：1ms</li>
<li>5G-毫米波：0.1ms</li>
<li>工业、远程医疗</li>
</ul>
</li>
<li>大容量<ul>
<li>4G：2000个/平方公里</li>
<li>5G：100万个/平方公里</li>
<li>万物互联</li>
</ul>
</li>
</ul>
<h3 id="三毫米波5G挑战"><a href="#三毫米波5G挑战" class="headerlink" title="三毫米波5G挑战"></a>三毫米波5G挑战</h3><ul>
<li><p>频率高、衰减快、覆盖范围小</p>
</li>
<li><p>波长短、衍射差（播不能绕过障碍物）、易于遮挡</p>
</li>
<li><p>解决方案</p>
<ul>
<li><p>波束赋形</p>
<ul>
<li>好几根天线，彼此之间相位不同，发生干涉，结果导致向一个方向发射比较强的电磁波</li>
</ul>
<p><img src="https://img.imgdb.cn/item/607a6b0c8322e6675c120a18.png" alt="image-20210107130727862"></p>
</li>
<li><p>波束追踪</p>
<p><img src="https://img.imgdb.cn/item/607a6b148322e6675c121d9d.png" alt="image-20210107130937454"></p>
<ul>
<li>走哪跟到哪</li>
</ul>
</li>
<li><p>波束反射</p>
<ul>
<li>通过墙的反射</li>
</ul>
</li>
<li><p>波束切换</p>
<ul>
<li>手机在多个基站之间进行切换</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>参考文献：<a href="https://www.youtube.com/watch?v=VdSFah46d7Y">5G到底是什么？它能成为创造未来的新科技吗？</a></p>
]]></content>
      <categories>
        <category>科普</category>
      </categories>
      <tags>
        <tag>科普</tag>
      </tags>
  </entry>
  <entry>
    <title>经验模态分解</title>
    <url>/2021/12/24/%E7%BB%8F%E9%AA%8C%E6%A8%A1%E6%80%81%E5%88%86%E8%A7%A3%EF%BC%88EMD%EF%BC%89/</url>
    <content><![CDATA[<h3 id="经验模态分解"><a href="#经验模态分解" class="headerlink" title="经验模态分解"></a>经验模态分解</h3><p>经验模态分解(Empirical Mode Decomposition, EMD)是依据数据自身的时间尺度特征来进行信号分解，无需预先设定任何基函数，是一种时频域信号处理方式。<code>EMD</code>在处理非平稳及非线性数据上具有明显的优势，<strong>适合分析非线性非平稳的信号序列</strong>，具有较高的信噪比。<br><strong>平稳信号</strong>：分布参数（均值，方差，协方差等）或者分布规律随着时间不发生变化<br><strong>非平稳信号</strong>：分布参数（均值，方差，协方差等）或者分布规律随着时间发生变化</p>
<p>该方法的关键是经验模式分解，使负载信号分解为有限个本征信号（Intrinsic Mode Function, IMF），分解出来的各个 <code>IMF</code>分量包含了原信号的不同时间尺度的局部特征信息。通俗理解就是，<code>EMD</code>是一台机器，将一对混杂的硬币投进去，其会自动按照1元、5毛、1毛、5分、1分分好。</p>
<h4 id="EMD原理"><a href="#EMD原理" class="headerlink" title="EMD原理"></a>EMD原理</h4><p>在物理上，如果瞬时频率有意义，那么函数必须是对称的，局部均值为零，并且具有相同的过零点和极值点数目。任何信号都是由若干本征模函数组成，一个<strong>本征模函数必须满足以下两个条件：</strong></p>
<ul>
<li>函数在整个时间范围内，局部极值点和过零点的数目必须相等或最多相差一个</li>
<li>在任意时刻点，局部最大值的包络（上包络线）和局部最小值的包络（下包络线）平均必须为零，即上下包络线相对于时间轴局部对称</li>
</ul>
<p>画图解释：</p>
<ol>
<li><p>图线要反复跨越x轴</p>
<p><img src="https://pic.imgdb.cn/item/61c5a3092ab3f51d91199fb3.jpg" alt="img"></p>
<center>在整个数据段内，极值点的个数和过零点的个数必须相等或相差最多不能超过一个</center>

<p>而不能像这样某次穿过零点后出现多个极点：</p>
<p><img src="https://pic.imgdb.cn/item/61c5a32f2ab3f51d9119b2fe.jpg" alt="img"></p>
</li>
</ol>
<center>极点数目偏多</center>

<ol start="2">
<li><p>包络线要对称：</p>
<p><img src="https://pic.imgdb.cn/item/61c5a34e2ab3f51d9119c0a4.jpg" alt="img"></p>
<center>包络线对称</center>

<p>而不能像这样：</p>
<p><img src="https://pic.imgdb.cn/item/61c5a36e2ab3f51d9119cad7.jpg" alt="img"></p>
<center>包络线不对称</center></li>
</ol>
<p>对于上述第二条说明：他把经典的全局性要求修改为局部性要求，使瞬时频率不再受不对称波形所形成的不必要的波动所影响，实际上，这个条件应为“数据的局部均值是零”。但是对于非平稳数据来说，计算局部均值涉及到“局部时间尺度”的概念，而这是很难定义的，因此，在第二个条件中使用了局部极大值和局部极小值包络的平均为零来代替，是信号的波形局部对称。</p>
<p><code>EMD</code>将输入信号分解为几个本征模函数和一个残差组成，即由下列公式组成：</p>
<p>$$<br>I ( n ) = \sum _ { m = 1 } ^ { M } \operatorname { I M F _ { m } ( n ) + \operatorname { Res } _{m} ( n ) }<br>$$</p>
<p>其中<em>I</em>(n)表示输入信号，IMF<code>&lt;sub&gt;</code>m<code>&lt;/sub&gt;</code>表示M<code>&lt;sup&gt;</code>th<code>&lt;/sup&gt;</code>的本征模函数，Res<code>&lt;sub&gt;</code>M<code>&lt;/sub&gt;</code>(n)表示残差</p>
<h4 id="EMD分解过程"><a href="#EMD分解过程" class="headerlink" title="EMD分解过程"></a>EMD分解过程</h4><p>提取 <code>IMF</code>的过程称为筛选，筛选的过程如下：</p>
<p><img src="https://pic.imgdb.cn/item/61c5a38a2ab3f51d9119d5b7.jpg" alt="emd分解"></p>
<ol>
<li>标出局部极值点</li>
<li>通过<strong>三次样条插值</strong>（cubic spline line）连接极大值点构成上包络线（upper envelope）,连接极小值点构成下包络线（lower envelope）</li>
<li>求上下包络线的均值m<code>&lt;sub&gt;</code>1<code>&lt;/sub&gt;</code></li>
<li>用输入信号减去上下包络线均值</li>
</ol>
<p>$$<br>X ( t ) - m _ { 1 } = h _ { 1 }<br>$$</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">上述过程的一次迭代不能保证h1是本征模函数（</span><br></pre></td></tr></table></figure>

<p><code>IMF</code>），需要重复上述过程，直到h<code>&lt;sub&gt;</code>1<code>&lt;/sub&gt;</code>是本征模函数（<code>IMF</code>）</p>
<h4 id="停机准则"><a href="#停机准则" class="headerlink" title="停机准则"></a>停机准则</h4><p>停机准则决定了一个本征模函数（<code>IMF</code>）筛选过程执行的数目，有如下停机准则</p>
<ul>
<li><p>标准偏差（Standard Deviation, SD）</p>
<p>$$<br>S D _ { k } = \sum _ { t = 0 } ^ { T } \frac { | h _ { k - 1 } ( t ) - h _ { k } ( t ) |  ^ { 2 } } { h _ { k - 1 } ^ { 2 } (t)}<br>$$</p>
<p>当SD的值小于给定的阈值时，筛选过程停止</p>
</li>
<li><p>S Number准则</p>
<p>定义为过零点和极值点相等或者至多差为1的连续筛选数目。一个S-Number被提前设置，只有当S次连续筛选后，每一次过零点和极值点保持相同（相等或者至多差1），筛选过程才停止</p>
</li>
<li><p>阈值方法</p>
<p>阈值方法设置两个阈值，确保全局小的扰动同时考虑局部大的偏移</p>
</li>
</ul>
<p>选择停机准则后，第一个 <code>IMF</code>（c<code>&lt;sub&gt;</code>1<code>&lt;/sub&gt;</code>）可以获得，c<code>&lt;sub&gt;</code>1<code>&lt;/sub&gt;</code>为包含输入信号最大频率的成分（component）,之后分离c<code>&lt;sub&gt;</code>1<code>&lt;/sub&gt;</code></p>
<p>$$<br>X ( t ) - c _ { 1 } = r _ { 1 }<br>$$</p>
<p>利用r<code>&lt;sub&gt;</code>1<code>&lt;/sub&gt;</code>作为输入，获得其他的本征模函数</p>
<h4 id="EMD限制（Limitations）"><a href="#EMD限制（Limitations）" class="headerlink" title="EMD限制（Limitations）"></a>EMD限制（Limitations）</h4><p><code>EMD</code>的主要缺点有如下</p>
<ul>
<li><p>末端效应</p>
<p>末端效应发生在信号的开始和结尾，因为在信号开始之前和结尾之后没有样本点被考虑。大多数情况下，末端点并不是信号的极值，但是在执行 <code>EMD</code>的过程中，极值包络线会在末端点发散（diverge），导致错误，进而扭曲了 <code>IMF</code>在末端点的波形，而且这种错误在 <code>EMD</code>分解过程中会累积</p>
</li>
<li><p>模态混叠问题</p>
<p>模态混叠问题发上在 <code>EMD</code>的执行过程中。出现下列情况之一就称为模态混合</p>
<ul>
<li>在同一个 <code>IMF</code>分量中，存在尺度分布范围很宽却又各不相同的信号</li>
<li>在不同的 <code>IMF</code>分量中，存在着尺度相近的信号</li>
</ul>
<p>模态混叠问题使得特征提取、模型训练、模式识别变得困难，<code>IMF</code>失去了单一特征尺度的特征。<strong>集成经验模态分解(Ensemble empirical mode decomposition, EEMD)被提出用来解决模态混叠问题</strong></p>
</li>
</ul>
<h4 id="EMD和其他方法对比"><a href="#EMD和其他方法对比" class="headerlink" title="EMD和其他方法对比"></a>EMD和其他方法对比</h4><p><img src="https://pic.imgdb.cn/item/61c5a3a52ab3f51d9119e379.jpg" alt="结果对比"></p>
<h3 id="集成经验模态分解（EEMD）"><a href="#集成经验模态分解（EEMD）" class="headerlink" title="集成经验模态分解（EEMD）"></a>集成经验模态分解（EEMD）</h3><p>为了改善测量的准确性，集成平均是有效的方法（也就是多次测量取平均值）。信号极值点影响 <code>IMF</code>,若分布不均匀时会出现<strong>模态混叠</strong>，白噪声的频谱均匀分布，白噪声是的信号会自动分布到合适的参考尺度上。由于零均值噪声的特性，噪音经过多次的平均计算后会相互抵消，这样集成均值的计算结果与原始信号的差值随着集成平均的次数增加而减少</p>
<h4 id="EEMD的分解"><a href="#EEMD的分解" class="headerlink" title="EEMD的分解"></a>EEMD的分解</h4><ol>
<li>给原始信号添加白噪声序列</li>
<li>分解带有白噪声序列的输入信号，得到 <code>IMFs</code>（第一次测量得到一系列的 <code>IMFs</code>）</li>
<li>重复第一和第二步，每次添加不同的白噪声序列（执行多次测量）</li>
<li>获取相关 <code>IMFs</code>集成的均值作为最后的结果（理解为多次测量取平均）</li>
</ol>
<p>添加的白噪声的两个属性</p>
<ul>
<li>添加的白噪声导致所有时间尺度上机制分布的相对均匀分布（The added white noise leads to relatively even distribution of extrema distribution on all timescales）</li>
<li>通过集成平均，添加的噪声会被移除（噪声的均值为0）</li>
</ul>
<h3 id="EMD-python使用"><a href="#EMD-python使用" class="headerlink" title="EMD python使用"></a>EMD python使用</h3><ul>
<li><p>安装EMD包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install EMD-signal</span><br></pre></td></tr></table></figure></li>
<li><p>测试代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Emd</span>(<span class="params">dataset</span>):</span></span><br><span class="line">    values = dataset[<span class="string">&#x27;request&#x27;</span>].tolist()</span><br><span class="line">    S = np.array(values)</span><br><span class="line">    emd = EMD()</span><br><span class="line">    <span class="comment"># emd.emd(S,max_imf=3)</span></span><br><span class="line">    emd.emd(S)</span><br><span class="line">    imfs, res = emd.get_imfs_and_residue()</span><br><span class="line">    <span class="keyword">return</span> imfs, res</span><br></pre></td></tr></table></figure></li>
</ul>
<!-- <iframe width="560" height="315"
  display:block;
  src="https://player.bilibili.com/player.html?aid=252323893&bvid=BV1WY411W7uj&cid=460097777&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> 
</iframe> -->

<!-- <iframe src="https://player.bilibili.com/player.html?aid=60016166&cid=104514776&page=1&danmaku=0" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe> -->

<!-- <div style="position: relative; padding: 30% 45%;">
<iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="https://player.bilibili.com/player.html?aid=52516662&bvid=BV1o4411E7xW&cid=91907659&page=1&as_wide=1&high_quality=1&danmaku=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe>
</div> -->

<p>参考：</p>
<ul>
<li><a href="https://muyi110.github.io/2019/%E6%B5%85%E8%B0%88%E7%BB%8F%E9%AA%8C%E6%A8%A1%E6%80%81%E5%88%86%E8%A7%A3-EMD/">浅谈经验模态分解-EMD</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/40005057">这篇文章能让你明白经验模态分解（EMD）——基础理论篇</a></li>
</ul>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>信号处理</tag>
      </tags>
  </entry>
  <entry>
    <title>腾讯面经</title>
    <url>/2021/12/24/%E9%9D%A2%E7%BB%8F-%E8%85%BE%E8%AE%AF/</url>
    <content><![CDATA[<p><a href="https://muyi110.github.io/2019/%E8%85%BE%E8%AE%AF%E4%B8%80%E9%9D%A2/">腾讯一面</a>：</p>
<h4 id="进程间的通信方式"><a href="#进程间的通信方式" class="headerlink" title="进程间的通信方式"></a>进程间的通信方式</h4><p>进程间有六种通信方式：</p>
<ol>
<li><strong>管道（pipe）及有名管道（named pipe）</strong>：管道可用于具有亲缘关系的父子进程间的通信，有名管道除了具有管道所具有的功能外，它还允许无亲缘关系进程间的通信</li>
<li><strong>信号（signal）</strong>：信号是在软件层次上对中断机制的一种模拟，它是比较复杂的通信方式，用于通知进程有某事件发生，一个进程收到一个信号与处理器收到一个中断请求效果上可以说是一致的</li>
<li><strong>消息队列（message queue）</strong>：消息队列是消息的链接表，它克服了上两种通信方式中信号量有限的缺点，具有写权限的进程可以按照一定的规则向消息队列中添加新信息；对消息队列有读权限的进程可以从消息队列中读取信息</li>
<li><strong>共享内存（share memory）</strong>：他使得多个进程可以访问同一块内存空间，不同进程可以及时看到对方进程中对共享内存中数据的更新。这种方式需要依靠某种同步操作，如互斥锁和信号量（也就是一个进行在未完成写操作之前，另一个进程不能读取）</li>
<li><strong>信号量（semaphore）</strong>：它是一个计数器，信号量用于实现进程间的互斥与同步，而不是用于存储进程间通信数据（而信号量一般常用于保护一段代码，使其每次只被一个执行线程运行）。对于二值信号量（0-1），信号量大于0时，可以对进程操作，等于0时要等待，知道信号量大于0</li>
<li><strong>套接字（socket）</strong>：一种更为一般的进程通信机制，它可用于网络中不同机器之间的进程间通信，应用非常广泛</li>
</ol>
<h4 id="僵尸进程和孤儿进程"><a href="#僵尸进程和孤儿进程" class="headerlink" title="僵尸进程和孤儿进程"></a>僵尸进程和孤儿进程</h4><p><strong>僵尸进程：</strong>一个父进程利用fork创建子进程，如果子进程退出，而父进程没有利用wait或wait pid来获取子进程的状态信息，那么子进程的状态描述符依然保存在系统中。</p>
<p>在Linux进程的状态中，僵尸进程是非常特殊的一种，它已经放弃了几乎所有内存空间，没有任何可执行代码，也不能被调度，仅仅在进程列表中保留一个位置，记在该进程的退出状态等信息，供其他进程收集，除此之外，僵尸进程需要它的父进程来为它收尸，如果他的父进程没有处理这个僵尸进程的措施，那么它就一直保持僵尸状态，如果这时父进程结束了，那么init进程自动会接手这个子进程，为它收尸，他还是能被清除的。但是如果父进程是进入一个循环，不会结束，那么子进程就会一直保持僵尸状态，这就是为什么系统中有时会很多僵尸进程。</p>
<p><strong>僵尸进程解决</strong></p>
<ul>
<li>调用wait函数，进程一旦调用了wait，就立即阻塞自己，由wait自动分析是否当前进程的某个子进程已经退出，如果让它找到了这样一个已经变成僵尸的子进程，wait就会收集这个子进程的信息，并把它彻底销毁后返回；如果没有找到这样一个子进程，wait就会一直阻塞在这里，知道有一个出现为止</li>
<li>当子进程终止时，内核就会向它的父进程发送一个SIGCHLD信号，当父进程接收到SIGCHLD信号后就应该调用wait或waitpid函数对子进程进行善后处理，释放子进程占用的资源</li>
</ul>
<p><strong>孤儿进程：</strong>一个父进程退出，而它的一个或几个子进程仍然还在运行，那么这些子进程就会变成孤儿进程，孤儿进程将被init进程（进程号为1）所收养，并有init进程对它们完成状态收集的工作</p>
<p>子进程死亡需要父进程来处理，那么意味着正常的进程应该是子进程先于父进程死亡。当父进程先于子进程死亡时，子进程死亡时没父进程处理，这个死亡的子进程就是孤儿进程。但孤儿进程与僵尸进程不同的是，由于父进程已经死亡，系统会帮助父进程回收处理孤儿进程。所以孤儿进程实际上是不占用资源的，因为它终究是被系统回收了。不会向僵尸进程那样占用ID，损害运行系统。</p>
<h4 id="TCP为啥需要三次握手"><a href="#TCP为啥需要三次握手" class="headerlink" title="TCP为啥需要三次握手"></a>TCP为啥需要三次握手</h4><h5 id="三次握手原理"><a href="#三次握手原理" class="headerlink" title="三次握手原理"></a>三次握手原理</h5><p><img src="https://pic.imgdb.cn/item/61c5a2a82ab3f51d91197b15.jpg" alt="这里写图片描述"></p>
<ol>
<li><p>上图的名词解释</p>
<ul>
<li>SYN：同步序号。<strong>它表示建立连接</strong>。TCP规定SYN=1时不能携带数据，但要消耗一个序号，因此随机选取一个序列号为seq=x数据包（该数据包里就是一个标记seq，并没有任何有效的数据）</li>
<li>ACK：确认序号。<strong>它表示响应</strong>（都能响应了 那肯定上一步就连接成功了啊，所以说ACK=1代表确认连接成功啦）</li>
</ul>
<p>因此<strong>SYN和ACK同时为1，表示建立连接之后的响应</strong>；而只是<strong>单个的SYN=1，表示的只是建立连接。</strong></p>
<ul>
<li>seq：（sequence number）序列号。他是发送端数据包的初始序列号。<strong>seq=x表示发送端数据包的初始序号为x</strong>（seq=0就代表这是第0号帧）</li>
<li>ack：（acknowledge number）确认号。它是对这次收到数据包的确认，以及对下次收到数据包的期待。<strong>ack=x+1表示我方到x位置的所有数据都已正确收到，且我方告知对方：我期待你下次给我发送包的初始序号（seq）是x+1。</strong></li>
</ul>
<p>为了方便记忆，可以这么理解：SYN/ACK是TCP协议层面的标记，而seq/ack是数据层面的标记。</p>
</li>
</ol>
<h5 id="TCP三次握手过程："><a href="#TCP三次握手过程：" class="headerlink" title="TCP三次握手过程："></a><strong>TCP三次握手过程：</strong></h5><ol>
<li><strong>首先Client向Server发送连接：SYN=1，seq=x；</strong><ul>
<li><strong>因为</strong>要<strong>建立连接，所以SYN=1</strong>；又<strong>因为</strong>TCP规定SYN=1时不能携带数据，但要消耗一个序号，<strong>所以</strong>Client随机选取一个<strong>初始序号seq=x</strong>。（因为并没有相应动作，所以这里没ACK什么事，我们就认为ACK=0吧）</li>
<li>发送后Client进入syn_sent状态，表示客户端等待服务器的回复</li>
</ul>
</li>
<li><strong>Server收到请求后 再向Client发送确认：SYN=1，ACK=1，seq=y，ack=x+1；</strong><ul>
<li>因为Server建立连接后做出了相应，所以SYN=1，ACK=1.因为TCP规定SYN=1时不能携带数据，但要消耗一个序号，所以Server随机选取一个初始序号seq=y。又因为Server到x为止的所有数据都已正确收到了，且Server告诉Client：我期待你下次给我发送包的初始序号（seq）是x+1，所以ack=x+1。</li>
<li>发送后服务器进入syn_rcvd，表示服务器已经收到Client的连接请求，等待Client的确认。</li>
</ul>
</li>
<li><strong>Client收到确认后还需再次发送确认，同时携带要发送给Server的数据：ACK=1，seq=x+1,ack=y+1;连接建立</strong><ul>
<li><strong>因为</strong>有响应动作，<strong>所以ACK=1</strong>（因为要携带发送的数据，所以这没SYN什么事）。<strong>因为2中s</strong>erver已经告诉了这次它想收到包的初始序列号是x+1，<strong>所以初始序号为seq=x+1</strong>。<strong>又因为</strong>Client到y为止的所有数据都已正确收到了，准备接收序列号为y+1的包，<strong>所以ack=y+1</strong></li>
<li>server收到后，这个TCP连接就进入到Established状态，就可以发起http请求了。</li>
</ul>
</li>
</ol>
<p><strong>形象些：</strong></p>
<ul>
<li><p>第一次握手，由浏览器发起，告诉服务器我要发送请求了</p>
</li>
<li><p>第二次握手，由服务器发起，告诉浏览器我准备接收了，你赶紧发送吧</p>
</li>
<li><p>第三次握手，由浏览器发送，告诉服务器，我马上发了，准备接收吧</p>
<h5 id="为什么需要三次握手，两次不行吗？"><a href="#为什么需要三次握手，两次不行吗？" class="headerlink" title="为什么需要三次握手，两次不行吗？"></a>为什么需要三次握手，两次不行吗？</h5><p>其实这是由TCP的自身特点可靠传输决定的。客户端和服务端要进行可靠传输，那么就需要确认<code>双方</code>的<code>接收和发送能力</code>,不然容易出现丢包的现象</p>
</li>
</ul>
<ul>
<li>第一次握手: 服务端 可以确认<code>客户端</code>具有发送能力</li>
<li>第二次握手: 客户端 可以确认<code>服务端</code>具有接收能力和发送能力</li>
<li>第三次握手: 服务端 可以确认<code>客户端</code>具有接收能力</li>
</ul>
<h5 id="为什么不能改成两次握手？"><a href="#为什么不能改成两次握手？" class="headerlink" title="为什么不能改成两次握手？"></a>为什么不能改成两次握手？</h5><p>如果两次握手，则会出现下面这种情况：</p>
<p>如客户端发出连接请求，但因连接请求报文丢失而未收到确认，于是客户端再重传一次连接请求。后来收到了确认，建立了连接。数据传输完毕后，就释放了连接，客户端共发出了两个连接请求报文段，其中第一个丢失，第二个到达了服务端，但是第一个丢失的报文段只是在某些网络结点长时间滞留了，延误到连接释放以后的某个时间才到达服务端，此时服务端误认为客户端又发出一次新的连接请求，于是就向客户端发出确认报文段，同意建立连接，不采用三次握手，只要服务端发出确认，就建立新的连接了，此时客户端忽略服务端发来的确认，也不发送数据，则服务端一直等待客户端发送数据，浪费资源。</p>
<h5 id="三次握手过程中可以携带数据吗？"><a href="#三次握手过程中可以携带数据吗？" class="headerlink" title="三次握手过程中可以携带数据吗？"></a>三次握手过程中可以携带数据吗？</h5><p>其实第三次握手的时候,是可以携带数据的.但是,第一次,第二次握手不可以携带数据.</p>
<p>为什么这样呢?假如第一次握手可以携带数据的话,如果有人要恶意攻击服务器,那他每次都在第一次握手中的<code>SYN</code>报文中放入大量的数据.因为攻击者根本就不理服务器的接收 发送能力是否正常,然后疯狂重复发<code>SYN</code>报文的话,这会让服务器话费很多时间 内存空间来接收这些报文.</p>
<p>也就是说,第一次握手不可以放数据,其中一个简单的原因就是会让服务器更加容易受到攻击了.而对于第三次的话,此时客户端已经处于<code>ESTAB-LISHED</code>状态。对于客户端来说，他已经建立起连接了，并且也已经知道服务器的接收、发送能力是正常的了，所以能携带数据也没啥毛病。</p>
<h4 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h4><h5 id="static-assert"><a href="#static-assert" class="headerlink" title="static_assert"></a>static_assert</h5><p>static_assert这个关键字，用来做编译期间的断言，因此叫做静态断言。</p>
<p>语法：static_assert(常量表达式，提示字符串)——如果第一个参数常量表达式的值为真（true或者非零值），那么static_assert不做任何事情，就像它不存在一样，否则会产生一条编译错误，错误位置就是该static_assert语句所在行，错误提示就是第二个参数提示字符串。</p>
<p>编译器在遇到一个static_assert语句时，通常立刻将其第一个参数作为常量表达式进行演算，但如果该常量表达式依赖于某些模板参数，则延迟到模板实例化时再进行演算，这就让检查模板参数成为了可能。</p>
<p>static_assert的断言表达式的结果必须是在编译时期可以计算的表达式，即必须是常量表达式。如果使用变量，则会导致错误</p>
<h5 id="write和fwrite"><a href="#write和fwrite" class="headerlink" title="write和fwrite"></a>write和fwrite</h5><p>fwrite：带缓冲区；write：不带缓冲区</p>
<h5 id="程序中1-0是在编译期出错还是在运行的时候出错"><a href="#程序中1-0是在编译期出错还是在运行的时候出错" class="headerlink" title="程序中1/0是在编译期出错还是在运行的时候出错"></a>程序中1/0是在编译期出错还是在运行的时候出错</h5><p>在linux系统中gcc编译期测试：编译可以通过，运行时报错</p>
<p>参考：</p>
<ul>
<li><a href="https://muyi110.github.io/2019/%E8%85%BE%E8%AE%AF%E4%B8%80%E9%9D%A2/">https://muyi110.github.io/2019/%E8%85%BE%E8%AE%AF%E4%B8%80%E9%9D%A2/</a></li>
<li><a href="https://blog.csdn.net/lengxiao1993/article/details/82771768">https://blog.csdn.net/lengxiao1993/article/details/82771768</a></li>
<li><a href="https://github.com/Vuact/Blog/blob/main/base/http/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.md">https://github.com/Vuact/Blog/blob/main/base/http/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.md</a></li>
</ul>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL学习笔记</title>
    <url>/2021/05/24/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<ul>
<li><h3 id="一、如何使用终端操作数据库"><a href="#一、如何使用终端操作数据库" class="headerlink" title="一、如何使用终端操作数据库"></a>一、如何使用终端操作数据库</h3></li>
<li><p>如何登陆数据库服务器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure>

<p><img src="https://img.imgdb.cn/item/607d324d8322e6675c0c2074.png" alt="image-20210419101047635"></p>
</li>
<li><p>如何查询数据库服务器中所有的数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show databases；</span><br></pre></td></tr></table></figure>

<p><img src="https://img.imgdb.cn/item/607d32998322e6675c0cc068.png" alt="image-20210419100514663"></p>
</li>
<li><p>如何选中某一个数据库进行操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use sushe；</span><br></pre></td></tr></table></figure>

<p><img src="https://img.imgdb.cn/item/607d32c78322e6675c0d1a07.png" alt="image-20210419100606162"></p>
<ul>
<li>SQL语句中的查询</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from admin；</span><br></pre></td></tr></table></figure>

<p><img src="https://img.imgdb.cn/item/607d32d58322e6675c0d3364.png" alt="image-20210419100728472"></p>
<ul>
<li><p>只查询Admin_ID中的一条</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from admin where Admin_ID=1；</span><br></pre></td></tr></table></figure>

<p><img src="https://img.imgdb.cn/item/607d32e48322e6675c0d4e65.png" alt="image-20210419102716439"></p>
</li>
<li><p>如何退出数据库服务器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exit；</span><br></pre></td></tr></table></figure></li>
<li><p>如何在数据库服务器中创建我们的数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database test；</span><br></pre></td></tr></table></figure>

<p><img src="https://img.imgdb.cn/item/607d32f18322e6675c0d6763.png" alt="image-20210419103011881"></p>
</li>
<li><p>使用test数据库进行操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use test；</span><br></pre></td></tr></table></figure></li>
<li><p>查看数据库中的数据表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show tables；</span><br></pre></td></tr></table></figure>

<p><img src="https://img.imgdb.cn/item/607d32ff8322e6675c0d82bc.png" alt="image-20210419103151476"></p>
</li>
<li><p>创建一个数据表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> pet (</span><br><span class="line">	name <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">	owner <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">	species <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">	sex <span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line">	birth <span class="type">DATE</span>,</span><br><span class="line">	death <span class="type">DATE</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://img.imgdb.cn/item/607d33118322e6675c0da562.png" alt="image-20210419103553869"></p>
</li>
<li><p>查看数据表是否创建成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show tables；</span><br></pre></td></tr></table></figure>

<p><img src="https://img.imgdb.cn/item/607d331d8322e6675c0dbd0b.png" alt="image-20210419103659284"></p>
</li>
<li><p>查看创建好的数据表的结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">describe pet;</span><br></pre></td></tr></table></figure>

<p><img src="https://img.imgdb.cn/item/607d332e8322e6675c0dde96.png" alt="image-20210419103818698"></p>
</li>
<li><p>查看数据表中的记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> pet;</span><br></pre></td></tr></table></figure>

<p> <img src="https://img.imgdb.cn/item/607d33498322e6675c0e1431.png" alt="image-20210419104228606"></p>
</li>
<li><p>如何往数据表中添加数据记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> pet</span><br><span class="line"><span class="keyword">VALUES</span> （<span class="string">&#x27;Puffball&#x27;</span>,<span class="string">&#x27;Diane&#x27;</span>,<span class="string">&#x27;hamster&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;1999-03-30&#x27;</span>,<span class="keyword">NULL</span>）;</span><br></pre></td></tr></table></figure></li>
<li><p>再次查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> pet;</span><br></pre></td></tr></table></figure>

<p><img src="https://img.imgdb.cn/item/607d33568322e6675c0e2c64.png" alt="image-20210419104507492"></p>
</li>
<li><p>删除数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> pet <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;Fluffy&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><img src="https://img.imgdb.cn/item/607d33658322e6675c0e4753.png" alt="image-20210419110249261"></p>
<p><img src="https://img.imgdb.cn/item/607d33738322e6675c0e6013.png" alt="image-20210419110317720"></p>
</li>
<li><p>修改数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">update pet <span class="keyword">set</span> name<span class="operator">=</span><span class="string">&#x27;旺旺才&#x27;</span> <span class="keyword">where</span> owner<span class="operator">=</span><span class="string">&#x27;周星驰&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<ul>
<li><p>mysql常用数据类型</p>
<ul>
<li><p>日期选择按照格式；数值字符串按照大小！</p>
</li>
<li><p>MySQL支持多种类型，大致可以分为三类：</p>
</li>
<li><p>数值</p>
<table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left">大小</th>
<th align="left">范围（有符号）</th>
<th align="left">范围（无符号）</th>
<th align="left">用途</th>
</tr>
</thead>
<tbody><tr>
<td align="left">TINYINT</td>
<td align="left">1 byte</td>
<td align="left">(-128，127)</td>
<td align="left">(0，255)</td>
<td align="left">小整数值</td>
</tr>
<tr>
<td align="left">SMALLINT</td>
<td align="left">2 bytes</td>
<td align="left">(-32 768，32 767)</td>
<td align="left">(0，65 535)</td>
<td align="left">大整数值</td>
</tr>
<tr>
<td align="left">MEDIUMINT</td>
<td align="left">3 bytes</td>
<td align="left">(-8 388 608，8 388 607)</td>
<td align="left">(0，16 777 215)</td>
<td align="left">大整数值</td>
</tr>
<tr>
<td align="left">INT或INTEGER</td>
<td align="left">4 bytes</td>
<td align="left">(-2 147 483 648，2 147 483 647)</td>
<td align="left">(0，4 294 967 295)</td>
<td align="left">大整数值</td>
</tr>
<tr>
<td align="left">BIGINT</td>
<td align="left">8 bytes</td>
<td align="left">(-9,223,372,036,854,775,808，9 223 372 036 854 775 807)</td>
<td align="left">(0，18 446 744 073 709 551 615)</td>
<td align="left">极大整数值</td>
</tr>
<tr>
<td align="left">FLOAT</td>
<td align="left">4 bytes</td>
<td align="left">(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)</td>
<td align="left">0，(1.175 494 351 E-38，3.402 823 466 E+38)</td>
<td align="left">单精度 浮点数值</td>
</tr>
<tr>
<td align="left">DOUBLE</td>
<td align="left">8 bytes</td>
<td align="left">(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td>
<td align="left">0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td>
<td align="left">双精度 浮点数值</td>
</tr>
<tr>
<td align="left">DECIMAL</td>
<td align="left">对DECIMAL(M,D) ，如果M&gt;D，为M+2否则为D+2</td>
<td align="left">依赖于M和D的值</td>
<td align="left">依赖于M和D的值</td>
<td align="left">小数值</td>
</tr>
</tbody></table>
</li>
<li><p>日期/时间</p>
<table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left">大小 ( bytes)</th>
<th align="left">范围</th>
<th align="left">格式</th>
<th align="left">用途</th>
</tr>
</thead>
<tbody><tr>
<td align="left">DATE</td>
<td align="left">3</td>
<td align="left">1000-01-01/9999-12-31</td>
<td align="left">YYYY-MM-DD</td>
<td align="left">日期值</td>
</tr>
<tr>
<td align="left">TIME</td>
<td align="left">3</td>
<td align="left">‘-838:59:59’/‘838:59:59’</td>
<td align="left">HH:MM:SS</td>
<td align="left">时间值或持续时间</td>
</tr>
<tr>
<td align="left">YEAR</td>
<td align="left">1</td>
<td align="left">1901/2155</td>
<td align="left">YYYY</td>
<td align="left">年份值</td>
</tr>
<tr>
<td align="left">DATETIME</td>
<td align="left">8</td>
<td align="left">1000-01-01 00:00:00/9999-12-31 23:59:59</td>
<td align="left">YYYY-MM-DD HH:MM:SS</td>
<td align="left">混合日期和时间值</td>
</tr>
<tr>
<td align="left">TIMESTAMP</td>
<td align="left">4</td>
<td align="left">1970-01-01 00:00:00/2038结束时间是第 <strong>2147483647</strong> 秒，北京时间 <strong>2038-1-19 11:14:07</strong>，格林尼治时间 2038年1月19日 凌晨 03:14:07</td>
<td align="left">YYYYMMDD HHMMSS</td>
<td align="left">混合日期和时间值，时间戳</td>
</tr>
</tbody></table>
</li>
<li><p>字符串（字符）</p>
<table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left">大小</th>
<th align="left">用途</th>
</tr>
</thead>
<tbody><tr>
<td align="left">CHAR</td>
<td align="left">0-255 bytes</td>
<td align="left">定长字符串</td>
</tr>
<tr>
<td align="left">VARCHAR</td>
<td align="left">0-65535 bytes</td>
<td align="left">变长字符串</td>
</tr>
<tr>
<td align="left">TINYBLOB</td>
<td align="left">0-255 bytes</td>
<td align="left">不超过 255 个字符的二进制字符串</td>
</tr>
<tr>
<td align="left">TINYTEXT</td>
<td align="left">0-255 bytes</td>
<td align="left">短文本字符串</td>
</tr>
<tr>
<td align="left">BLOB</td>
<td align="left">0-65 535 bytes</td>
<td align="left">二进制形式的长文本数据</td>
</tr>
<tr>
<td align="left">TEXT</td>
<td align="left">0-65 535 bytes</td>
<td align="left">长文本数据</td>
</tr>
<tr>
<td align="left">MEDIUMBLOB</td>
<td align="left">0-16 777 215 bytes</td>
<td align="left">二进制形式的中等长度文本数据</td>
</tr>
<tr>
<td align="left">MEDIUMTEXT</td>
<td align="left">0-16 777 215 bytes</td>
<td align="left">中等长度文本数据</td>
</tr>
<tr>
<td align="left">LONGBLOB</td>
<td align="left">0-4 294 967 295 bytes</td>
<td align="left">二进制形式的极大文本数据</td>
</tr>
<tr>
<td align="left">LONGTEXT</td>
<td align="left">0-4 294 967 295 bytes</td>
<td align="left">极大文本数据</td>
</tr>
</tbody></table>
<h3 id="mysql建表约束"><a href="#mysql建表约束" class="headerlink" title="mysql建表约束"></a>mysql建表约束</h3></li>
<li><p>主键约束</p>
<ul>
<li><p>它能够唯一确定一张表中的一条记录，也就是我们通过给某个字段添加约束，就可以使得该字段不重复且不为空。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE user (</span><br><span class="line">    id INT PRIMARY KEY,</span><br><span class="line">    name VARCHAR(20)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><img src="https://img.imgdb.cn/item/607d34858322e6675c10a412.png" alt="image-20210419111116893"></p>
<ul>
<li>– 联合主键<br>– 联合主键中的每个字段都<strong>不能为空</strong>，并且<strong>加起来</strong>不能和已设置的联合主键重复。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> (</span><br><span class="line">    id <span class="type">INT</span>,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    password <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY(id, name)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;123&#x27;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>自增约束</p>
<ul>
<li>管控id的值让他可以增长</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (name) <span class="keyword">values</span>(<span class="string">&#x27;zhangsan&#x27;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>忘记创建主键约束怎么办，可以通过SQL语句设置（两种方式）：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> (</span><br><span class="line">    id <span class="type">INT</span>,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>```<br>desc user<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">![image-20210419135347642](https://img.imgdb.cn/item/607d33918322e6675c0e993b.png)</span><br><span class="line"></span><br><span class="line">* 修改表结构，添加主键</span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line">ALTER TABLE user ADD PRIMARY KEY(id);</span><br><span class="line">ALTER TABLE user MODIFY id INT PRIMARY KEY;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="https://img.imgdb.cn/item/607d339c8322e6675c0eb30b.png" alt="image-20210419140048250"></p>
<ul>
<li><p>如何删除</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">drop</span> <span class="keyword">primary</span> key;</span><br></pre></td></tr></table></figure>

<p><img src="https://img.imgdb.cn/item/607d33aa8322e6675c0ed7de.png" alt="image-20210419140205166"></p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>唯一约束</p>
<ul>
<li>约束修饰的字段的值不能重复</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line">	id <span class="type">int</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>添加唯一约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">add</span> <span class="keyword">unique</span>(name);</span><br></pre></td></tr></table></figure>

<p><img src="https://img.imgdb.cn/item/607d33b68322e6675c0eed4b.png" alt="image-20210419140558495"></p>
</li>
<li><p>创建表的时候添加唯一约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line">	id <span class="type">int</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>)，</span><br><span class="line">    <span class="keyword">unique</span>(name)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 或者</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line">	id <span class="type">int</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">unique</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="keyword">unique</span>(id,name)表示两个键在一起不重复就行</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line">	id <span class="type">int</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    <span class="keyword">unique</span>(id,name)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><img src="https://img.imgdb.cn/item/607d33c58322e6675c0f0b88.png" alt="image-20210419140816729"></p>
</li>
<li><p>删除唯一约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">drop</span> index name;</span><br></pre></td></tr></table></figure></li>
<li><p>modify添加</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> modify <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">unique</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>总结：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、建表的时候添加约束</span><br><span class="line">2、可以使用alter... add ...</span><br><span class="line">3、alter... modify ...</span><br><span class="line">4、删除alter ... drop ...</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>非空约束</p>
<ul>
<li><p>修饰的字段不能为空</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> (</span><br><span class="line">    id <span class="type">INT</span>,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><img src="https://img.imgdb.cn/item/607d33d38322e6675c0f2817.png" alt="image-20210419141716219"></p>
</li>
<li><p>不传入name值会报错</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (id) <span class="keyword">values</span>(<span class="number">1</span>);</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>正确用法</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> uservalues(<span class="number">1</span>,<span class="string">&#x27;zhangsan&#x27;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>默认约束</p>
<ul>
<li><p>当我们插入字段值时，如果没有传值，就会使用默认值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line">	id <span class="type">int</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    age <span class="type">int</span> <span class="keyword">default</span> <span class="number">10</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><img src="https://img.imgdb.cn/item/607d33e08322e6675c0f4744.png" alt="image-20210419142616113"></p>
</li>
</ul>
</li>
<li><p>外键约束</p>
<ul>
<li><p>涉及到两个表：父表，子表</p>
</li>
<li><p>主表，副表</p>
</li>
<li><p>班级表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> classes(</span><br><span class="line">	id <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li>
<li><p>学生表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> classes(</span><br><span class="line">	id <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    class_id <span class="type">int</span>,</span><br><span class="line">    <span class="keyword">foreign</span> key(class_id) <span class="keyword">references</span> classes(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><img src="https://img.imgdb.cn/item/607d33f68322e6675c0f7d6a.png" alt="image-20210419143103219"></p>
</li>
<li><p>插入四个班</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> calsses <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;一班&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> calsses <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;二班&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> calsses <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;三班&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> calsses <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">&#x27;四班&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://img.imgdb.cn/item/607d34068322e6675c0fa28e.png" alt="image-20210419143606566"></p>
</li>
<li><p>往对应的班级添加学生信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> calsses <span class="keyword">values</span>(<span class="number">1001</span>,<span class="string">&#x27;一班&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> calsses <span class="keyword">values</span>(<span class="number">1002</span>,<span class="string">&#x27;二班&#x27;</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> calsses <span class="keyword">values</span>(<span class="number">1003</span>,<span class="string">&#x27;三班&#x27;</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> calsses <span class="keyword">values</span>(<span class="number">1004</span>,<span class="string">&#x27;四班&#x27;</span>,<span class="number">4</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>结论</p>
<ul>
<li>主表classes中没有的数据值，在副表中，是不可以使用的。</li>
<li>主表中的记录被副表引用，是不可以被删除的。 </li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="数据库的三大设计范式"><a href="#数据库的三大设计范式" class="headerlink" title="数据库的三大设计范式"></a>数据库的三大设计范式</h3><ul>
<li><p>第一范式（1NF)</p>
<ul>
<li><p>数据表中的所有字段都是不可分割的原子值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">	id <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    address <span class="type">varchar</span>(<span class="number">30</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">inser <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;中国四川省成都市武侯区武侯大道100号&#x27;</span>);</span><br><span class="line">inser <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;中国四川省成都市武侯区武侯大道200号&#x27;</span>);</span><br><span class="line">inser <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="string">&#x27;中国四川省成都市武侯区武侯大道300号&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://img.imgdb.cn/item/607d34198322e6675c0fca93.png" alt="image-20210419150252138"></p>
</li>
<li><p>字段还可以继续拆分，就不满足第一范式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">	id <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    country <span class="type">varchar</span>(<span class="number">30</span>),</span><br><span class="line">    privence <span class="type">varchar</span>(<span class="number">30</span>),</span><br><span class="line">    city <span class="type">varchar</span>(<span class="number">30</span>),</span><br><span class="line">    details <span class="type">varchar</span>(<span class="number">30</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">inser <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;中国&#x27;</span>,<span class="string">&#x27;四川省&#x27;</span>,<span class="string">&#x27;成都市&#x27;</span>,<span class="string">&#x27;武侯区武侯大道100号&#x27;</span>);</span><br><span class="line">inser <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;中国&#x27;</span>,<span class="string">&#x27;四川省&#x27;</span>,<span class="string">&#x27;成都市&#x27;</span>,<span class="string">&#x27;武侯区武侯大道100号&#x27;</span>);</span><br><span class="line">inser <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="string">&#x27;中国&#x27;</span>,<span class="string">&#x27;四川省&#x27;</span>,<span class="string">&#x27;成都市&#x27;</span>,<span class="string">&#x27;武侯区武侯大道100号&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://img.imgdb.cn/item/607d34268322e6675c0fe63e.png" alt="image-20210419150357502"></p>
</li>
<li><p>范式，设计的越详细，对于某些实际操作可能更好，单不一定都是好处。</p>
</li>
</ul>
</li>
<li><p>第二范式（2NF）</p>
<ul>
<li><p>在满足第一范式的前提下，其他列都必须完全依赖于主键列。</p>
</li>
<li><p>如果出现不完全依赖，只可能发生在联合主键的情况下。</p>
</li>
<li><p>订单表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> myorder (</span><br><span class="line">    product_id <span class="type">INT</span>,</span><br><span class="line">    customer_id <span class="type">INT</span>,</span><br><span class="line">    product_name <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    customer_name <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (product_id, customer_id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li>
<li><p>除了主键以外的列，只依赖于主键的部分字段。</p>
</li>
<li><p>实际上，在这张订单表中，<code>product_name</code> 只依赖于 <code>product_id</code> ，<code>customer_name</code> 只依赖于 <code>customer_id</code> 。也就是说，<code>product_name</code> 和 <code>customer_id</code> 是没用关系的，<code>customer_name</code> 和 <code>product_id</code> 也是没有关系的。</p>
</li>
<li><p>拆表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> myorder (</span><br><span class="line">    order_id <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">    product_id <span class="type">int</span>,</span><br><span class="line">    customer_id <span class="type">int</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> product (</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> customer (</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li>
<li><p>拆分之后，<code>myorder</code> 表中的 <code>product_id</code> 和 <code>customer_id</code> 完全依赖于 <code>order_id</code> 主键，而 <code>product</code> 和 <code>customer</code> 表中的其他字段又完全依赖于主键。满足了第二范式的设计！</p>
</li>
</ul>
</li>
<li><p>第三范式（3NF）</p>
<ul>
<li><p>必须先满足第二范式，除开主键的其他列之间不能传递依赖</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> myorder (</span><br><span class="line">    order_id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    product_id <span class="type">INT</span>,</span><br><span class="line">    customer_id <span class="type">INT</span>,</span><br><span class="line">    customer_phone <span class="type">VARCHAR</span>(<span class="number">15</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li>
<li><p>表中的 <code>customer_phone</code> 有可能依赖于 <code>order_id</code> 、 <code>customer_id</code> 两列，也就不满足了第三范式的设计：其他列之间不能有传递依赖关系。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> myorder (</span><br><span class="line">    order_id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    product_id <span class="type">INT</span>,</span><br><span class="line">    customer_id <span class="type">INT</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> customer (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,<span class="keyword">sql</span></span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    phone <span class="type">VARCHAR</span>(<span class="number">15</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li>
<li><p>修改后就不存在其他列之间的传递依赖关系，其他列都只依赖于主键列，满足了第三范式的设计！</p>
</li>
<li><p>参考文献：<a href="https://www.bilibili.com/video/BV1Vt411z7wy?p=18&spm_id_from=pageDriver">一天学会 MySQL 数据库</a></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
</search>
