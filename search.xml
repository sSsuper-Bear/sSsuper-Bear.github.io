<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>bootdo项目通过jar包启动</title>
    <url>/2021/05/24/bootdo%E9%A1%B9%E7%9B%AE%E9%80%9A%E8%BF%87jar%E5%8C%85%E5%90%AF%E5%8A%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="bootdo项目通过jar包启动"><a href="#bootdo项目通过jar包启动" class="headerlink" title="bootdo项目通过jar包启动"></a>bootdo项目通过jar包启动</h3><ul>
<li><p>本项目来自<a href="https://gitee.com/lcg0124/bootdo">gitee李春光</a>，具体<a href="https://gitee.com/lcg0124/bootdo/wikis/%E5%90%AF%E5%8A%A8%E9%A1%B9%E7%9B%AE?sort_id=64319">参考文档</a></p>
<p><img src="https://img.imgdb.cn/item/608b57c6d1a9ae528fa2373d.png" alt="image-20210304220122324"></p>
</li>
<li><p>首先在本地IDEA启动成功</p>
</li>
</ul>
<p><img src="https://img.imgdb.cn/item/608b57dbd1a9ae528fa2e9f5.png" alt="image-20210304215220295"></p>
<ul>
<li>进入网址</li>
</ul>
<p><img src="https://img.imgdb.cn/item/608b57ebd1a9ae528fa36741.png" alt="image-20210304215801788"></p>
<ul>
<li><p>使用maven打包bootdo并运行，bootdo项目生成jar包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">maven clean</span><br><span class="line">maven package</span><br></pre></td></tr></table></figure>

<p><img src="https://img.imgdb.cn/item/608b57fcd1a9ae528fa3f3c0.png" alt="image-20210408152239126"></p>
<ul>
<li>把test文件都给注释掉</li>
</ul>
</li>
<li><p>把jar包和Dockerfile文件放到同一目录下</p>
<p><img src="https://img.imgdb.cn/item/608b5812d1a9ae528fa4a47c.png" alt="image-20210408160354212"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Dockerfile</span><br><span class="line">  1 FROM java:8</span><br><span class="line">  2 </span><br><span class="line">  3 VOLUME /tmp</span><br><span class="line">  4 </span><br><span class="line">  5 COPY bootdo-2.0.0.jar app.jar</span><br><span class="line">  6 </span><br><span class="line">  7 RUN bash -c &quot;touch /app.jar&quot;</span><br><span class="line">  8 </span><br><span class="line">  9 EXPOSE 8088</span><br><span class="line"> 10 </span><br><span class="line"> 11 ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;app.jar&quot;, &quot;--spring.profiles.active=test&quot;, &quot;--server.port=8088&quot;, &quot;&gt; /log/app.log&quot;]</span><br></pre></td></tr></table></figure></li>
<li><p>运行指令将jar包打包成镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker image build -t bootdo-2.0.0 .</span><br></pre></td></tr></table></figure>

<p><img src="https://img.imgdb.cn/item/608b582ad1a9ae528fa55ad7.png" alt="image-20210408160443433"></p>
</li>
<li><p>查看镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<p><img src="https://img.imgdb.cn/item/608b5839d1a9ae528fa5d370.png" alt="image-20210408160750151"></p>
</li>
<li><p>通过jar包运行项目</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar study-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>

<p><img src="https://img.imgdb.cn/item/608b584bd1a9ae528fa6621d.png" alt="image-20210422091705400"></p>
<p><img src="https://img.imgdb.cn/item/608b5859d1a9ae528fa6d3c6.png" alt="image-20210422091719557"></p>
</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://blog.csdn.net/qq_37525899/article/details/86736835">使用maven打包bootdo并运行</a></li>
</ul>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>docker概念</title>
    <url>/2021/05/28/docker%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><h3 id="操作概念图"><a href="#操作概念图" class="headerlink" title="操作概念图"></a>操作概念图</h3><p><img src="https://pic.imgdb.cn/item/60b03e3a08f74bc159e36b7c.png" alt="操作概念图"></p>
<h3 id="对应概念"><a href="#对应概念" class="headerlink" title="对应概念"></a>对应概念</h3><ul>
<li><p>镜像：就类似于我们用虚拟机，创建虚拟机前要下载的系统镜像文件，比如iso文件、img文件等等这样一些镜像文件。通俗来说就是为容器用来创建容器的</p>
</li>
<li><p>容器：它可以类比成正在运行中的一个虚拟机。</p>
</li>
<li><p>tar文件：tar文件就类似于vm使用时的vmdk文件，它可以将镜像直接保存成一个tar文件，然后怎样给别人然后别人通过load指令，重新加载成一个镜像，然后通过run指令就可以起来一个正在运行中的容器了。</p>
</li>
<li><p>Dockerfile：Dockerfile相当于一个配置文件，通过写“如何构建”的步骤，来指定一个镜像是如何构建的。通过docker build指令可以将dockerfile构建成一个镜像。</p>
</li>
<li><p>仓库(Repository)：仓库中保存了很多的镜像，包括一些共有的第三方已经做好的镜像比如ubuntu镜像nginx镜像mysql镜像tomcat镜像等等。我们可以通过docker poll指令下载这些镜像到本地。当然也可以把这些镜像通过push上传上去。</p>
</li>
</ul>
<h4 id="docker总述"><a href="#docker总述" class="headerlink" title="docker总述"></a>docker总述</h4><div class="note info flat">
            <p>通过以上这些技术的组合，最后的结果就是，绝大部分应用，开发者都可以通过docker build创建镜像，通过docker push上传镜像，用户通过docker pull下载镜像，用docker run运行应用。用户不需要再去关心如何搭建环境，如何安装，如何解决不同发行版的库冲突——而且通常不会需要消耗更多的硬件资源，不会明显降低性能。这就是其他答主所说的标准化、集装箱的原因所在。</p>
          </div>





]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>git使用</title>
    <url>/2021/12/26/git%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="git的基本使用"><a href="#git的基本使用" class="headerlink" title="git的基本使用"></a>git的基本使用</h3><ul>
<li><strong>Git是什么？****Git是目前世界上最先进的分布式版本控制系统。</strong></li>
<li><strong>工作原理 / 流程：</strong><img src="file://D:\noteBook\git\images\59c31e4400013bc911720340.png?lastModify=1640523474" alt="图片描述"></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Workspace：工作区</span><br><span class="line">Index / Stage：暂存区</span><br><span class="line">Repository：仓库区（或本地仓库)</span><br><span class="line">Remote：远程仓库</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>git设置用户名和邮箱</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;superbear&quot;</span><br><span class="line">$ git config --global user.email &quot;809900832@qq.com&quot;</span><br></pre></td></tr></table></figure></li>
<li><strong>git init将当前目录变成git管理仓库</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git init</span><br><span class="line">Initialized empty Git repository in D:/gitTest/.git/</span><br></pre></td></tr></table></figure></li>
<li><strong>添加文件到暂存区</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git add readme.txt</span><br></pre></td></tr></table></figure></li>
<li><strong>把文件提交仓库</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git commit -m &quot;readme.txt提交&quot;</span><br><span class="line">[master (root-commit) da56bfb] readme.txt提交</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 readme.txt</span><br></pre></td></tr></table></figure></li>
<li><strong>查看文件提交状态</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure></li>
<li><strong>修改readme.txt文件，查看status（readme.txt已经被修改但是文件未提交）</strong><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line">        modified:   readme.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure></li>
<li><strong>查看readme.txt修改了什么内容</strong><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git diff readme.txt</span></span><br><span class="line">diff --git a/readme.txt b/readme.txt</span><br><span class="line">index 748099d..1ae13e4 100644</span><br><span class="line">--- a/readme.txt</span><br><span class="line">+++ b/readme.txt</span><br><span class="line">@@ -1 +1,2 @@</span><br><span class="line">-11111111</span><br><span class="line">\ No newline at end of file</span><br><span class="line">+11111111</span><br><span class="line">+22222222</span><br><span class="line">\ No newline at end of file</span><br></pre></td></tr></table></figure></li>
<li><strong>提交修改后的内容</strong><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">  80990@SuperBear-LAPTOP MINGW64 /d/gitTest (master)</span><br><span class="line"><span class="meta">  $</span><span class="bash"> git add readme.txt</span></span><br><span class="line">  </span><br><span class="line">  80990@SuperBear-LAPTOP MINGW64 /d/gitTest (master)</span><br><span class="line"><span class="meta">  $</span><span class="bash"> git status</span></span><br><span class="line">  On branch master</span><br><span class="line">  Changes to be committed:</span><br><span class="line">    (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)</span><br><span class="line">          modified:   readme.txt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  80990@SuperBear-LAPTOP MINGW64 /d/gitTest (master)</span><br><span class="line"><span class="meta">  $</span><span class="bash"> git commit -m <span class="string">&quot;文件增加222222内容&quot;</span></span></span><br><span class="line">  [master c37756b] 文件增加222222内容</span><br><span class="line">   1 file changed, 2 insertions(+), 1 deletion(-)</span><br><span class="line"></span><br><span class="line">  80990@SuperBear-LAPTOP MINGW64 /d/gitTest (master)</span><br><span class="line"><span class="meta">  $</span><span class="bash"> git status</span></span><br><span class="line">  On branch master</span><br><span class="line">  nothing to commit, working tree clean</span><br><span class="line">  ```shell</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">### 版本回退</span></span></span><br><span class="line"></span><br><span class="line">* **添加一行3333333333**</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">80990@SuperBear-LAPTOP MINGW64 /d/gitTest (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git add readme.txt</span></span><br><span class="line"></span><br><span class="line">80990@SuperBear-LAPTOP MINGW64 /d/gitTest (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">&quot;文件增加3333333333内容&quot;</span></span></span><br><span class="line">[master 365183a] 文件增加3333333333内容</span><br><span class="line"> 1 file changed, 2 insertions(+), 1 deletion(-)</span><br></pre></td></tr></table></figure></li>
</ul>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* **查看历史记录**</span><br></pre></td></tr></table></figure>
<p>  $ git log</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">commit 365183a8190fd656187a692d1b87534f3aea2565 (HEAD -&gt; master)</span><br><span class="line">Author: superbear &lt;809900832@qq.com&gt;</span><br><span class="line">Date:   Thu Aug 26 11:23:13 2021 +0800</span><br><span class="line"></span><br><span class="line">    文件增加3333333333内容</span><br><span class="line"></span><br><span class="line">commit c37756b902d3c950a3f9abc31598165a6680e0ad</span><br><span class="line">Author: superbear &lt;809900832@qq.com&gt;</span><br><span class="line">Date:   Thu Aug 26 11:15:15 2021 +0800</span><br><span class="line"></span><br><span class="line">    文件增加222222内容</span><br><span class="line"></span><br><span class="line">commit da56bfb0131b6a23e6d28d8f9311baa72073d014</span><br><span class="line">Author: superbear &lt;809900832@qq.com&gt;</span><br><span class="line">Date:   Thu Aug 26 11:09:48 2021 +0800</span><br></pre></td></tr></table></figure>

<p>      readme.txt提交<br>      <br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* **简化版显示版本信息**</span><br></pre></td></tr></table></figure><br>  $ git log –oneline<br>  365183a (HEAD -&gt; master) 文件增加3333333333内容<br>  c37756b 文件增加222222内容<br>  da56bfb readme.txt提交<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* **版本回退**</span><br></pre></td></tr></table></figure><br>  80990@SuperBear-LAPTOP MINGW64 /d/gitTest (master)<br>  $ cat readme.txt<br>  11111111<br>  22222222<br>  3333333333<br>  80990@SuperBear-LAPTOP MINGW64 /d/gitTest (master)<br>  $ git reset –hard HEAD^<br>  HEAD is now at c37756b 文件增加222222内容</p>
<p>  80990@SuperBear-LAPTOP MINGW64 /d/gitTest (master)<br>  $ cat readme.txt<br>  11111111<br>  22222222</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* **再次查看历史记录**</span><br></pre></td></tr></table></figure>
<p>  $ git log –oneline<br>  c37756b (HEAD -&gt; master) 文件增加222222内容<br>  da56bfb readme.txt提交</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* **回退到最新版本**</span><br></pre></td></tr></table></figure>
<p>  80990@SuperBear-LAPTOP MINGW64 /d/gitTest (master)<br>  $ git reflog<br>  c37756b (HEAD -&gt; master) HEAD@{0}: reset: moving to HEAD^<br>  365183a HEAD@{1}: commit: 文件增加3333333333内容<br>  c37756b (HEAD -&gt; master) HEAD@{2}: commit: 文件增加222222内容<br>  da56bfb HEAD@{3}: commit (initial): readme.txt提交</p>
<p>  80990@SuperBear-LAPTOP MINGW64 /d/gitTest (master)<br>  $ git reset –hard 365183a<br>  HEAD is now at 365183a 文件增加3333333333内容</p>
<p>  80990@SuperBear-LAPTOP MINGW64 /d/gitTest (master)<br>  $ cat readme.txt<br>  11111111<br>  22222222<br>  3333333333</p>
<pre><code>* **理解工作区与暂存区的区别？**
* **工作区：就是你在电脑上看到的目录，比如目录下testgit里的文件(.git隐藏目录版本库除外)。或者以后需要再新建的目录文件等等都属于工作区范畴。**
* **版本库(Repository)：工作区有一个隐藏目录.git,这个不属于工作区，这是版本库。其中版本库里面存了很多东西，其中最重要的就是stage(暂存区)，还有Git为我们自动创建了第一个分支master,以及指向master的一个指针HEAD。**
* **Git提交文件到版本库有两步：****第一步：是使用 git add 把文件添加进去，实际上就是把文件添加到暂存区。****第二步：使用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支上。**

#### 参考：[Git使用教程,最详细，最傻瓜，最浅显，真正手把手教](https://www.cnblogs.com/joyco773/p/10591820.html)
</code></pre>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
  </entry>
  <entry>
    <title>数据库常用指令</title>
    <url>/2021/07/22/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="mysql-sql常用语句大全"><a href="#mysql-sql常用语句大全" class="headerlink" title="mysql sql常用语句大全"></a><a href="https://blog.csdn.net/hzw6991/article/details/87757426?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162514485316780264064821%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=162514485316780264064821&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-2-87757426.pc_v2_rank_blog_default&utm_term=%E6%95%B0%E6%8D%AE%E5%BA%93&spm=1018.2226.3001.4450">mysql sql常用语句大全</a></h1><h3 id="一-、常用操作数据库的命令"><a href="#一-、常用操作数据库的命令" class="headerlink" title="一 、常用操作数据库的命令"></a>一 、常用操作数据库的命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.show databases; 查看所有的数据库</span><br><span class="line">2.create database test; 创建一个叫test的数据库</span><br><span class="line">3.drop database test;删除一个叫test的数据库</span><br><span class="line">4.use test;选中库 ,在建表之前必须要选择数据库</span><br><span class="line">5.show tables; 在选中的数据库之中查看所有的表</span><br><span class="line">6.create table 表名 (字段1 类型, 字段2 类型);</span><br><span class="line">7.desc 表名;查看所在的表的字段</span><br><span class="line">8.drop table 表名; 删除表</span><br><span class="line">9.show create database 库名;查看创建库的详细信息</span><br><span class="line">10.show create table 表名; 查看创建表的详细信息</span><br></pre></td></tr></table></figure>

<h3 id="二、修改表的命令"><a href="#二、修改表的命令" class="headerlink" title="二、修改表的命令"></a>二、修改表的命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.修改字段类型 alter table 表名 modify 字段 字段类型;</span><br><span class="line">2.添加新的字段 alter table 表名 add 字段 字段类型</span><br><span class="line">3.添加字段并指定位置  alter table 表名 add 字段 字段类型   after 字段;</span><br><span class="line">4.删除表字段  alter table 表名 drop 字段名;</span><br><span class="line">5.修改指定的字段  alter table 表名 change 原字段名字  新的字段名字 字段类型</span><br></pre></td></tr></table></figure>

<h3 id="三、对数据的操作"><a href="#三、对数据的操作" class="headerlink" title="三、对数据的操作"></a>三、对数据的操作</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.增加数据(insert)3种方式</span><br><span class="line">    1.1 insert into 表名 values(值1，值2，...)(很少用)</span><br><span class="line">    1.2 insert into 表名(字段1，字段2...) values(值1，值2，....);（较常用）</span><br><span class="line">    1.3 insert into 表名(字段1，字段2...) values(值1，值2，....)，(值1，值2，....)，(值1，值2，....);</span><br><span class="line">2.删除数据(delete) delete from 表名 where 条件 注意：where 条件必须加，否则数据会被全部删除</span><br><span class="line">3.更新数据(update)  update 表名 set字段1 = 值1, 字段2 = 值2 where 条件</span><br><span class="line">4.查询数据(select)</span><br><span class="line">    4.1 查询表中的所有数据   select * from 表名</span><br><span class="line">    4.2 指定数据查询    select 字段 from 表名 </span><br><span class="line">    根据条件查询出来的数据  select 字段 from 表名 where 条件 (最常用的)</span><br><span class="line">    where 条件后面跟的条件</span><br><span class="line">     关系：&gt;,&lt;,&gt;=,&lt;=,!=  </span><br><span class="line">     逻辑：or, and </span><br><span class="line">     区间：id between 4 and 6 ;闭区间，包含边界</span><br><span class="line">5.排序</span><br><span class="line">select 字段 from 表 order by 字段  排序关键词(desc | asc)</span><br><span class="line">排序关键词 desc 降序 asc 升序(默认)</span><br><span class="line">    5.1 通过字段来排序</span><br><span class="line">    例如 ：select * from star orser by money desc, age asc;   </span><br><span class="line">    5.2 多字段排序</span><br><span class="line">    select 字段 from 表 order by 字段1  desc |asc,...字段n desc| asc;</span><br><span class="line">6.常用的统计函数 sum，avg，count，max,min</span><br><span class="line">    只分组:select * from 表 group by 字段</span><br><span class="line">    例子: select count(sex) as re,sex from star group by sex having re &gt; 3;</span><br><span class="line">    分组统计: select count(sex) from star group by sex;</span><br><span class="line">7.分组 select * from 表名  limit 偏移量,数量</span><br><span class="line">    说明:</span><br><span class="line">        8.1.不写偏移量的话就是默认的为0</span><br><span class="line">        8.2.实现分页的时候必须写偏移量</span><br><span class="line">        偏移量怎么计算？:</span><br><span class="line">        limit (n-1)*数量 ,数量 </span><br></pre></td></tr></table></figure>

<h3 id="四、多表联合查询"><a href="#四、多表联合查询" class="headerlink" title="四、多表联合查询"></a>四、多表联合查询</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.内连接</span><br><span class="line">隐式内连接 select username,name from user,goods where user,gid=gods,gid;</span><br><span class="line">显示内连接</span><br><span class="line">select username,from user inner join goods on user.gid=goods.gid;</span><br><span class="line">select * from user left join goods on user.gid=goods.gid;</span><br><span class="line">2.外链接</span><br><span class="line">左连接 包含所有的左边表中的记录以及右边表中没有和他匹配的记录</span><br><span class="line">右连接 </span><br><span class="line">select * from user where gid in(select gid from goods);</span><br><span class="line">select * from user right jOin goods on user.gid=goods.gid;</span><br><span class="line">子嵌套查询</span><br><span class="line">数据联合查询</span><br><span class="line">select * from user left join goods on user.gid=goods.gid union select * from user right join goods on user.gid=goods.gid;</span><br><span class="line">两个表同时更新</span><br><span class="line">update user u, goods g set u.gid=12,g.price=1 where u.id=2 and u.gid=g.gid;</span><br></pre></td></tr></table></figure>

<h3 id="五、DCL-数据控制语言"><a href="#五、DCL-数据控制语言" class="headerlink" title="五、DCL 数据控制语言"></a>五、DCL 数据控制语言</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.创建用户:create user&#x27;xiaoming&#x27;@&#x27;localhost&#x27; identified by &#x27;666666&#x27;;</span><br><span class="line">2.授权用户:grant all on test.*to&#x27;xiaoming&#x27;@&#x27;localhost&#x27;;</span><br><span class="line">3.刷新权限:flush privileges;</span><br><span class="line">4.取消授权:revoke all on test.* from &#x27;xiaoming&#x27;@&#x27;localhost&#x27;;</span><br><span class="line">5.删除用户: drop user&#x27;xiaoming&#x27;@&#x27;localhost&#x27;;</span><br></pre></td></tr></table></figure>

<h3 id="六、DTL-数据事务语言"><a href="#六、DTL-数据事务语言" class="headerlink" title="六、DTL 数据事务语言"></a>六、DTL 数据事务语言</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">开启事务：set autocommit=0;</span><br><span class="line">操作回滚：rollback;</span><br><span class="line">提交事务：commit;</span><br></pre></td></tr></table></figure>

<p>转自：<a href="https://blog.csdn.net/hzw6991/article/details/87757426?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162514485316780264064821%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=162514485316780264064821&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-2-87757426.pc_v2_rank_blog_default&amp;utm_term=%E6%95%B0%E6%8D%AE%E5%BA%93&amp;spm=1018.2226.3001.4450">https://blog.csdn.net/hzw6991/article/details/87757426?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162514485316780264064821%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=162514485316780264064821&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-2-87757426.pc_v2_rank_blog_default&amp;utm_term=%E6%95%B0%E6%8D%AE%E5%BA%93&amp;spm=1018.2226.3001.4450</a></p>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>二分法</title>
    <url>/2022/01/03/%E5%88%B7%E9%A2%98/%E4%BA%8C%E5%88%86%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="374-猜数字大小"><a href="#374-猜数字大小" class="headerlink" title="374. 猜数字大小"></a><a href="https://leetcode-cn.com/problems/guess-number-higher-or-lower/">374. 猜数字大小</a></h4><p>难度简单165</p>
<p>猜数字游戏的规则如下：</p>
<ul>
<li>每轮游戏，我都会从 <strong>1</strong> 到 <em><strong>n</strong></em> 随机选择一个数字。 请你猜选出的是哪个数字。</li>
<li>如果你猜错了，我会告诉你，你猜测的数字比我选出的数字是大了还是小了。</li>
</ul>
<p>你可以通过调用一个预先定义好的接口 <code>int guess(int num)</code> 来获取猜测结果，返回值一共有 3 种可能的情况（<code>-1</code>，<code>1</code> 或 <code>0</code>）：</p>
<ul>
<li>-1：我选出的数字比你猜的数字小 <code>pick &lt; num</code></li>
<li>1：我选出的数字比你猜的数字大 <code>pick &gt; num</code></li>
<li>0：我选出的数字和你猜的数字一样。恭喜！你猜对了！<code>pick == num</code></li>
</ul>
<p>返回我选出的数字。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 10, pick = 6</span><br><span class="line">输出：6</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 1, pick = 1</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 2, pick = 1</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure>

<p><strong>示例 4：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 2, pick = 2</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 231 - 1</code></li>
<li><code>1 &lt;= pick &lt;= n</code></li>
</ul>
<p><strong>思路：</strong></p>
<ul>
<li><p>设置左右两个端点</p>
</li>
<li><p>每次循环区间内折半</p>
</li>
<li><p>左右相等时退出得到正确答案</p>
</li>
</ul>
<p><strong>解答：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> <span class="keyword">extends</span> <span class="title">GuessGame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">guessNumber</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left=<span class="number">1</span>, right=n;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = left + (right -left)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(guess(mid) &lt;=<span class="number">0</span>) right = mid;</span><br><span class="line">            <span class="keyword">else</span> left = mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>刷题</category>
      </categories>
  </entry>
  <entry>
    <title>二叉树</title>
    <url>/2022/01/03/%E5%88%B7%E9%A2%98/%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="600-不含连续1的非负整数"><a href="#600-不含连续1的非负整数" class="headerlink" title="600. 不含连续1的非负整数"></a><a href="https://leetcode-cn.com/problems/non-negative-integers-without-consecutive-ones/">600. 不含连续1的非负整数</a></h4><p>难度困难138</p>
<p>给定一个正整数 n，找出小于或等于 n 的非负整数中，其二进制表示不包含 <strong>连续的1</strong> 的个数。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: 5</span><br><span class="line">输出: 5</span><br><span class="line">解释: </span><br><span class="line">下面是带有相应二进制表示的非负整数&lt;= 5：</span><br><span class="line">0 : 0</span><br><span class="line">1 : 1</span><br><span class="line">2 : 10</span><br><span class="line">3 : 11</span><br><span class="line">4 : 100</span><br><span class="line">5 : 101</span><br><span class="line">其中，只有整数3违反规则（有两个连续的1），其他5个满足规则。</span><br></pre></td></tr></table></figure>

<p><strong>说明:</strong> 1 &lt;= n &lt;= 109</p>
<p>解答：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findIntegers</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//根据构建斐波那也数列</span></span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">32</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;  i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">            dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        String numStr = getBinary(num);</span><br><span class="line">        <span class="comment">//一位位移动，不连续遇到1加上它</span></span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numStr.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(numStr.charAt(i) == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            res  += dp[numStr.length() - i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(i != <span class="number">0</span> &amp;&amp; numStr.charAt(i - <span class="number">1</span> ) == <span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//整数 转 二进制数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getBinary</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">while</span>(num &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            sb.insert(<span class="number">0</span>,num &amp; <span class="number">1</span>);</span><br><span class="line">            num &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h4 id="678-有效的括号字符串"><a href="#678-有效的括号字符串" class="headerlink" title="678. 有效的括号字符串"></a><a href="https://leetcode-cn.com/problems/valid-parenthesis-string/">678. 有效的括号字符串</a></h4><p>给定一个只包含三种字符的字符串：<code>（ </code>，<code>）</code> 和 <code>*</code>，写一个函数来检验这个字符串是否为有效字符串。有效字符串具有如下规则：</p>
<ol>
<li>任何左括号 <code>(</code> 必须有相应的右括号 <code>)</code>。</li>
<li>任何右括号 <code>)</code> 必须有相应的左括号 <code>(</code> 。</li>
<li>左括号 <code>(</code> 必须在对应的右括号之前 <code>)</code>。</li>
<li><code>*</code> 可以被视为单个右括号 <code>)</code> ，或单个左括号 <code>(</code> ，或一个空字符串。</li>
<li>一个空字符串也被视为有效字符串。</li>
</ol>
<p><strong>示例 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: &quot;()&quot;</span><br><span class="line">输出: True</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: &quot;(*)&quot;</span><br><span class="line">输出: True</span><br></pre></td></tr></table></figure>

<p><strong>示例 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: &quot;(*))&quot;</span><br><span class="line">输出: True</span><br></pre></td></tr></table></figure>

<p>解答：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkValidString</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// l: 左括号最少可能有多少个</span></span><br><span class="line">        <span class="comment">// r: 左括号最多可能有多少个</span></span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : s.toCharArray()) &#123;</span><br><span class="line">            <span class="comment">// 遇到&#x27;(&#x27;所有可能性加一</span></span><br><span class="line">            <span class="comment">// 遇到&#x27;)&#x27;所有可能性减一</span></span><br><span class="line">            <span class="comment">// 遇到&#x27;*&#x27;，最少的可能性可以变少，最多的可能性也同样可以变多，这取决于这个星号最终我们看成什么，但是可能性都在</span></span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                l++; r++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">                l--; r--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                l--; r++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 当前左括号最少个数不能为负</span></span><br><span class="line">            l = Math.max(l, <span class="number">0</span>);</span><br><span class="line">            <span class="comment">// 这种情况其实发生在r本身是负数的时候，也就是我们常见的右括号太多了</span></span><br><span class="line">            <span class="keyword">if</span> (l &gt; r) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 能取到0个左括号才是满足平衡的</span></span><br><span class="line">        <span class="keyword">return</span> l == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>刷题</category>
      </categories>
  </entry>
  <entry>
    <title>动态规划</title>
    <url>/2022/01/03/%E5%88%B7%E9%A2%98/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="600-不含连续1的非负整数"><a href="#600-不含连续1的非负整数" class="headerlink" title="600. 不含连续1的非负整数"></a><a href="https://leetcode-cn.com/problems/non-negative-integers-without-consecutive-ones/">600. 不含连续1的非负整数</a></h4><p>难度困难138</p>
<p>给定一个正整数 n，找出小于或等于 n 的非负整数中，其二进制表示不包含 <strong>连续的1</strong> 的个数。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: 5</span><br><span class="line">输出: 5</span><br><span class="line">解释: </span><br><span class="line">下面是带有相应二进制表示的非负整数&lt;= 5：</span><br><span class="line">0 : 0</span><br><span class="line">1 : 1</span><br><span class="line">2 : 10</span><br><span class="line">3 : 11</span><br><span class="line">4 : 100</span><br><span class="line">5 : 101</span><br><span class="line">其中，只有整数3违反规则（有两个连续的1），其他5个满足规则。</span><br></pre></td></tr></table></figure>

<p><strong>说明:</strong> 1 &lt;= n &lt;= 109</p>
<p>解答：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findIntegers</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//根据构建斐波那也数列</span></span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">32</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;  i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">            dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        String numStr = getBinary(num);</span><br><span class="line">        <span class="comment">//一位位移动，不连续遇到1加上它</span></span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numStr.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(numStr.charAt(i) == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            res  += dp[numStr.length() - i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(i != <span class="number">0</span> &amp;&amp; numStr.charAt(i - <span class="number">1</span> ) == <span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//整数 转 二进制数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getBinary</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">while</span>(num &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            sb.insert(<span class="number">0</span>,num &amp; <span class="number">1</span>);</span><br><span class="line">            num &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h4 id="678-有效的括号字符串"><a href="#678-有效的括号字符串" class="headerlink" title="678. 有效的括号字符串"></a><a href="https://leetcode-cn.com/problems/valid-parenthesis-string/">678. 有效的括号字符串</a></h4><p>给定一个只包含三种字符的字符串：<code>（ </code>，<code>）</code> 和 <code>*</code>，写一个函数来检验这个字符串是否为有效字符串。有效字符串具有如下规则：</p>
<ol>
<li>任何左括号 <code>(</code> 必须有相应的右括号 <code>)</code>。</li>
<li>任何右括号 <code>)</code> 必须有相应的左括号 <code>(</code> 。</li>
<li>左括号 <code>(</code> 必须在对应的右括号之前 <code>)</code>。</li>
<li><code>*</code> 可以被视为单个右括号 <code>)</code> ，或单个左括号 <code>(</code> ，或一个空字符串。</li>
<li>一个空字符串也被视为有效字符串。</li>
</ol>
<p><strong>示例 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: &quot;()&quot;</span><br><span class="line">输出: True</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: &quot;(*)&quot;</span><br><span class="line">输出: True</span><br></pre></td></tr></table></figure>

<p><strong>示例 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: &quot;(*))&quot;</span><br><span class="line">输出: True</span><br></pre></td></tr></table></figure>

<p>解答：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkValidString</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// l: 左括号最少可能有多少个</span></span><br><span class="line">        <span class="comment">// r: 左括号最多可能有多少个</span></span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : s.toCharArray()) &#123;</span><br><span class="line">            <span class="comment">// 遇到&#x27;(&#x27;所有可能性加一</span></span><br><span class="line">            <span class="comment">// 遇到&#x27;)&#x27;所有可能性减一</span></span><br><span class="line">            <span class="comment">// 遇到&#x27;*&#x27;，最少的可能性可以变少，最多的可能性也同样可以变多，这取决于这个星号最终我们看成什么，但是可能性都在</span></span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                l++; r++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">                l--; r--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                l--; r++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 当前左括号最少个数不能为负</span></span><br><span class="line">            l = Math.max(l, <span class="number">0</span>);</span><br><span class="line">            <span class="comment">// 这种情况其实发生在r本身是负数的时候，也就是我们常见的右括号太多了</span></span><br><span class="line">            <span class="keyword">if</span> (l &gt; r) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 能取到0个左括号才是满足平衡的</span></span><br><span class="line">        <span class="keyword">return</span> l == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>刷题</category>
      </categories>
  </entry>
  <entry>
    <title>哈希表</title>
    <url>/2022/01/03/%E5%88%B7%E9%A2%98/%E5%93%88%E5%B8%8C%E8%A1%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="447-回旋镖的数量"><a href="#447-回旋镖的数量" class="headerlink" title="447. 回旋镖的数量"></a><a href="https://leetcode-cn.com/problems/number-of-boomerangs/">447. 回旋镖的数量</a></h4><p>给定平面上 <code>n</code> 对 <strong>互不相同</strong> 的点 <code>points</code> ，其中 <code>points[i] = [xi, yi]</code> 。<strong>回旋镖</strong> 是由点 <code>(i, j, k)</code> 表示的元组 ，其中 <code>i</code> 和 <code>j</code> 之间的距离和 <code>i</code> 和 <code>k</code> 之间的距离相等（<strong>需要考虑元组的顺序</strong>）。</p>
<p>返回平面上所有回旋镖的数量。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：points = [[0,0],[1,0],[2,0]]</span><br><span class="line">输出：2</span><br><span class="line">解释：两个回旋镖为 [[1,0],[0,0],[2,0]] 和 [[1,0],[2,0],[0,0]]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：points = [[1,1],[2,2],[3,3]]</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：points = [[1,1]]</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure>

<p>解答：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 考虑数组顺序，可以用排列组合的方式,枚举一个个算距离，存储距离相同的点的个数放入哈希表中，最后取出哈希表中的数据，一个个排列组合</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numberOfBoomerangs</span><span class="params">(<span class="keyword">int</span>[][] points)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> [] p:points) &#123;</span><br><span class="line">            Map&lt;Integer, Integer&gt; cnt = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span>[] q : points) &#123;</span><br><span class="line">                <span class="keyword">int</span> dis = ((p[<span class="number">0</span>] - q[<span class="number">0</span>])) * (p[<span class="number">0</span>] - q[<span class="number">0</span>]) + (p[<span class="number">1</span>] - q[<span class="number">1</span>]) * (p[<span class="number">1</span>] -  q[<span class="number">1</span>]);</span><br><span class="line">                cnt.put(dis, cnt.getOrDefault(dis, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(Map.Entry&lt;Integer, Integer&gt; entry : cnt.entrySet()) &#123;</span><br><span class="line">                <span class="keyword">int</span> m = entry.getValue();</span><br><span class="line">                ans += m * (m-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="260-只出现一次的数字-III"><a href="#260-只出现一次的数字-III" class="headerlink" title="260. 只出现一次的数字 III"></a><a href="https://leetcode-cn.com/problems/single-number-iii/">260. 只出现一次的数字 III</a></h4><p>难度中等490收藏分享切换为英文接收动态反馈</p>
<p>给定一个整数数组 <code>nums</code>，其中恰好有两个元素只出现一次，其余所有元素均出现两次。 找出只出现一次的那两个元素。你可以按 <strong>任意顺序</strong> 返回答案。</p>
<p><strong>进阶：</strong>你的算法应该具有线性时间复杂度。你能否仅使用常数空间复杂度来实现？</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,2,1,3,2,5]</span><br><span class="line">输出：[3,5]</span><br><span class="line">解释：[5, 3] 也是有效的答案。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [-1,0]</span><br><span class="line">输出：[-1,0]</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [0,1]</span><br><span class="line">输出：[1,0]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>2 &lt;= nums.length &lt;= 3 * 104</code></li>
<li><code>-231 &lt;= nums[i] &lt;= 231 - 1</code></li>
<li>除两个只出现一次的整数外，<code>nums</code> 中的其他数字都出现两次</li>
</ul>
<p><strong>思路：</strong>建一个hashmap 把它每个算出来是多少然后遍历出来。</p>
<p><strong>解答：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] singleNumber(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">int</span> [] ans = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i &lt;nums.length; i++ ) &#123;</span><br><span class="line">            map.put(nums[i], map.getOrDefault(nums[i], <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i &lt;nums.length; i++ ) &#123;</span><br><span class="line">            <span class="keyword">if</span>(map.get(nums[i]) == <span class="number">1</span>) ans[index++] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="299-猜数字游戏"><a href="#299-猜数字游戏" class="headerlink" title="299. 猜数字游戏"></a><a href="https://leetcode-cn.com/problems/bulls-and-cows/">299. 猜数字游戏</a></h4><p>难度中等164</p>
<p>你在和朋友一起玩 <a href="https://baike.baidu.com/item/%E7%8C%9C%E6%95%B0%E5%AD%97/83200?fromtitle=Bulls+and+Cows&fromid=12003488&fr=aladdin">猜数字（Bulls and Cows）</a>游戏，该游戏规则如下：</p>
<p>写出一个秘密数字，并请朋友猜这个数字是多少。朋友每猜测一次，你就会给他一个包含下述信息的提示：</p>
<ul>
<li>猜测数字中有多少位属于数字和确切位置都猜对了（称为 “Bulls”, 公牛），</li>
<li>有多少位属于数字猜对了但是位置不对（称为 “Cows”, 奶牛）。也就是说，这次猜测中有多少位非公牛数字可以通过重新排列转换成公牛数字。</li>
</ul>
<p>给你一个秘密数字 <code>secret</code> 和朋友猜测的数字 <code>guess</code> ，请你返回对朋友这次猜测的提示。</p>
<p>提示的格式为 <code>&quot;xAyB&quot;</code> ，<code>x</code> 是公牛个数， <code>y</code> 是奶牛个数，<code>A</code> 表示公牛，<code>B</code> 表示奶牛。</p>
<p>请注意秘密数字和朋友猜测的数字都可能含有重复数字。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: secret = &quot;1807&quot;, guess = &quot;7810&quot;</span><br><span class="line">输出: &quot;1A3B&quot;</span><br><span class="line">解释: 数字和位置都对（公牛）用 &#x27;|&#x27; 连接，数字猜对位置不对（奶牛）的采用斜体加粗标识。</span><br><span class="line">&quot;1807&quot;</span><br><span class="line">  |</span><br><span class="line">&quot;7810&quot;</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: secret = &quot;1123&quot;, guess = &quot;0111&quot;</span><br><span class="line">输出: &quot;1A1B&quot;</span><br><span class="line">解释: 数字和位置都对（公牛）用 &#x27;|&#x27; 连接，数字猜对位置不对（奶牛）的采用斜体加粗标识。</span><br><span class="line">&quot;1123&quot;        &quot;1123&quot;</span><br><span class="line">  |      or     |</span><br><span class="line">&quot;0111&quot;        &quot;0111&quot;</span><br><span class="line">注意，两个不匹配的 1 中，只有一个会算作奶牛（数字猜对位置不对）。通过重新排列非公牛数字，其中仅有一个 1 可以成为公牛数字。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：secret = &quot;1&quot;, guess = &quot;0&quot;</span><br><span class="line">输出：&quot;0A0B&quot;</span><br></pre></td></tr></table></figure>

<p><strong>示例 4：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：secret = &quot;1&quot;, guess = &quot;1&quot;</span><br><span class="line">输出：&quot;1A0B&quot;</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= secret.length, guess.length &lt;= 1000</code></li>
<li><code>secret.length == guess.length</code></li>
<li><code>secret</code> 和 <code>guess</code> 仅由数字组成</li>
</ul>
<p><strong>思路：</strong></p>
<ul>
<li>数字位置都对的  +1</li>
<li>数字对位置不对的 哈希表存起来 +1</li>
<li>对比 哈希表中的数字，取小的</li>
</ul>
<p><strong>解答：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHint</span><span class="params">(String secret, String guess)</span> </span>&#123;</span><br><span class="line">        Map &lt;Character, Integer&gt; secret_map= <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Map &lt;Character, Integer&gt; guess_map= <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> bull=<span class="number">0</span>, cow=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;secret.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(secret.charAt(i) == guess.charAt(i)) &#123;</span><br><span class="line">                bull++;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                secret_map.put(secret.charAt(i), secret_map.getOrDefault(secret.charAt(i), <span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">                guess_map.put(guess.charAt(i), guess_map.getOrDefault(guess.charAt(i), <span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> k : secret_map.keySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (guess_map.containsKey(k)) cow = cow + Math.min(secret_map.get(k), guess_map.get(k));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bull+<span class="string">&quot;A&quot;</span>+cow+<span class="string">&quot;B&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>刷题</category>
      </categories>
  </entry>
  <entry>
    <title>字符串</title>
    <url>/2022/01/03/%E5%88%B7%E9%A2%98/%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="68-文本左右对齐"><a href="#68-文本左右对齐" class="headerlink" title="68. 文本左右对齐"></a><a href="https://leetcode-cn.com/problems/text-justification/">68. 文本左右对齐</a></h4><p>给定一个单词数组和一个长度 <em>maxWidth</em>，重新排版单词，使其成为每行恰好有 <em>maxWidth</em> 个字符，且左右两端对齐的文本。</p>
<p>你应该使用“贪心算法”来放置给定的单词；也就是说，尽可能多地往每行中放置单词。必要时可用空格 <code>&#39; &#39;</code> 填充，使得每行恰好有 <em>maxWidth</em> 个字符。</p>
<p>要求尽可能均匀分配单词间的空格数量。如果某一行单词间的空格不能均匀分配，则左侧放置的空格数要多于右侧的空格数。</p>
<p>文本的最后一行应为左对齐，且单词之间不插入<strong>额外的</strong>空格。</p>
<p><strong>说明:</strong></p>
<ul>
<li>单词是指由非空格字符组成的字符序列。</li>
<li>每个单词的长度大于 0，小于等于 <em>maxWidth</em>。</li>
<li>输入单词数组 <code>words</code> 至少包含一个单词。</li>
</ul>
<p><strong>示例:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line">words = [&quot;This&quot;, &quot;is&quot;, &quot;an&quot;, &quot;example&quot;, &quot;of&quot;, &quot;text&quot;, &quot;justification.&quot;]</span><br><span class="line">maxWidth = 16</span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">   &quot;This    is    an&quot;,</span><br><span class="line">   &quot;example  of text&quot;,</span><br><span class="line">   &quot;justification.  &quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line">words = [&quot;What&quot;,&quot;must&quot;,&quot;be&quot;,&quot;acknowledgment&quot;,&quot;shall&quot;,&quot;be&quot;]</span><br><span class="line">maxWidth = 16</span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">  &quot;What   must   be&quot;,</span><br><span class="line">  &quot;acknowledgment  &quot;,</span><br><span class="line">  &quot;shall be        &quot;</span><br><span class="line">]</span><br><span class="line">解释: 注意最后一行的格式应为 &quot;shall be    &quot; 而不是 &quot;shall     be&quot;,</span><br><span class="line">     因为最后一行应为左对齐，而不是左右两端对齐。       </span><br><span class="line">     第二行同样为左对齐，这是因为这行只包含一个单词。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line">words = [&quot;Science&quot;,&quot;is&quot;,&quot;what&quot;,&quot;we&quot;,&quot;understand&quot;,&quot;well&quot;,&quot;enough&quot;,&quot;to&quot;,&quot;explain&quot;,</span><br><span class="line">         &quot;to&quot;,&quot;a&quot;,&quot;computer.&quot;,&quot;Art&quot;,&quot;is&quot;,&quot;everything&quot;,&quot;else&quot;,&quot;we&quot;,&quot;do&quot;]</span><br><span class="line">maxWidth = 20</span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">  &quot;Science  is  what we&quot;,</span><br><span class="line">  &quot;understand      well&quot;,</span><br><span class="line">  &quot;enough to explain to&quot;,</span><br><span class="line">  &quot;a  computer.  Art is&quot;,</span><br><span class="line">  &quot;everything  else  we&quot;,</span><br><span class="line">  &quot;do                  &quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<p>解答：分三种情况一种是一个单词一行、普通情况、最后一行；每个写成一个 函数，返回String，主函数ArrayList.append();算出每行还剩多少空格在进行分配。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">fullJustify</span><span class="params">(String[] words, <span class="keyword">int</span> maxWidth)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; resultList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; words.length; i++) &#123;</span><br><span class="line">            count += words[i].length();</span><br><span class="line">            <span class="keyword">if</span>(count &gt; maxWidth) &#123;</span><br><span class="line">                resultList.add(helper(words, start, i - <span class="number">1</span>, maxWidth));</span><br><span class="line">                start = i ;</span><br><span class="line">                count =  words[i].length();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//单词结束后的空格</span></span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//处理最后一截</span></span><br><span class="line">        resultList.add(helper(words,start,words.length-<span class="number">1</span>,maxWidth));</span><br><span class="line">        <span class="keyword">return</span> resultList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">helper</span><span class="params">(String[] words, <span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">int</span> maxWidth)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">if</span>(start == end) &#123;</span><br><span class="line">            <span class="comment">// 一行只有一个单词</span></span><br><span class="line">            oneWordOneRow(words,start,maxWidth,sb);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(end == words.length-<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//最后一行</span></span><br><span class="line">            lastRow(words,start,end,maxWidth,sb);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            normal(words,start,end,maxWidth,sb);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">oneWordOneRow</span><span class="params">(String[] words, <span class="keyword">int</span> start, <span class="keyword">int</span> maxWidth, StringBuilder sb)</span> </span>&#123;</span><br><span class="line">        sb.append(words[start]);</span><br><span class="line">        <span class="keyword">int</span> num = maxWidth - words[start].length();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">            sb.append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">lastRow</span><span class="params">(String[] words, <span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">int</span> maxWidth, StringBuilder sb)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = start; i&lt;=end; i++) &#123;</span><br><span class="line">            sb.append(words[i]);</span><br><span class="line">            <span class="keyword">if</span>(i != end) &#123;</span><br><span class="line">                sb.append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> num = maxWidth - sb.length();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; num; j++) &#123;</span><br><span class="line">                    sb.append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">normal</span><span class="params">(String[] words, <span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">int</span> maxWidth, StringBuilder sb)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> wordsLength = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = start; i &lt;= end; i++) &#123;</span><br><span class="line">            wordsLength += words[i].length();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> seperate =  (maxWidth -wordsLength) / (end - start);</span><br><span class="line">        <span class="keyword">int</span> remain = (maxWidth -wordsLength) % (end - start);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = start;i&lt;=end;i++) &#123;</span><br><span class="line">            sb.append(words[i]);</span><br><span class="line">            <span class="keyword">if</span>(i != end) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j &lt; seperate; j++) &#123;</span><br><span class="line">                    sb.append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(remain-- &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    sb.append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-无重复字符的最长子串"><a href="#3-无重复字符的最长子串" class="headerlink" title="3. 无重复字符的最长子串"></a><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/">3. 无重复字符的最长子串</a></h4><p>难度中等6301</p>
<p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;abcabcbb&quot;</span><br><span class="line">输出: 3 </span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;bbbbb&quot;</span><br><span class="line">输出: 1</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;pwwkew&quot;</span><br><span class="line">输出: 3</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。</span><br><span class="line">     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。</span><br></pre></td></tr></table></figure>

<p><strong>示例 4:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;&quot;</span><br><span class="line">输出: 0</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>0 &lt;= s.length &lt;= 5 * 104</code></li>
<li><code>s</code> 由英文字母、数字、符号和空格组成</li>
</ul>
<p><strong>思路：</strong></p>
<ul>
<li>不同的 圈起来，逐步右移，</li>
<li>出现相同的，最左边位置就变成相同的中下标最大的地方，这样可以避免重复</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// if (s.length()==0) return 0;</span></span><br><span class="line">        <span class="comment">// HashMap&lt;Character, Integer&gt; map = new HashMap&lt;Character, Integer&gt;();</span></span><br><span class="line">        <span class="comment">// int max = 0;</span></span><br><span class="line">        <span class="comment">// int left = 0;</span></span><br><span class="line">        <span class="comment">// for(int i = 0; i &lt; s.length(); i ++)&#123;</span></span><br><span class="line">        <span class="comment">//     if(map.containsKey(s.charAt(i)))&#123;</span></span><br><span class="line">        <span class="comment">//         left = Math.max(left,map.get(s.charAt(i)) + 1);</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">//     map.put(s.charAt(i),i);</span></span><br><span class="line">        <span class="comment">//     max = Math.max(max,i-left+1);</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// return max;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (s.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        HashMap&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Character, Integer&gt;();</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>, left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(s.charAt(i))) &#123;</span><br><span class="line">                left = Math.max(left, map.get(s.charAt(i)) + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(s.charAt(i), i);</span><br><span class="line">            max = Math.max(max, i-left+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="500-键盘行"><a href="#500-键盘行" class="headerlink" title="500. 键盘行"></a><a href="https://leetcode-cn.com/problems/keyboard-row/">500. 键盘行</a></h4><p>难度简单164</p>
<p>给你一个字符串数组 <code>words</code> ，只返回可以使用在 <strong>美式键盘</strong> 同一行的字母打印出来的单词。键盘如下图所示。</p>
<p><strong>美式键盘</strong> 中：</p>
<ul>
<li>第一行由字符 <code>&quot;qwertyuiop&quot;</code> 组成。</li>
<li>第二行由字符 <code>&quot;asdfghjkl&quot;</code> 组成。</li>
<li>第三行由字符 <code>&quot;zxcvbnm&quot;</code> 组成。</li>
</ul>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/keyboard.png" alt="American keyboard"></p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：words = [&quot;Hello&quot;,&quot;Alaska&quot;,&quot;Dad&quot;,&quot;Peace&quot;]</span><br><span class="line">输出：[&quot;Alaska&quot;,&quot;Dad&quot;]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：words = [&quot;omk&quot;]</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：words = [&quot;adsdf&quot;,&quot;sfd&quot;]</span><br><span class="line">输出：[&quot;adsdf&quot;,&quot;sfd&quot;]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= words.length &lt;= 20</code></li>
<li><code>1 &lt;= words[i].length &lt;= 100</code></li>
<li><code>words[i]</code> 由英文字母（小写和大写字母）组成</li>
</ul>
<p><strong>思路：</strong></p>
<ul>
<li>大小写的处理：全部存入String遍历</li>
<li>返回字符串数组 的构造： List<String> ans = new ArrayList&lt;&gt;(); 返回String需要对其进行重新构造ans.toArray(new String[ans.size()]);</li>
<li>字符串的s.contains()使用：最后+“”，使其变成字符串</li>
<li></li>
</ul>
<p><strong>解答：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String[] findWords(String[] words) &#123;</span><br><span class="line">        List&lt;String&gt; ans = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        String[] ss = <span class="keyword">new</span> String[] &#123;<span class="string">&quot;qwertyuiopQWERTYUIOP&quot;</span>, <span class="string">&quot;asdfghjklASDFGHJKL&quot;</span>, <span class="string">&quot;zxcvbnmZXCVBNM&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(String word : words) &#123;</span><br><span class="line">            <span class="keyword">int</span> n1 = <span class="number">0</span>, n2 = <span class="number">0</span>, n3 = <span class="number">0</span>, leng = word.length();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; leng; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(ss[<span class="number">0</span>].contains(word.charAt(i)+<span class="string">&quot;&quot;</span>)) n1++;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(ss[<span class="number">1</span>].contains(word.charAt(i)+<span class="string">&quot;&quot;</span>)) n2++;</span><br><span class="line">                <span class="keyword">else</span> n3++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(n1 == leng || n2 == leng || n3 == leng) ans.add(word);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans.toArray(<span class="keyword">new</span> String[ans.size()]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>刷题</category>
      </categories>
  </entry>
  <entry>
    <title>数组</title>
    <url>/2022/01/03/%E5%88%B7%E9%A2%98/%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="704-二分查找"><a href="#704-二分查找" class="headerlink" title="704. 二分查找"></a><a href="https://leetcode-cn.com/problems/binary-search/">704. 二分查找</a></h4><p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p>
<p>示例 1:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: nums = [-1,0,3,5,9,12], target = 9</span><br><span class="line">输出: 4</span><br><span class="line">解释: 9 出现在 nums 中并且下标为 4</span><br></pre></td></tr></table></figure>

<p>示例 2:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: nums = [-1,0,3,5,9,12], target = 2</span><br><span class="line">输出: -1</span><br><span class="line">解释: 2 不存在 nums 中因此返回 -1</span><br></pre></td></tr></table></figure>

<p><strong>解答：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 循环判断左右指针是否走到一起，判断中间值大于还是小于目标值，等于则返回否则，重新复制左右指针，继续循环。</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>,right = nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid=left+(right-left)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target) &#123;</span><br><span class="line">                right = mid-<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="495-提莫攻击"><a href="#495-提莫攻击" class="headerlink" title="495. 提莫攻击"></a><a href="https://leetcode-cn.com/problems/teemo-attacking/">495. 提莫攻击</a></h4><p>难度简单184</p>
<p>在《英雄联盟》的世界中，有一个叫 “提莫” 的英雄。他的攻击可以让敌方英雄艾希（编者注：寒冰射手）进入中毒状态。</p>
<p>当提莫攻击艾希，艾希的中毒状态正好持续 <code>duration</code> 秒。</p>
<p>正式地讲，提莫在 <code>t</code> 发起发起攻击意味着艾希在时间区间 <code>[t, t + duration - 1]</code>（含 <code>t</code> 和 <code>t + duration - 1</code>）处于中毒状态。如果提莫在中毒影响结束 <strong>前</strong> 再次攻击，中毒状态计时器将会 <strong>重置</strong> ，在新的攻击之后，中毒影响将会在 <code>duration</code> 秒后结束。</p>
<p>给你一个 <strong>非递减</strong> 的整数数组 <code>timeSeries</code> ，其中 <code>timeSeries[i]</code> 表示提莫在 <code>timeSeries[i]</code> 秒时对艾希发起攻击，以及一个表示中毒持续时间的整数 <code>duration</code> 。</p>
<p>返回艾希处于中毒状态的 <strong>总</strong> 秒数。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：timeSeries = [1,4], duration = 2</span><br><span class="line">输出：4</span><br><span class="line">解释：提莫攻击对艾希的影响如下：</span><br><span class="line">- 第 1 秒，提莫攻击艾希并使其立即中毒。中毒状态会维持 2 秒，即第 1 秒和第 2 秒。</span><br><span class="line">- 第 4 秒，提莫再次攻击艾希，艾希中毒状态又持续 2 秒，即第 4 秒和第 5 秒。</span><br><span class="line">艾希在第 1、2、4、5 秒处于中毒状态，所以总中毒秒数是 4 。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：timeSeries = [1,2], duration = 2</span><br><span class="line">输出：3</span><br><span class="line">解释：提莫攻击对艾希的影响如下：</span><br><span class="line">- 第 1 秒，提莫攻击艾希并使其立即中毒。中毒状态会维持 2 秒，即第 1 秒和第 2 秒。</span><br><span class="line">- 第 2 秒，提莫再次攻击艾希，并重置中毒计时器，艾希中毒状态需要持续 2 秒，即第 2 秒和第 3 秒。</span><br><span class="line">艾希在第 1、2、3 秒处于中毒状态，所以总中毒秒数是 3 。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= timeSeries.length &lt;= 104</code></li>
<li><code>0 &lt;= timeSeries[i], duration &lt;= 107</code></li>
<li><code>timeSeries</code> 按 <strong>非递减</strong> 顺序排列</li>
</ul>
<p><strong>思路：</strong>抛开惯性思维，不要本能 想着 从前往后 看，可以从后往前看，最后一个单独处理。</p>
<p><strong>解答：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findPoisonedDuration</span><span class="params">(<span class="keyword">int</span>[] timeSeries, <span class="keyword">int</span> duration)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lastTime = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; timeSeries.length; i++) &#123;</span><br><span class="line">            ans += Math.min(timeSeries[i]-timeSeries[i-<span class="number">1</span>], duration);</span><br><span class="line">        &#125;</span><br><span class="line">        ans += duration;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="46-全排列"><a href="#46-全排列" class="headerlink" title="46. 全排列"></a><a href="https://leetcode-cn.com/problems/permutations/">46. 全排列</a></h4><p>难度中等1653</p>
<p>给定一个不含重复数字的数组 <code>nums</code> ，返回其 <strong>所有可能的全排列</strong> 。你可以 <strong>按任意顺序</strong> 返回答案。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,2,3]</span><br><span class="line">输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [0,1]</span><br><span class="line">输出：[[0,1],[1,0]]</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1]</span><br><span class="line">输出：[[1]]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 6</code></li>
<li><code>-10 &lt;= nums[i] &lt;= 10</code></li>
<li><code>nums</code> 中的所有整数 <strong>互不相同</strong></li>
</ul>
<p><strong>思路：</strong>每次for没 执行完就继续dfs了，return回来之后，后面的就是没有执行的数放进去，接着遍历，然后不断重复回到根节点之时，就是遍历完成之时。</p>
<p><strong>解答：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permute(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="keyword">if</span>(len == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span>[] used = <span class="keyword">new</span> <span class="keyword">boolean</span>[len];</span><br><span class="line">        List&lt;Integer&gt; path = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        dfs(nums, len,<span class="number">0</span>,path, used,res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> len, <span class="keyword">int</span> depth,</span></span></span><br><span class="line"><span class="params"><span class="function">                List&lt;Integer&gt; path, <span class="keyword">boolean</span>[] used,</span></span></span><br><span class="line"><span class="params"><span class="function">                List&lt;List&lt;Integer&gt;&gt; res)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (depth == len) &#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!used[i]) &#123;</span><br><span class="line">                path.add(nums[i]);</span><br><span class="line">                used[i]=<span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">                dfs(nums, len, depth+<span class="number">1</span>, path, used, res);</span><br><span class="line">                used[i]=<span class="keyword">false</span>;</span><br><span class="line">                path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="47-全排列-II"><a href="#47-全排列-II" class="headerlink" title="47. 全排列 II"></a><a href="https://leetcode-cn.com/problems/permutations-ii/">47. 全排列 II</a></h4><p>难度中等870</p>
<p>给定一个可包含重复数字的序列 <code>nums</code> ，<strong>按任意顺序</strong> 返回所有不重复的全排列。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,1,2]</span><br><span class="line">输出：</span><br><span class="line">[[1,1,2],</span><br><span class="line"> [1,2,1],</span><br><span class="line"> [2,1,1]]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,2,3]</span><br><span class="line">输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 8</code></li>
<li><code>-10 &lt;= nums[i] &lt;= 10</code></li>
</ul>
<p><strong>思路：</strong>对数组进行排序，当前与前一个的根节点相同时，跳过这一次遍历</p>
<p><strong>解答：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permuteUnique(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="keyword">if</span>(len == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span>[] used = <span class="keyword">new</span> <span class="keyword">boolean</span>[len];</span><br><span class="line">        List&lt;Integer&gt; path = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line"></span><br><span class="line">        dfs(nums, len,<span class="number">0</span>,path, used,res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> len, <span class="keyword">int</span> depth,</span></span></span><br><span class="line"><span class="params"><span class="function">                List&lt;Integer&gt; path, <span class="keyword">boolean</span>[] used,</span></span></span><br><span class="line"><span class="params"><span class="function">                List&lt;List&lt;Integer&gt;&gt; res)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (depth == len) &#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(used[i]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">// used[i-1] == false保证前一个根节点，刚撤销选择</span></span><br><span class="line">            <span class="comment">// i&gt;0保证第二位开始</span></span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span> &amp;&amp; nums[i] == nums[i-<span class="number">1</span>] &amp;&amp; used[i-<span class="number">1</span>] == <span class="keyword">false</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            path.add(nums[i]);</span><br><span class="line">            used[i]=<span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">            dfs(nums, len, depth+<span class="number">1</span>, path, used, res);</span><br><span class="line">            used[i]=<span class="keyword">false</span>;</span><br><span class="line">            path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>刷题</category>
      </categories>
  </entry>
  <entry>
    <title>矩阵</title>
    <url>/2022/01/03/%E5%88%B7%E9%A2%98/%E7%9F%A9%E9%98%B5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="48-旋转图像"><a href="#48-旋转图像" class="headerlink" title="48. 旋转图像"></a><a href="https://leetcode-cn.com/problems/rotate-image/">48. 旋转图像</a></h4><p>难度中等1064</p>
<p>给定一个 <em>n</em> × <em>n</em> 的二维矩阵 <code>matrix</code> 表示一个图像。请你将图像顺时针旋转 90 度。</p>
<p>你必须在**<a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95"> 原地</a>** 旋转图像，这意味着你需要直接修改输入的二维矩阵。<strong>请不要</strong> 使用另一个矩阵来旋转图像。</p>
<p><strong>示例 1：</strong></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/mat1.jpg" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]</span><br><span class="line">输出：[[7,4,1],[8,5,2],[9,6,3]]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/mat2.jpg" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]</span><br><span class="line">输出：[[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：matrix = [[1]]</span><br><span class="line">输出：[[1]]</span><br></pre></td></tr></table></figure>

<p><strong>示例 4：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：matrix = [[1,2],[3,4]]</span><br><span class="line">输出：[[3,1],[4,2]]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>matrix.length == n</code></li>
<li><code>matrix[i].length == n</code></li>
<li><code>1 &lt;= n &lt;= 20</code></li>
<li><code>-1000 &lt;= matrix[i][j] &lt;= 1000</code></li>
</ul>
<p><strong>思路：</strong>先转置，后中心轴对称，<strong>巧</strong></p>
<p><strong>解答：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp=<span class="number">0</span>,left=<span class="number">0</span>,right=matrix.length-<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 转置</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;matrix.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i; j&lt; matrix.length; j++) &#123;</span><br><span class="line">                tmp=matrix[i][j];</span><br><span class="line">                matrix[i][j] = matrix[j][i];</span><br><span class="line">                matrix[j][i] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 中间轴对称</span></span><br><span class="line">        <span class="keyword">while</span>(left&lt;right) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;matrix.length; i++) &#123;</span><br><span class="line">                tmp=matrix[i][left];</span><br><span class="line">                matrix[i][left]=matrix[i][right];</span><br><span class="line">                matrix[i][right]=tmp;</span><br><span class="line">            &#125;</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>刷题</category>
      </categories>
  </entry>
  <entry>
    <title>经典题</title>
    <url>/2022/01/03/%E5%88%B7%E9%A2%98/%E7%BB%8F%E5%85%B8%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="数字-n-代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且-有效的-括号组合。"><a href="#数字-n-代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且-有效的-括号组合。" class="headerlink" title="数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。"></a>数字 <code>n</code> 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 <strong>有效的</strong> 括号组合。</h3><p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 3</span><br><span class="line">输出：[&quot;((()))&quot;,&quot;(()())&quot;,&quot;(())()&quot;,&quot;()(())&quot;,&quot;()()()&quot;]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 1</span><br><span class="line">输出：[&quot;()&quot;]</span><br></pre></td></tr></table></figure>

<p><strong>题解：</strong>暴力递归</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">generateParenthesis</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; combinations = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        generateAll(<span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">2</span>*n], <span class="number">0</span>, combinations);</span><br><span class="line">        <span class="keyword">return</span> combinations;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generateAll</span><span class="params">(<span class="keyword">char</span>[] current, <span class="keyword">int</span> pos, List&lt;String&gt; result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pos == current.length) &#123;</span><br><span class="line">            <span class="keyword">if</span> (valid(current)) &#123;</span><br><span class="line">                result.add(<span class="keyword">new</span> String(current));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            current[pos]=<span class="string">&#x27;(&#x27;</span>;</span><br><span class="line">            generateAll(current, pos+<span class="number">1</span>, result);</span><br><span class="line">            current[pos]=<span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">            generateAll(current, pos+<span class="number">1</span>, result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">valid</span><span class="params">(<span class="keyword">char</span>[] current)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> balance = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : current ) &#123;</span><br><span class="line">            <span class="keyword">if</span>(c == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                balance++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                balance--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (balance &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> balance == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<hr>
<h3 id="169-多数元素"><a href="#169-多数元素" class="headerlink" title="169. 多数元素"></a><a href="https://leetcode-cn.com/problems/majority-element/">169. 多数元素</a></h3><p>给定一个大小为 <em>n</em> 的数组，找到其中的多数元素。多数元素是指在数组中出现次数 <strong>大于</strong> <code>⌊ n/2 ⌋</code> 的元素。</p>
<p>你可以假设数组是非空的，并且给定的数组总是存在多数元素。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：[3,2,3]</span><br><span class="line">输出：3</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：[2,2,1,1,1,2,2]</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure>

<p> 解法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 计算每个数出现的次数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Map&lt;Integer, Integer&gt; <span class="title">countNums</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        Map&lt;Integer,Integer&gt; counts = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num:nums) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!counts.containsKey(num)) counts.put(num,<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span> counts.put(num, counts.get(num)+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> counts;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 打擂台选出最大数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        Map&lt;Integer,Integer&gt; counts = countNums(nums);</span><br><span class="line">        Map.Entry&lt;Integer, Integer&gt; majorityEntry = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;Integer, Integer&gt; entry : counts.entrySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span>(majorityEntry == <span class="keyword">null</span> || entry.getValue() &gt; majorityEntry.getValue()) majorityEntry = entry;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> majorityEntry.getKey();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>链表</title>
    <url>/2022/01/03/%E5%88%B7%E9%A2%98/%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="NC78-反转链表"><a href="#NC78-反转链表" class="headerlink" title="NC78 反转链表"></a><a href="https://www.nowcoder.com/practice/75e878df47f24fdc9dc3e400ec6058ca?tpId=188&&tqId=38547&rp=1&ru=/activity/oj&qru=/ta/job-code-high-week/question-ranking">NC78 反转链表</a></h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>给定一个单链表的头结点pHead，长度为n，反转该链表后，返回新链表的表头。</p>
<p>数据范围： n\leq1000<em>n</em>≤1000</p>
<p>要求：空间复杂度 O(1)<em>O</em>(1) ，时间复杂度 O(n)<em>O</em>(<em>n</em>) 。</p>
<p>如当输入链表{1,2,3}时，</p>
<p>经反转后，原链表变为{3,2,1}，所以对应的输出为{3,2,1}。</p>
<p>以上转换过程如下图所示：</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/4A47A0DB6E60853DEDFCFDF08A5CA249.jpg" alt="img"></p>
<h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><p>输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;1,2,3&#125;</span><br></pre></td></tr></table></figure>

<p>返回值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;3,2,1&#125;</span><br></pre></td></tr></table></figure>

<p>复制</p>
<h2 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h2><p>输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>返回值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">空链表则输出空         </span><br></pre></td></tr></table></figure>

<h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><ul>
<li>利用next往head列表下一步走</li>
<li>利用pre来保存拼接信息</li>
</ul>
<h2 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">ReverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        ListNode pre = <span class="keyword">null</span>;</span><br><span class="line">        ListNode next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(head!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            next = head.next;</span><br><span class="line">            head.next = pre;</span><br><span class="line">            pre = head;</span><br><span class="line">            head = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20211226122019794.png" alt="image-20211226122019794"></p>
<h1 id="NC4-判断链表中是否有环"><a href="#NC4-判断链表中是否有环" class="headerlink" title="NC4 判断链表中是否有环"></a>NC4 判断链表中是否有环</h1><h2 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h2><p>判断给定的链表中是否有环。如果有环则返回true，否则返回false。</p>
<p>数据范围：链表长度 0 \le n \le 100000≤<em>n</em>≤10000，链表中任意节点的值满足 |val| &lt;= 100000∣<em>v<strong>a</strong>l</em>∣&lt;=100000</p>
<p>要求：空间复杂度 O(1)<em>O</em>(1)，时间复杂度 O(n)<em>O</em>(<em>n</em>)</p>
<p>输入分为2部分，第一部分为链表，第二部分代表是否有环，然后将组成的head头结点传入到函数里面。-1代表无环，其它的数字代表有环，这些参数解释仅仅是为了方便读者自测调试。实际在编程时读入的是链表的头节点。</p>
<p>例如输入{3,2,0,-4},1时，对应的链表结构如下图所示：</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/9A058E6590B998B9F7B637155842F993.jpg" alt="img"></p>
<p>可以看出环的入口结点为从头结点开始的第1个结点，所以输出true。</p>
<h2 id="示例1-1"><a href="#示例1-1" class="headerlink" title="示例1"></a>示例1</h2><p>输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;3,2,0,-4&#125;,1</span><br></pre></td></tr></table></figure>

<p>返回值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">true</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一部分&#123;3,2,0,-4&#125;代表一个链表，第二部分的1表示，-4到位置1，即-4-&gt;3存在一个链接，组成传入的head为一个带环的链表，返回true        </span><br></pre></td></tr></table></figure>

<h2 id="示例2-1"><a href="#示例2-1" class="headerlink" title="示例2"></a>示例2</h2><p>输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;1&#125;,-1</span><br></pre></td></tr></table></figure>

<p>返回值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">false</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一部分&#123;1&#125;代表一个链表，-1代表无环，组成传入head为一个无环的单链表，返回false        </span><br></pre></td></tr></table></figure>

<h2 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h2><p>输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;-1,-7,7,-4,19,6,-9,-5,-2,-5&#125;,6</span><br></pre></td></tr></table></figure>

<p>返回值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">true</span><br></pre></td></tr></table></figure>

<h2 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h2><ul>
<li>构建快慢指针</li>
<li>快的走两步，慢的走一步</li>
<li>判断每次只能判断当前与下一步的所指情况，否则容易出现越界的问题（null.next）</li>
</ul>
<h2 id="解答：-1"><a href="#解答：-1" class="headerlink" title="解答："></a>解答：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            <span class="keyword">if</span> (fast == slow) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>刷题</category>
      </categories>
  </entry>
  <entry>
    <title>python实现发送邮件</title>
    <url>/2021/05/24/%E5%B0%8F%E8%84%9A%E6%9C%AC/python%E5%AE%9E%E7%8E%B0%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="python实现发送邮件"><a href="#python实现发送邮件" class="headerlink" title="python实现发送邮件"></a>python实现发送邮件</h1><h3 id="申请STMP授权码"><a href="#申请STMP授权码" class="headerlink" title="申请STMP授权码"></a>申请STMP授权码</h3><ol>
<li>在QQ邮箱主界面里面开启POP/SMTP服务：设置-账户-开启pop/smtp服务</li>
</ol>
<p><img src="https://img.imgdb.cn/item/607a9dd78322e6675c8be16b.png" alt="img"></p>
<p><img src="https://img.imgdb.cn/item/607a9dd78322e6675c8be16f.png" alt="img"></p>
<p>2.点击开启pop/smtp服务后，会弹出验证密保，就是通过密保手机号，发送“配置邮件客户端”到1069 0700 69，（自己用手机弄一下就好了），用自己手机发送完后点击“我已发送”</p>
<p><img src="https://img.imgdb.cn/item/607a9dd78322e6675c8be179.png" alt="img"></p>
<p>3.点击“我已发送”后会弹出一个开启POP3/SMTP服务的授权码，这个授权码很重要，要记住这个授权码：授权码很重要，然后点击确定。</p>
<p><img src="https://img.imgdb.cn/item/607a9dd78322e6675c8be193.png" alt="img"></p>
<h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import smtplib</span><br><span class="line">from email.mime.text import MIMEText</span><br><span class="line">from email.utils import formataddr</span><br><span class="line"></span><br><span class="line">my_sender = &#x27;XXXXXXXXX@qq.com&#x27;  # 发件人邮箱账号</span><br><span class="line">my_pass = &#x27;XXXXXXXXXXXXXXXXX&#x27;  # 发件人SMTP授权码</span><br><span class="line">my_user = &#x27;XXXXXXXXX@qq.com&#x27;  # 收件人邮箱账号，我这边发送给自己</span><br><span class="line">msg = MIMEText(&#x27;出bug了&#x27;, &#x27;plain&#x27;, &#x27;utf-8&#x27;)</span><br><span class="line">msg[&#x27;From&#x27;] = formataddr([&quot;xxxxxx&quot;, my_sender])  # 括号里的对应发件人邮箱昵称、发件人邮箱账号</span><br><span class="line">msg[&#x27;To&#x27;] = formataddr([&quot;xxxxxx&quot;, my_user])  # 括号里的对应收件人邮箱昵称、收件人邮箱账号</span><br><span class="line">msg[&#x27;Subject&#x27;] = &quot;bug&quot;  # 邮件的主题，也可以说是标题</span><br><span class="line"></span><br><span class="line">server = smtplib.SMTP_SSL(&quot;smtp.qq.com&quot;, 465)  # 发件人邮箱中的SMTP服务器</span><br><span class="line">server.login(my_sender, my_pass)  # 括号中对应的是发件人邮箱账号、邮箱密码</span><br><span class="line">server.sendmail(my_sender, [my_user, ], msg.as_string())  # 括号中对应的是发件人邮箱账号、收件人邮箱账号、发送邮件</span><br><span class="line">server.quit()  # 关闭连接</span><br></pre></td></tr></table></figure>

<p>参考文献：<a href="https://blog.csdn.net/weixin_38166074/article/details/91350457?utm_term=qq%E9%82%AE%E7%AE%B1%E5%8F%91%E9%82%AE%E4%BB%B6api&utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~sobaiduweb~default-0-91350457&spm=3001.4430">java编写QQ邮箱发送邮件_调用QQ邮箱接口</a><br><a href="https://juejin.cn/post/6844903865083494408">Python3实现邮箱发送</a></p>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>图片压缩</title>
    <url>/2021/05/27/%E5%B0%8F%E8%84%9A%E6%9C%AC/%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="图片压缩"><a href="#图片压缩" class="headerlink" title="图片压缩"></a>图片压缩</h2><h3 id="导言"><a href="#导言" class="headerlink" title="导言"></a>导言</h3><div class="note info modern">
            <p>最近想做一个相册，图片需要上传到图床然后，调用图床链接进行相册图片显示。为实现图片快速加载，以及节约图床存储空间，写了一个实现图片压缩的小脚本。</p>
          </div>

<p>所用图床：<a href="https://imgtu.com/">路过图床</a></p>
<!-- 最近想做一个相册，图片需要上传到图床然后，调用图床链接进行相册图片显示。为实现图片快速加载，以及节约图床存储空间，写了一个实现图片压缩的小脚本 -->

<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tree 压缩图片</span></span><br><span class="line">|-- compress</span><br><span class="line">|-- compressPic.py</span><br><span class="line">|-- finish</span><br><span class="line">`-- prepare</span><br><span class="line">    |-- test</span><br><span class="line">    |   `-- IMG1.JPG</span><br><span class="line">    `-- test2</span><br><span class="line">        `-- IMG2.JPG</span><br></pre></td></tr></table></figure>

<h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time : 2021/5/25 14:54 </span></span><br><span class="line"><span class="comment"># @Author : SuperBear</span></span><br><span class="line"><span class="comment"># @File : compressPic.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> os, shutil</span><br><span class="line"></span><br><span class="line"><span class="comment"># 图片压缩批处理</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compressImage</span>(<span class="params">srcPath, dstPath</span>):</span></span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(srcPath):</span><br><span class="line">        <span class="comment"># 如果不存在目的目录则创建一个，保持层级结构</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(dstPath):</span><br><span class="line">            os.makedirs(dstPath)</span><br><span class="line">        <span class="comment"># 拼接完整的文件或文件夹路径</span></span><br><span class="line">        srcFile = os.path.join(srcPath, filename)</span><br><span class="line">        dstFile = os.path.join(dstPath, filename)</span><br><span class="line">        <span class="comment"># 如果是文件就处理</span></span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(srcFile):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 打开原图片缩小后保存，可以用if srcFile.endswith(&quot;.jpg&quot;)或者split，splitext等函数等针对特定文件压缩</span></span><br><span class="line">                sImg = Image.<span class="built_in">open</span>(srcFile)</span><br><span class="line">                w, h = sImg.size</span><br><span class="line">                dImg = sImg.resize((<span class="built_in">int</span>(w / <span class="number">1.5</span>), <span class="built_in">int</span>(h / <span class="number">1.5</span>)), Image.ANTIALIAS)  <span class="comment"># 设置压缩尺寸和选项，注意尺寸要用括号</span></span><br><span class="line">                dImg.save(dstFile)  <span class="comment"># 也可以用srcFile原路径保存,或者更改后缀保存，save这个函数后面可以加压缩编码选项JPEG之类的</span></span><br><span class="line">                <span class="built_in">print</span>(dstPath+ dstFile + <span class="string">&quot; 成功！&quot;</span>)</span><br><span class="line">            <span class="keyword">except</span> Exception:</span><br><span class="line">                <span class="built_in">print</span>(dstFile + <span class="string">&quot;失败！&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果是文件夹就递归</span></span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(srcFile):</span><br><span class="line">            <span class="comment"># print(srcFile)</span></span><br><span class="line">            compressImage(srcFile, dstFile)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 遍历压缩图片</span></span><br><span class="line">    compressImage(<span class="string">&quot;./prepare&quot;</span>, <span class="string">&quot;./compress&quot;</span>)</span><br><span class="line">    <span class="comment"># 移动文件夹prepare到finish</span></span><br><span class="line">    src_path = <span class="string">&#x27;./prepare/&#x27;</span></span><br><span class="line">    target_path = <span class="string">&#x27;./finish/&#x27;</span></span><br><span class="line">    file_list = os.listdir(src_path)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(file_list) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> file_list:</span><br><span class="line">            shutil.move(src_path + file, target_path + file)</span><br></pre></td></tr></table></figure>

<p>github源代码：<a href="https://github.com/sSsuper-Bear/compressPicture/tree/master">https://github.com/sSsuper-Bear/compressPicture/tree/master</a></p>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>Typora自动上传图片</title>
    <url>/2022/01/03/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/Typora%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Typora-图片自动上传服务器设置"><a href="#Typora-图片自动上传服务器设置" class="headerlink" title="Typora 图片自动上传服务器设置"></a>Typora 图片自动上传服务器设置</h1><ul>
<li>下载<a href="https://github.com/Molunerfinn/PicGo/releases">PicGo</a>（比较稳定建议使用）</li>
</ul>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/1972718-20200323210552751-1313111323.png" alt="img"></p>
<ul>
<li><p>找到底下插件设置，使用码云需要另外安装插件，搜索gitee安装插件，有两个插件都可以用</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20200323194553126.png" alt="image-20200323194553126"></p>
</li>
<li><p>建立gitee码云图床库，就是在码云新建一个仓库，步骤：</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20200323195546145.png" alt="image-20200323195546145"></p>
</li>
<li><p>token获取：进入码云，点击进入设置页</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20200323200633225.png" alt="image-20200323200847954"></p>
</li>
<li><p>在PicGo配置Gitee</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20220103171035455.png" alt="image-20220103171035455"></p>
</li>
<li><p>配置Typora，点击 文件，偏好设置，选择图像，设置PicGo二进制文件的路径</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20200323201738802.png" alt="image-20200323201738802"></p>
</li>
</ul>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><ul>
<li><a href="https://www.aliyisheng.blog/post/typora-%E5%9B%BE%E7%89%87%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AE%BE%E7%BD%AE/">https://www.aliyisheng.blog/post/typora-%E5%9B%BE%E7%89%87%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AE%BE%E7%BD%AE/</a></li>
<li><a href="https://www.cnblogs.com/qtzd/p/12554902.html">https://www.cnblogs.com/qtzd/p/12554902.html</a></li>
<li><a href="https://blog.csdn.net/weixin_41800884/article/details/104718367">https://blog.csdn.net/weixin_41800884/article/details/104718367</a></li>
</ul>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
  </entry>
  <entry>
    <title>添加git快捷方式</title>
    <url>/2021/12/26/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/%E6%B7%BB%E5%8A%A0git%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Git-右键添加Git-Bash"><a href="#Git-右键添加Git-Bash" class="headerlink" title="Git 右键添加Git Bash"></a>Git 右键添加Git Bash</h2><ol>
<li><strong>win + r</strong></li>
<li><strong>输入regedit</strong></li>
<li><strong>进入 计算机\HKEY_CLASSES_ROOT\Directory\Background\shell</strong></li>
<li><strong>新建如下的项 git bash 和 command</strong></li>
</ol>
<p><img src="https://pic.imgdb.cn/item/61c867322ab3f51d91d28270.jpg" alt="img"></p>
<ol start="5">
<li><strong>在git bash 中添加字符串值 Icon ，数值位于git 安装目录下\Git\mingw64\share\git\git-for-windows.ico</strong><img src="https://pic.imgdb.cn/item/61c8674a2ab3f51d91d289b4.jpg" alt="img"></li>
<li><strong>在command 中添加运行的命令，修改默认的数值 \Git\git-bash.exe</strong><img src="https://pic.imgdb.cn/item/61c867662ab3f51d91d2ac8f.jpg" alt="img"></li>
</ol>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><ul>
<li><a href="https://www.cnblogs.com/mythdoraemon/p/9865567.html">Git 右键添加Git Bash</a></li>
</ul>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>PsTips</title>
    <url>/2022/01/03/%E6%91%84%E5%BD%B1/PsTips/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li>[ 画笔增大</li>
<li>] 画笔减小</li>
<li>ctrl+i 反向</li>
<li>ctrl+t 自由变换工具</li>
<li>调出红色非选区遮罩：快捷键shift+alt + 点</li>
</ul>
]]></content>
      <categories>
        <category>PS</category>
      </categories>
  </entry>
  <entry>
    <title>人像嘴唇颜色更改</title>
    <url>/2021/06/04/%E6%91%84%E5%BD%B1/%E4%BA%BA%E5%83%8F%E5%98%B4%E5%94%87%E9%A2%9C%E8%89%B2%E6%9B%B4%E6%94%B9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="人像嘴唇颜色更改"><a href="#人像嘴唇颜色更改" class="headerlink" title="人像嘴唇颜色更改"></a>人像嘴唇颜色更改</h3><ul>
<li><p>打开图片</p>
<p><img src="https://pic.imgdb.cn/item/60b9d4138355f7f718862da7.png" alt="image-20210604112727351"></p>
</li>
<li><p>方法一</p>
<ul>
<li><p>新建一个空白图层，图层混合模式设为<em><strong>“颜色”</strong></em>，这样只会更改它的颜色，而不会更改他的质感。</p>
</li>
<li><p>选择画笔工具调整不透明度（51%）+流量（56%）</p>
</li>
<li><p>找到所需要的颜色，找到之后就可以直接画了</p>
</li>
<li><p>涂完之后如果觉得有点太过了的话，可以降低一点他的透明度。</p>
<p><img src="https://pic.imgdb.cn/item/60b9d4298355f7f7188811e5.png" alt="image-20210604113032303"></p>
</li>
</ul>
</li>
<li><p>方法二</p>
<ul>
<li><p>建立一个纯色图层</p>
<p><img src="https://pic.imgdb.cn/item/60b9d4348355f7f71888f1d2.png" alt="image-20210604141536603"></p>
</li>
<li><p>ctrl+i  反向蒙版颜色</p>
</li>
<li><p>把图层模式改成颜色</p>
</li>
<li><p>调节不透明度使其自然</p>
</li>
</ul>
</li>
<li><p>方法三</p>
<ul>
<li>对于已经涂了口红的图，嘴唇的颜色杂色不多的情况下</li>
<li>复制图层，选择滤镜—&gt;camera raw</li>
<li>HSL调整—&gt;饱和度—&gt;红色</li>
<li>如果不想影响其他地方红色，选择蒙版，把她嘴唇涂出来</li>
</ul>
</li>
<li><p>方法四</p>
<ul>
<li><p>添加选择可选颜色图层</p>
<p><img src="https://pic.imgdb.cn/item/60b9d4448355f7f7188a45c7.png" alt="image-20210604150219774"></p>
</li>
<li><p>调节颜色之后，添加蒙版，选择嘴唇</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>摄影</category>
      </categories>
      <tags>
        <tag>PS</tag>
        <tag>人像</tag>
      </tags>
  </entry>
  <entry>
    <title>人像眉毛精致化处理</title>
    <url>/2021/06/04/%E6%91%84%E5%BD%B1/%E4%BA%BA%E5%83%8F%E7%9C%89%E6%AF%9B%E7%B2%BE%E8%87%B4%E5%8C%96%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="人像眉毛精致化处理"><a href="#人像眉毛精致化处理" class="headerlink" title="人像眉毛精致化处理"></a>人像眉毛精致化处理</h3><ul>
<li>导入图像，稍微调整一下曝光度(+0.25)+对比度(+6)使眉毛比较明显。</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/60b9d34d8355f7f71875cddc.png" alt="image-20210604101144306"></p>
<ul>
<li><p>放大图片，看一下眉毛所存在的问题</p>
<ul>
<li>眉毛中间有很多空缺</li>
<li>外面存在杂发、杂眉毛</li>
</ul>
</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/60b9d35d8355f7f718771b44.png" alt="image-20210604101722568"></p>
<ul>
<li><p>处理步骤</p>
<ul>
<li><p>复制图层，用修补工具把外面杂乱的眉毛修掉</p>
<p><img src="https://pic.imgdb.cn/item/60b9d3788355f7f718796aa5.png" alt="image-20210604102339995"></p>
</li>
<li><p>用锁套工具将长得比较好的眉毛截选出来，然后将截选出的眉毛拷贝成一个图层</p>
<p><img src="https://pic.imgdb.cn/item/60b9d3898355f7f7187ac111.png" alt="image-20210604102640501"></p>
</li>
<li><p>将眉毛移动到眉毛空缺的地方</p>
</li>
<li><p>利用自有变换工具（ctrl+t）调整角度，使其纹理走向与原图匹配</p>
</li>
<li><p>将图层混合模式改成深色</p>
<p><img src="https://pic.imgdb.cn/item/60b9d3988355f7f7187bf9e0.png" alt="image-20210604103202011"></p>
</li>
<li><p>创建蒙版，<em><strong>ctrl+i</strong></em>蒙版反向（蒙版黑色不可见，白色可见）</p>
<p><img src="https://pic.imgdb.cn/item/60b9d3a78355f7f7187d3db4.png" alt="image-20210604103253913"></p>
<p><img src="https://pic.imgdb.cn/item/60b9d3b48355f7f7187e5391.png" alt="image-20210604103800722"></p>
</li>
<li><p>使用画笔，将画笔颜色改成白色，降低画笔不透明度（这里不透明度为54%）。</p>
</li>
<li><p>将眉毛用白色画笔画出来</p>
</li>
<li><p>如果还不够就新建一个图层</p>
</li>
<li><p>利用吸管工具吸取一个眉毛中比较深的颜色</p>
</li>
<li><p>将画笔调小一点（2）不透明度调低一点（36%）</p>
</li>
<li><p>调整完毕之后就大功告成了</p>
<p><img src="https://pic.imgdb.cn/item/60b9d3cb8355f7f718803ef7.png" alt="image-20210604112307771"></p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>摄影</category>
      </categories>
      <tags>
        <tag>PS</tag>
        <tag>人像</tag>
      </tags>
  </entry>
  <entry>
    <title>后期PS处理调色思路</title>
    <url>/2021/06/07/%E6%91%84%E5%BD%B1/%E5%90%8E%E6%9C%9FPS%E5%A4%84%E7%90%86%E8%B0%83%E8%89%B2%E6%80%9D%E8%B7%AF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="后期PS处理调色思路"><a href="#后期PS处理调色思路" class="headerlink" title="后期PS处理调色思路"></a>后期PS处理调色思路</h4><ul>
<li>基础调整<ul>
<li>白平衡<ul>
<li>色温：控制照片冷暖感觉的工具</li>
<li>色调：照片整体的一个色彩倾向（一般默认不调）</li>
</ul>
</li>
<li>曝光：调节照片的明暗</li>
<li>高光：压低高光，可以找回高光区的细节</li>
<li>白色：压低白色，找回照片中白色的细节</li>
<li>阴影：控制照片中偏暗的部分</li>
<li>黑色：控制照片中黑色看不到细节的部分</li>
</ul>
</li>
<li>HSL调整<ul>
<li>色相：色彩的相貌<ul>
<li>把某个颜色定义成自己拖动到的颜色</li>
</ul>
</li>
<li>饱和度：颜色的纯度<ul>
<li>数字越大说明纯度越高</li>
</ul>
</li>
<li>明亮度：颜色的明暗程度<ul>
<li>拉高橙色，画面中橙色就会变亮一些，拉低橙色，画面中的橙色就会变暗一些</li>
</ul>
</li>
<li>如何使用？<ul>
<li>亚洲人的皮肤<em><strong>橙色</strong></em>是最多的，亚洲人的皮肤关键在于橙色<ul>
<li>降低橙色饱和度，使其皮肤通透点</li>
<li>提高橙色明亮度，使其皮肤白皙水嫩</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>摄影</category>
      </categories>
      <tags>
        <tag>PS</tag>
      </tags>
  </entry>
  <entry>
    <title>控制相机对焦参数</title>
    <url>/2021/06/06/%E6%91%84%E5%BD%B1/%E6%8E%A7%E5%88%B6%E7%9B%B8%E6%9C%BA%E5%AF%B9%E7%84%A6%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="控制相机对焦的参数"><a href="#控制相机对焦的参数" class="headerlink" title="控制相机对焦的参数"></a>控制相机对焦的参数</h3><h4 id="画面清晰"><a href="#画面清晰" class="headerlink" title="画面清晰"></a>画面清晰</h4><ul>
<li><p>什么是对焦</p>
</li>
<li><p>对焦区域</p>
<ul>
<li><p>区域自动对焦，大区域自动对焦</p>
<ul>
<li>特点：精度一般</li>
<li>适合场景：运动员/运动题材</li>
</ul>
</li>
<li><p>45点自动对焦</p>
<ul>
<li>特点：对焦容易/精确度较差</li>
<li>适合场景：风格/大场景</li>
</ul>
</li>
<li><p>单点自动对焦</p>
<ul>
<li>特点：精确度高</li>
<li>适合场景：人物/产品/特写</li>
</ul>
</li>
</ul>
</li>
<li><p>对焦模式</p>
<ul>
<li><p>AF（自动对焦）</p>
<ul>
<li>使用<ul>
<li>半按快门</li>
</ul>
</li>
<li>分类<ul>
<li>单次自动对焦—&gt;半按快门对焦一次，适合拍静止物体</li>
<li>人工智能伺服对焦——半按快门对焦多次，适合拍运动物体</li>
<li>人工智能自动对焦——适合拍无法准确预判是否运动的物体</li>
</ul>
</li>
</ul>
</li>
<li><p>MF（手动对焦）</p>
<ul>
<li><p>使用</p>
<ul>
<li><p>转动对焦环对焦</p>
<p><img src="https://pic.imgdb.cn/item/60bc351d8355f7f718b747fa.png" alt="image-20210606101212207"></p>
</li>
</ul>
</li>
<li><p>适用场景</p>
<ul>
<li>暗环境下拍摄<ul>
<li>在AF自动对焦模式下，经常会出现对焦困难的情况</li>
</ul>
</li>
<li>逆光环境<ul>
<li>光线进入镜头很多，有较强烈的眩光效果，用AF可能不太好对焦</li>
</ul>
</li>
<li>光斑等特殊效果拍摄<ul>
<li>转动对焦环，直到出现较漂亮的光斑效果，再进行拍摄</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>摄影</category>
      </categories>
      <tags>
        <tag>相机</tag>
      </tags>
  </entry>
  <entry>
    <title>控制相机曝光参数</title>
    <url>/2021/06/06/%E6%91%84%E5%BD%B1/%E6%8E%A7%E5%88%B6%E7%9B%B8%E6%9C%BA%E6%9B%9D%E5%85%89%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="控制相机曝光的参数"><a href="#控制相机曝光的参数" class="headerlink" title="控制相机曝光的参数"></a>控制相机曝光的参数</h3><h4 id="明暗合适"><a href="#明暗合适" class="headerlink" title="明暗合适"></a>明暗合适</h4><ul>
<li><p>曝光三要素</p>
<ul>
<li><p>光圈</p>
<ul>
<li>光圈在相机中是F来表示，F后面的数字越小，表示光圈越大（光圈越大—&gt;进光量越多）</li>
<li>F+数字越小—&gt;光圈越大</li>
<li>光圈越大，背景虚化越强    光圈越小，背景虚化越弱</li>
<li>使用<ul>
<li>当相机在<em><strong>Av光圈</strong></em>优先模式下，可以通过转动<em><strong>快门附近的拨盘</strong></em>进行调节。</li>
<li>当相机在<em><strong>M手动模式</strong></em>的时候，转动<em><strong>DIAL FUNC拨盘</strong></em>进行调节。</li>
</ul>
</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/60bc357f8355f7f718bc2167.png" alt="image-20210605183802551"></p>
</li>
<li><p>快门</p>
<ul>
<li>快门时间长—&gt;进光量多—&gt;照片亮</li>
<li>1/60或60表示1/60秒，1’’表示1秒</li>
<li>短快门—&gt;抓拍瞬间，长快门—&gt;记录轨迹</li>
<li>使用<ul>
<li>Tv快门优先和M手动模式都是通过<em><strong>快门拨盘</strong></em>来调节</li>
</ul>
</li>
</ul>
</li>
<li><p>ISO（感光度）</p>
<ul>
<li>感光度是感光元件对光线的敏感程度与，简称ISO</li>
<li>数字越大—&gt;对光线越敏感，数字越小—&gt;对光线越不敏感</li>
<li>ISO越高—&gt;噪点越多—&gt;画面越粗糙，ISO越低—&gt;噪点越少—&gt;画面越细腻</li>
<li>手持排夜景、抓拍运动物体、长焦镜头拍摄可调高ISO</li>
</ul>
</li>
</ul>
</li>
<li><p>光圈、快门、ISO之间的关系</p>
<ul>
<li><p>以水龙头作为比喻</p>
<ul>
<li>阀门打开的大小—&gt;光圈大小</li>
<li>水流的时间—&gt;快门时间</li>
<li>流出水的总量—&gt;进光量</li>
</ul>
</li>
<li><p>在光线比较充足的情况下，为了保证照片的画质，我们通常会选择100-200之间的低ISO，ISO作为一个相对固定的参数，我们暂时不予考虑</p>
</li>
<li><p>进光量一定 光圈越大—&gt;快门时间越短，光圈越小—&gt;快门时间越长</p>
</li>
<li><p>虚化效果—&gt;大光圈+短快门</p>
</li>
<li><p>运动轨迹/慢门效果—&gt;长快门+小光圈</p>
</li>
</ul>
</li>
<li><p>曝光模式</p>
<ul>
<li><p>A+    全自动模式</p>
<ul>
<li>光圈、快门、ISO都由相机自动设置</li>
</ul>
</li>
<li><p>P      程序自动模式</p>
<ul>
<li>光圈、快门由相机自动设置，ISO可以手动设置</li>
</ul>
</li>
<li><p>Tv     快门优先模式</p>
<ul>
<li>快门时间、ISO可手动设置，光圈由相机自动匹配</li>
</ul>
</li>
<li><p>Av     光圈优先模式(很多人喜欢这种模式)</p>
<ul>
<li>光圈、ISO可手动设置，快门速度由相机自动匹配</li>
</ul>
</li>
<li><p>M      全手动模式</p>
<ul>
<li>光圈、快门、ISO都由我们手动设置</li>
</ul>
</li>
<li><p>SCN  场景自动模式</p>
<ul>
<li>人像：相机会自动采用大光圈形成背景虚化突出人物</li>
<li>风光：相机自动采用小光圈使整体清晰</li>
<li>运动：相机自动提高快门速度跟容易抓拍运动物体</li>
</ul>
</li>
</ul>
</li>
<li><p>测光模式</p>
<ul>
<li><p>测光模式：相机可以自动侦测周围光线情况，侦测光线的方式不同就有了不同的测光模式</p>
</li>
<li><p>新手常用的测光模式：</p>
<ul>
<li>评价测光（矩阵）：把画面分成若干个区域进行测光，加权平均后作为曝光基准（适合生活中90%的拍摄场景）</li>
<li>点测光：对画面中的“点”进行测光作为曝光基准（适合在逆光等复杂的环境下进行拍摄）</li>
</ul>
</li>
</ul>
</li>
<li><p>曝光补偿</p>
<ul>
<li>什么是曝光补偿：曝光补偿就是对画面亮度的补偿效果，在Av/Tv/P这种半自动模式下，可以手动调整曝光补偿改变画面亮度。</li>
<li>曝光补偿在相机中是如何表示的：曝光补偿在相机中是以刻度表的形式呈现的，并且可以调节正负</li>
<li>如何使用<ul>
<li>白加黑减（拍白色占比比较大的物体加一点曝光补偿，拍黑色占比比较大的物体减一些曝光补偿）</li>
<li>明快小清新风格照片：交易点曝光补偿，让照片微微过曝</li>
<li>剪影效果照片：减一点曝光补偿，让剪影效果更加明显</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>摄影</category>
      </categories>
      <tags>
        <tag>相机</tag>
      </tags>
  </entry>
  <entry>
    <title>控制相机色彩参数</title>
    <url>/2021/06/06/%E6%91%84%E5%BD%B1/%E6%8E%A7%E5%88%B6%E7%9B%B8%E6%9C%BA%E8%89%B2%E5%BD%A9%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="控制相机色彩的参数"><a href="#控制相机色彩的参数" class="headerlink" title="控制相机色彩的参数"></a>控制相机色彩的参数</h3><h4 id="色彩合理"><a href="#色彩合理" class="headerlink" title="色彩合理"></a>色彩合理</h4><ul>
<li><p>白平衡</p>
<ul>
<li><p>白平衡可以帮助我们在复杂光源下，还原物体本身的颜色</p>
</li>
<li><p>几种白平衡模式</p>
<ul>
<li><p>自动（AWB）</p>
</li>
<li><p>日光</p>
</li>
<li><p>阴影</p>
<ul>
<li>拍摄夕阳是，想要营造暖色调，故意调到阴影白平衡，让相机给画面加入更多的暖色调</li>
</ul>
</li>
<li><p>阴天</p>
</li>
<li><p>钨丝灯</p>
</li>
<li><p>白色荧光灯</p>
<ul>
<li>拍摄大海时，为了突出大海碧蓝的清冷效果，也可以故意设置成白色荧光灯白平衡，让相机为画面加入更多的蓝色调</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>摄影</category>
      </categories>
      <tags>
        <tag>相机</tag>
      </tags>
  </entry>
  <entry>
    <title>摄影经验——转载</title>
    <url>/2021/06/07/%E6%91%84%E5%BD%B1/%E6%91%84%E5%BD%B1%E7%BB%8F%E9%AA%8C%E2%80%94%E2%80%94%E8%BD%AC%E8%BD%BD/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="人像摄影怎么拍"><a href="#人像摄影怎么拍" class="headerlink" title="人像摄影怎么拍"></a>人像摄影怎么拍</h3><h2 id="1-构图"><a href="#1-构图" class="headerlink" title="1. 构图"></a><strong>1. 构图</strong></h2><p>首先，是人像拍摄中，构图的问题。</p>
<p>关于构图在摄影中的重要性大家都有自己的认知，面对于不同的摄影风格，有的风格讲究构图讲究严谨，例如古风，有的风格构图上更倾向于自然不拘谨，例如很多日系生活感的照片拍摄，有的风格会倾向于以画面的张力和情绪为优先考虑，而完全不会被构图束缚。例如我们都听说的日本荒木老前辈，所以摄影的构图该如何去做，其实取决于你所喜欢并想要做到极致的那一类摄影风格而定。</p>
<p>我今天就说一下我自己的构图习惯，我的拍摄风格，多数是安静的画面，画面感比较干净，构图也算是偏向严谨类方向的类型，当然我的风格也可能会慢慢转变，毕竟这些都是受自己的审美所影响的，审美发生了变化，风格也会慢慢的发生变化。</p>
<p>我的很多学生，来找我报名课程系统学习摄影的时候，他们多数都是近似一张白纸，在这样的情况下，面对构图的问题，我基本会对他们有两点要求：就是<strong>先用好居中构图和三分之一构图。</strong>用好这两种构图方法的同时再慢慢去找到自己在摄影中的风格和感觉，当这两种构图方法能运用得心应手的时候， 再去在画面中尝试加入别的变化也是很轻松的事情。</p>
<p>你可能会说：老师，你说的这两种方法我都懂都明白，这也太简单了吧？其实，你能把居中构图和三分之一构图用明白，用好，并不是一件看上去那么简单的事情呦~~~</p>
<p>我对学生的要求是：用三分之一构图去拍照，画面的人物主体虽然在这个位置，但是<strong>你要尝试用别的方法让他们在画面中找到平衡感</strong>；使用居中构图的时候，<strong>尝试用你的创意让的照片变的与众不同</strong>。</p>
<p><img src="https://pic2.zhimg.com/v2-22c0ce4a3965d372445b1af9f364720d_b.jpg" alt="img"></p>
<p>佳能5D4+24 70 2.8L，客户的拍摄，青海茶卡盐湖</p>
<p>例如这张照片，如果从构图上说，他就是一个很普通的居中构图，但是因为加入了多重曝光的创意配合夕阳时的美丽景色，让照片变的不那么普通。</p>
<p><img src="https://pic4.zhimg.com/v2-bc609a0d431d430d607c4fe65e86b7f3_b.jpg" alt="img"></p>
<p>佳能5D4+24 70 2.8L ，来自我的广州面授摄影教学课程</p>
<p><img src="https://pic4.zhimg.com/v2-8537eddd6a8ac347b287c858661e4247_b.jpg" alt="img"></p>
<p>这是一张三分之一构图的照片,人物位于照片中的三分之一的位置，虽然只是简单的坐在那里，但是因为<strong>人物视线的方向与光线的互动</strong>，给阅读这张照片的读者做出了读图的引导，也是因为这样简单的互动，让照片有了氛围感。</p>
<p><img src="https://pic1.zhimg.com/v2-ac0ed4d69b7c1b8fe37ebb729c96f5c4_b.jpg" alt="img"></p>
<p>佳能胶片机EOS1V+2470 2.8L+portra400 拍摄于香港</p>
<p><img src="https://pic4.zhimg.com/v2-53160f3e08573c69bb18a77b51e49e7f_b.jpg" alt="img"></p>
<p>佳能5D4+24 70 2.8L ，来自我的广州面授摄影教学课程</p>
<p>而这两张照片人物也是所处于三分之一的位置，通过线条的延伸感和画面中其他的色块，来让画面变的平衡。</p>
<p>我在拍摄当中，极少出现那类地平线歪歪斜斜的画面，<strong>多数都是这类四平八稳的构图方式。</strong>但是就像给大家展示的思路那样，我喜欢用画面中其他的元素，让这类构图简单的画面，变得不那么普通。</p>
<p>虽然看似基础，但可以变化的思路真的是超级多，构图的其他思路就真的太多了，什么框式构图，什么线条，什么构图中的三角形，但觉得你不妨先把最基本的做到最好，我总会和学生们墨迹一句话:对于摄影师来说，好的拍摄习惯一旦养成以后，就会像吃饭，睡觉一样变成你的一种习惯，好的构图习惯和用光方式也是一样可以成为这样的习惯。</p>
<p>其实我自己现在在拍照的时候很多都是习惯性的就那样去拍摄了，拍摄的当时并没有刻意 的去烧脑纠结什么构图之类的，希望这个思路可以对大家有点启发。</p>
<h2 id="2-引导模特"><a href="#2-引导模特" class="headerlink" title="2. 引导模特"></a><strong>2. 引导模特</strong></h2><p>人像拍摄中，如何沟通引导被拍摄的人，拍出自然的感觉呢？</p>
<p>关于引导的思路很多摄影师都是不一样的，我今天就和大家说一下最简单的方法，这个引导的思路也有很多摄影师都提到过。可能你们都听腻了，我管这类方法称为<strong>《代入法》</strong>。</p>
<p>有些同学一听这个名字就能猜到个七七八八，有些同学听到这个名词的时候一脸懵逼。我举个例子，很多同学都关心的，怎么把女孩拍得好看拍得自然。我觉得当你以男朋友的视角去代入自己的角色，那时想到的画面都不会很做作，尝试脑补女孩子和男朋友互动的画面感，然后去做引导多数都会比较自然。</p>
<p><img src="https://pic1.zhimg.com/v2-86306b8ffa8d7a6ca4d23f13c114d410_b.jpg" alt="img"></p>
<p>佳能5D4+24 70 2.8L ，来自我的广州面授摄影教学课程</p>
<p><img src="https://pic4.zhimg.com/v2-d3c9dfb4326bfcfdf3ba868b9d47c10f_b.jpg" alt="img"></p>
<p>佳能5D4+24 70 2.8L ，来自我的广州面授摄影教学课程</p>
<p><img src="https://pic3.zhimg.com/v2-f41d6a3d8c2d0b29d8bd21bab7b66592_b.jpg" alt="img"></p>
<p>佳能5D4+24 70 2.8L ，来自我的广州面授摄影教学课程</p>
<p><img src="https://pic4.zhimg.com/v2-4c00007666f61d07cb2637cad08324df_b.jpg" alt="img"></p>
<p>佳能5D4+24 70 2.8L ，来自我的广州面授摄影教学课程</p>
<p>我比较喜欢拍外景的环境人像，觉得那样会有更多的元素可以互动，这套照片是我在给报名面授课程的同学们，上课时所拍摄的。那次也是第一次尝试室内生活感的主题，我当时设计主题时的思路就是想拍那种假日和女朋友腻在家里的感觉，在拍摄之前就事先通过民宿的照片，观看到场地的情况，<strong>脑补了很多情侣之间可能会发生的场景</strong>。</p>
<p>例如周末赖床，男朋友给女朋友做早餐，女朋友在衣柜中淘气的画面等，虽然不像严谨的商业摄影那种会写成ppt的格式，但<strong>每个场景也都是自己脑补带入过的</strong>。只有这样，你到了拍摄场地，才能用语言把你想要的感觉比较清晰的告诉给模特，当语言不能清晰传达的时候，我甚至会直接在那个位置做一个我脑海中动作，我很多面授同学我看到过这一幕都……</p>
<p>我猜，看这篇文章的朋友，肯定有好多，在拍摄面对模特，连自己想要的感觉都用语言说不清楚的吧? 你要想一下，<strong>你自己都说不出来的东西怎么指望模特可以很好的理解呢</strong></p>
<p><img src="https://pic1.zhimg.com/v2-2288251b24c93aff73d5346c1bf76408_b.jpg" alt="img"></p>
<p>佳能5D4+24 70 2.8L ，拍摄于香港</p>
<p>这张照片在拍摄的时候，我很简单的和小青说: 闭上眼睛，感觉阳光照在脸上很舒服的感觉。其实很多的时候，你脑中有了画面感，再用语言表达，就是一件很简单的事情了。</p>
<p><img src="https://pic1.zhimg.com/v2-336f690b0ae39d568a7c5eedf77c0d5c_b.jpg" alt="img"></p>
<p>佳能5D4+24 70 2.8L ，拍摄于斯里兰卡</p>
<p>这张照片，是我和朋友一起在斯里兰卡旅行的时候拍摄的，当时是暴风雨的前夕，乌云就是那么恐怖的，其实当时的引导很简单，我当时告诉楠楠：你感觉远方的云在和你说话，你把手放在耳边闭上眼睛在安静的听他和你说话。实际上当时乌云密布老恐怖了……你明白自己想要的画面，就可以做出轻松的引导。</p>
<p><img src="https://pic2.zhimg.com/v2-e6283ef36ab4884c9ad17f94fa2e4a15_b.jpg" alt="img"></p>
<p>佳能5D4+24 70 2.8L ，拍摄于大理</p>
<p>这是我帮朋友在云南大理拍摄的全家福，引导的时候，我和圆圆（孩子的妈妈）说，你和女儿商量一句话，然后你们一起在老公的耳边用手挡住感觉要说悄悄话，当时母女俩说的好像是：爸爸是大坏蛋。然后老公很自然地就笑了，<strong>因为预估到会有很多真实感的画面，所以这张照片拍摄的时候，我是开连拍模式拍摄的</strong>。</p>
<p><img src="https://pic1.zhimg.com/v2-03a838da35a3bdbace9e4b8ba4f50154_b.jpg" alt="img"></p>
<p>佳能5D4+24 70 2.8L ，拍摄于大理</p>
<p>这张在拍摄的时候，我让他们夫妻俩紧紧的亲孩子的脸颊，小宝贝的脸肉嘟嘟的被爸爸妈妈的嘴挤住，一笑自然就是这样的小表情了。</p>
<p>另外作为一位也是从萌新小白走过来的摄影师说句心里话，<strong>你闷头在家里就算是看过1万位顶级大咖的经验分享，都不如自己去认真的策划拍个10场</strong>，别看我和你说的好像很简单 ，你也感觉是理解了，但是自己上手去做也还是需要很多临场经验的，所以，别懒别仅仅是看纸上谈兵，动起来多去实现你心中的想法，引导的经验都是这样越来越丰富的。</p>
<h2 id="3-天气"><a href="#3-天气" class="headerlink" title="3. 天气"></a><strong>3. 天气</strong></h2><p>如何在各种不同天气情况下，无论光线是否完美，都可以很好的完成拍摄呢？</p>
<p>我到现在好像就只有下雪天没拍过了，面对各种各样的天气我也算是见过世面了，昨天和前天还在济州岛一边拍摄一边被风吹雨打。</p>
<p>我们一步一步来说，首先是阳光晴好的日子，一般在日照正常的地区，如果拍摄的时间你可以控制，我比较建议上午选择10点30-11点之前的时间进行室外部分的拍摄，下午选择三点半左右到日落结束的时间，因为<strong>这些时间段的阳光没有那么强烈</strong>，相机的宽容度你前期控制一下都没有太大问题的。</p>
<p>晴天的日子室内就不必说了，都不会有太大的影响，但是如果你是想玩光影创意的话，例如这样：</p>
<p><img src="https://pic4.zhimg.com/v2-fa4c546c8023df7f71ea65422b0c57f3_b.jpg" alt="img"></p>
<p>佳能5D4+24 70 2.8L ，拍摄于深圳</p>
<p><img src="https://pic3.zhimg.com/v2-c5b7a87b3eba8635559e9f90651de69e_b.jpg" alt="img"></p>
<p>佳能5D4+24 70 2.8L ，拍摄于深圳</p>
<p>这类的室内光影创意就比较建议参考刚才所说的室外拍摄时间段了，也是因为光线会比较好控制。</p>
<p>然后我们说说<strong>阴天</strong>的时候，阴天的时候，我的建议是多找顺光的位置去进行拍摄，虽然阴天没有直射光，但是你找到顺光的位置面部的光线质感应该也都不会很差，例如这几张照片我就是狂风暴雨前后拍摄的。</p>
<p><img src="https://pic4.zhimg.com/v2-cf139d2453fbe1d42efc103416f9ebaf_b.jpg" alt="img"></p>
<p>佳能5D4+24 70 2.8L ，拍摄于我的香港摄影面授课程</p>
<p><img src="https://pic2.zhimg.com/v2-c0e2a470097f32a76c6104565f3a5385_b.jpg" alt="img"></p>
<p>佳能5D4+24 70 2.8L ，拍摄于我的香港摄影面授课程</p>
<p>大家可以看到，天空阴的云都完全没有层次了，面部的光感还是可以拍到和打了闪光灯一样的效果，虽然有些许的后期辅助，但是前期的拍摄至关重要，<strong>这就是在阴天顺光拍摄的一个思路</strong>，希望对大家有些许的帮助。</p>
<p>另外关于白平衡，我都是<strong>自动白平衡</strong>的，现在相机的电子化程度我觉得白平衡是可以信任的，我自己使用的是一台佳能5D4相机。就算是自动白平衡有些许的偏差，我们在LR里面都是可以很轻松的去做白平衡统一。</p>
<h2 id="4-策划思路"><a href="#4-策划思路" class="headerlink" title="4. 策划思路"></a><strong>4. 策划思路</strong></h2><p>下面我们说一下：关于一次人像拍摄的策划思路。这个问题我用之前拍摄的一套作品作为案例，<strong>真实的还原一下我当时策划的情况</strong>。这样分析案例，应该比生硬地和大家说道理效果会更好。</p>
<p><img src="https://pic4.zhimg.com/v2-88f39d4aebcd212e765d8b8329db5527_b.jpg" alt="img"></p>
<p>佳能5D4+24 70 2.8L</p>
<p>就是这组照片，听课的同学应该有很多都会去图虫看片的吧，这组在图虫挺受欢迎的，之前报名京东的摄影比赛，还得了最受欢迎作品奖，最受欢迎作品完全是看网友人气来评选的。</p>
<p>我在拍摄的初期是在手机浏览民宿的时候看到了一家位于深圳很有感觉的场地，当时看到的场景是这样的：</p>
<p><img src="https://pic2.zhimg.com/v2-41831df41c26f9b93570e7154849c815_b.jpg" alt="img"></p>
<p><img src="https://pic1.zhimg.com/v2-24761009ccaf3d0f978adfc268021578_b.jpg" alt="img"></p>
<p><img src="https://pic1.zhimg.com/v2-d8cdc211b7c01d6324d3e98eb56c40ec_b.jpg" alt="img"></p>
<p><img src="https://pic4.zhimg.com/v2-28fa4d3bf39e06c5e007912570b42723_b.jpg" alt="img"></p>
<p>那段时间广州的天气如果没有空调真的是痛不欲生，所以我对室内的拍摄特别的感兴趣。看到这么干净的场景，脑子里立刻就有了这样的色彩组合。</p>
<p><img src="https://pic1.zhimg.com/v2-ce6386cf00619092ff0e6fd805518d4c_b.jpg" alt="img"></p>
<p>我可能是因为有了一些拍摄的经验，所以面对这类很干净的拍摄场地很快就可以找到服装和环境色搭配的感觉，如果对这类搭配你们开始找不到感觉的时候，<strong>可以尝试网上找一些配色表</strong>，把环境色往里面套用一下。</p>
<p><img src="https://pic1.zhimg.com/v2-5efabd3e62a884dbc88c72384876d64c_b.jpg" alt="img"></p>
<p>色彩都是有自己的语言的，另外什么颜色搭配在一起也都是有讲究的。刚开始对于没有经验的萌新来说，<strong>巧用配色表是比较有效率有质量的配色解决办法</strong>。我是在自己定下了照片的色彩配比以后购买了一件蓝色的男士衬衣，出片效果来看这样的男朋友款式衬衣效果还蛮不错的。</p>
<p>拍摄的前期准备都到位了，在拍摄当天我也是像前面和同学们说的那样，有代入感地去和模特在拍摄中沟通。这位朋友叫妙妙，我在拍摄之前和妙妙沟通说想拍一套一个女孩周末自己在家，那种没有肉欲的清冷私房，其实拍摄的时候妙妙上下都有穿打底的，但是因为角度控制到位，基本出片的感觉传达到了，基本是这样的：</p>
<p><img src="https://pic4.zhimg.com/v2-ba9e88e0f42c485fde00666ab2b3419f_b.jpg" alt="img"></p>
<p>佳能5D4+24 70 2.8L 拍摄于深圳</p>
<p><img src="https://pic3.zhimg.com/v2-19e34862855e03bec10dbe86ffc3fca2_b.jpg" alt="img"></p>
<p>佳能5D4+24 70 2.8L 拍摄于深圳</p>
<p><img src="https://pic4.zhimg.com/v2-7a3a9620aad6c2859c2632f3bb0d8037_b.jpg" alt="img"></p>
<p>佳能5D4+24 70 2.8L 拍摄于深圳</p>
<p><img src="https://pic3.zhimg.com/v2-5fb3fad81b506037a590cf5e3d1b842e_b.jpg" alt="img"></p>
<p>佳能5D4+24 70 2.8L 拍摄于深圳</p>
<p>顺便一提中间还有小插曲，我们拍着拍着老板的狗来巡场了。被我顺手抓来入境，然后效果还不错，所以拍摄的时候也要多随机应变。说道这里，大家应该明白了，一次有质量的拍摄：踩点，适合场景的选择，服装和场景色彩的搭配，以及模特的引导都是同样重要的。</p>
<h2 id="5-皮肤如何后期"><a href="#5-皮肤如何后期" class="headerlink" title="5. 皮肤如何后期"></a><strong>5.</strong> <strong>皮肤如何后期</strong></h2><p>关于通透的问题我给大家看一张原片：</p>
<p><img src="https://pic3.zhimg.com/v2-2dd8f9327c6eeabc99c71bbb78f677f2_b.jpg" alt="img"></p>
<p>佳能5D4+24 70 2.8L 拍摄于我在广州的摄影面授课程</p>
<p>这是一张只有曝光度调整的原片，我是想和大家说一个道理。很多同学有误区，觉得照片舒服都是靠后期的。<strong>实际前期的拍摄非常的重要</strong>，后期是实现前期想法的辅助工具，关于皮肤处理的部分这个真的就不是一小时能说完的问题了。</p>
<p>（悄悄告诉大家，<strong>我和AIRPHOTO最近合作了一期人像修肤的课程</strong>，对这块感兴趣的小伙伴，可以查看<a href="https://link.zhihu.com/?target=http://mp.weixin.qq.com/s/ctrX1btn0hyAlxJH8l0taA">这么好的皮肤质感，为什么不是我修的？！</a>报名哦）</p>
<p><img src="https://pic4.zhimg.com/v2-2abd7b92c13de7e924ca21c185bec6cf_b.jpg" alt="img"></p>
<h2 id="6-如何约漂亮女生"><a href="#6-如何约漂亮女生" class="headerlink" title="6. 如何约漂亮女生"></a><strong>6.</strong> <strong>如何约漂亮女生</strong></h2><p>其实我想说，我刚才以上说的几个问题，分享的经验思路。你全都很好地做到了，就可以轻松的靠实力约到好看的妹子当模特了。这个是最实在的大实话，其他的撩妹技巧都是浮云。</p>
<p><img src="https://pic2.zhimg.com/v2-75e7224167ed9416b3dd39b659a9b071_b.jpg" alt="img"></p>
<h3 id="转载自：-https-zhuanlan-zhihu-com-p-30879193"><a href="#转载自：-https-zhuanlan-zhihu-com-p-30879193" class="headerlink" title="转载自： https://zhuanlan.zhihu.com/p/30879193"></a>转载自： <a href="https://zhuanlan.zhihu.com/p/30879193">https://zhuanlan.zhihu.com/p/30879193</a></h3>]]></content>
      <categories>
        <category>摄影</category>
      </categories>
      <tags>
        <tag>人像</tag>
      </tags>
  </entry>
  <entry>
    <title>AI斗地主</title>
    <url>/2021/07/20/%E6%9C%89%E8%B6%A3%E7%9A%84%E4%B8%9C%E8%A5%BF/AI%E6%96%97%E5%9C%B0%E4%B8%BB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="DouZero分析"><a href="#DouZero分析" class="headerlink" title="DouZero分析"></a>DouZero分析</h2><h3 id="1-DouZero介绍"><a href="#1-DouZero介绍" class="headerlink" title="1.DouZero介绍"></a>1.DouZero介绍</h3><p>DouZero项目地址：<a href="https://github.com/kwai/DouZero">https://github.com/kwai/DouZero</a></p>
<p>在线Demo地址：<a href="https://www.douzero.org/">https://www.douzero.org/</a></p>
<p>原理我就不过多说明，有兴趣的可以查看论文：<a href="https://arxiv.org/abs/2106.06135">https://arxiv.org/abs/2106.06135</a></p>
<p>运行程序，评估胜率只需三步：进入项目目录，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip3 install -r requirements.txt    <span class="comment"># 安装依赖</span></span><br><span class="line">python3 generate_eval_data.py        <span class="comment"># 生成评估用的数据</span></span><br><span class="line">python3 evaluate.py                    <span class="comment"># 开始评估</span></span><br></pre></td></tr></table></figure>

<p>运行结果是以胜率的形式展现。<br>关于如何训练以及更多参数设置，请查看DouZero项目的说明文档。</p>
<p>当然现在这样对实际应用是没有直接帮助的，所以要改造一下，利用训练好的AI来帮我们出牌。</p>
<h3 id="2-DouZero源码分析"><a href="#2-DouZero源码分析" class="headerlink" title="2.DouZero源码分析"></a>2.DouZero源码分析</h3><p>项目结构十分清晰，<code>douzero</code>目录包含主要代码文件，<code>baselines</code>目录放置预训练模型。根目录下的 <code>evaluate.py</code>为入口，拿到参数后传递到 <code>douzero/evaluation/simulation.py</code>中的 <code>evaluate()</code>函数，再将数据分配给多个进程调用 <code>mp_simulate()</code>函数。</p>
<p><img src="https://tqraf.cn/images/image-210713-1.png" alt="项目结构"></p>
<center>项目结构</center>

<p><code>mp_simulate()</code>函数中，players为三个生成的AI，代表斗地主中的三个角色。<code>GameEnv()</code>类表示游戏环境，控制一局游戏流程的进行与结束。</p>
<p><img src="https://tqraf.cn/images/image-210713-2.png" alt="mp_simulate()函数"></p>
<center>mp_simulate()函数</center>

<p>看到这里，整个项目就清晰了，可以着手按照需求定制AI了。</p>
<h2 id="DouZero定制"><a href="#DouZero定制" class="headerlink" title="DouZero定制"></a>DouZero定制</h2><ul>
<li><p>首先，三个AI互斗肯定是不可行的，我们只需要一个，并且代表了玩家的角色。只要给这个AI输入开局时我的手牌和三张底牌，并且告诉它谁是地主，再输入每轮中其他两人的出牌，那么AI就能够给出最优出牌决策。</p>
</li>
<li><p>对于生成AI，可以控制只生成玩家角色对应的AI。开局时获取玩家的位置(<strong>地主上家、地主、地主下家</strong>），并用 <code>0, 1, 2</code>分别表示。</p>
</li>
<li><p>对于获取手牌等信息，<code>DouZero</code>项目中有对扑克牌进行转换。注意到在 <code>DouZero</code>与 <code>rlcard-showdown</code>两个项目中，这种对应关系有些许差异，这是因为将 <code>10</code>用 <code>T</code>来代替就可以将扑克牌用一串字符串来表示，便于参数传递。因此本项目也采取这种做法。</p>
<p>python</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># DouZero</span></span><br><span class="line">EnvCard2RealCard = &#123;<span class="number">3</span>: <span class="string">&#x27;3&#x27;</span>, <span class="number">4</span>: <span class="string">&#x27;4&#x27;</span>, <span class="number">5</span>: <span class="string">&#x27;5&#x27;</span>, <span class="number">6</span>: <span class="string">&#x27;6&#x27;</span>, <span class="number">7</span>: <span class="string">&#x27;7&#x27;</span>,</span><br><span class="line">                  <span class="number">8</span>: <span class="string">&#x27;8&#x27;</span>, <span class="number">9</span>: <span class="string">&#x27;9&#x27;</span>, <span class="number">10</span>: <span class="string">&#x27;10&#x27;</span>, <span class="number">11</span>: <span class="string">&#x27;J&#x27;</span>, <span class="number">12</span>: <span class="string">&#x27;Q&#x27;</span>,</span><br><span class="line">                  <span class="number">13</span>: <span class="string">&#x27;K&#x27;</span>, <span class="number">14</span>: <span class="string">&#x27;A&#x27;</span>, <span class="number">17</span>: <span class="string">&#x27;2&#x27;</span>, <span class="number">20</span>: <span class="string">&#x27;X&#x27;</span>, <span class="number">30</span>: <span class="string">&#x27;D&#x27;</span>&#125;</span><br><span class="line">RealCard2EnvCard = &#123;<span class="string">&#x27;3&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;4&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;5&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;6&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;7&#x27;</span>: <span class="number">7</span>,</span><br><span class="line">                  <span class="string">&#x27;8&#x27;</span>: <span class="number">8</span>, <span class="string">&#x27;9&#x27;</span>: <span class="number">9</span>, <span class="string">&#x27;10&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;J&#x27;</span>: <span class="number">11</span>, <span class="string">&#x27;Q&#x27;</span>: <span class="number">12</span>,</span><br><span class="line">                  <span class="string">&#x27;K&#x27;</span>: <span class="number">13</span>, <span class="string">&#x27;A&#x27;</span>: <span class="number">14</span>, <span class="string">&#x27;2&#x27;</span>: <span class="number">17</span>, <span class="string">&#x27;X&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;D&#x27;</span>: <span class="number">30</span>&#125;</span><br><span class="line"><span class="comment"># rlcard-showdown</span></span><br><span class="line">EnvCard2RealCard = &#123;<span class="number">3</span>: <span class="string">&#x27;3&#x27;</span>, <span class="number">4</span>: <span class="string">&#x27;4&#x27;</span>, <span class="number">5</span>: <span class="string">&#x27;5&#x27;</span>, <span class="number">6</span>: <span class="string">&#x27;6&#x27;</span>, <span class="number">7</span>: <span class="string">&#x27;7&#x27;</span>,</span><br><span class="line">                  <span class="number">8</span>: <span class="string">&#x27;8&#x27;</span>, <span class="number">9</span>: <span class="string">&#x27;9&#x27;</span>, <span class="number">10</span>: <span class="string">&#x27;T&#x27;</span>, <span class="number">11</span>: <span class="string">&#x27;J&#x27;</span>, <span class="number">12</span>: <span class="string">&#x27;Q&#x27;</span>,</span><br><span class="line">                  <span class="number">13</span>: <span class="string">&#x27;K&#x27;</span>, <span class="number">14</span>: <span class="string">&#x27;A&#x27;</span>, <span class="number">17</span>: <span class="string">&#x27;2&#x27;</span>, <span class="number">20</span>: <span class="string">&#x27;X&#x27;</span>, <span class="number">30</span>: <span class="string">&#x27;D&#x27;</span>&#125;</span><br><span class="line">RealCard2EnvCard = &#123;<span class="string">&#x27;3&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;4&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;5&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;6&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;7&#x27;</span>: <span class="number">7</span>,</span><br><span class="line">                  <span class="string">&#x27;8&#x27;</span>: <span class="number">8</span>, <span class="string">&#x27;9&#x27;</span>: <span class="number">9</span>, <span class="string">&#x27;T&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;J&#x27;</span>: <span class="number">11</span>, <span class="string">&#x27;Q&#x27;</span>: <span class="number">12</span>,</span><br><span class="line">                  <span class="string">&#x27;K&#x27;</span>: <span class="number">13</span>, <span class="string">&#x27;A&#x27;</span>: <span class="number">14</span>, <span class="string">&#x27;2&#x27;</span>: <span class="number">17</span>, <span class="string">&#x27;X&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;D&#x27;</span>: <span class="number">30</span>&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>对于预测胜率，<code>DouZero</code>项目中并未给出，但是在 <code>rlcard-showdown</code>中能看到该参数，由 <code>deep.py</code>文件中 <code>DeepAgent()</code>类的 <code>act()</code>函数计算得到。</p>
<p>python</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">best_action_confidence = y_pred[best_action_index]</span><br></pre></td></tr></table></figure></li>
<li><p>感谢Couwisdet指点，变量 <code>y_pred</code>是预测的所有合法动作的Q值，取其中最大的一个对应的策略即为最优策略。对于 <code>WP</code>模型，取值在 <code>[-1, 1]</code>，可以按比例换算成胜率，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">win_rates = &#123;&#125;</span><br><span class="line">win_rate = max(best_action_confidence, -1)</span><br><span class="line">win_rate = min(win_rate, 1)</span><br><span class="line">win_rate = str(round(float((win_rate + 1) / 2), 4))</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="控制台版本"><a href="#控制台版本" class="headerlink" title="控制台版本"></a>控制台版本</h2><h3 id="1-用法"><a href="#1-用法" class="headerlink" title="1.用法"></a>1.用法</h3><ul>
<li>这个版本仅仅通过<strong>控制台</strong>进行交互。</li>
</ul>
<p><img src="https://tqraf.cn/images/image-210713-3.png" alt="控制台版本"></p>
<center>控制台版本</center>

<ul>
<li>开局的时候玩家要把自己的手牌，地主的位置，三张底牌手动输入进去。手牌输入按照 <code>333456789TJQKA2XD</code>的形式，然后输入玩家的角色：<code>0-地主上家, 1-地主, 2-地主下家</code>，最后输入三张底牌，例如 <code>2XD</code>。</li>
<li>然后就开始轮流出牌，在其它两个人出牌后都需要将对应的牌输入，用于AI决策，这样在轮到玩家出牌时，AI就能告知最优策略。</li>
<li>不出的话，直接 <code>Enter</code>即可，会返回空列表。同理，当AI返回空列表时表示不出。</li>
<li>这么做的优点就是，逻辑简单，并且工作量少哇。主要是想第一时间测试AI在实战斗地主中的实力。</li>
<li>缺点很明显，十分拼手速，并且没有撤销机制与输入检测，如果着急输错了，那么程序就会崩溃。</li>
</ul>
<h3 id="2-分析"><a href="#2-分析" class="headerlink" title="2.分析"></a>2.分析</h3><ul>
<li>去除了不必要的文件以及参数，根目录只保留 <code>start.py</code>用于启动。</li>
<li><code>evaluate()</code>函数要求输入玩家手牌、玩家角色、三张底牌。由于原先评估代码中太多处涉及对其他角色手牌的操作如删除和检测，为避免大量改动原项目代码，需要为其他两个角色分配手牌。</li>
<li>这里就将整幅牌减去玩家手牌，再按角色分配给它们。为避免其他玩家出牌时，在其手牌中找不到该牌，将<strong>在其他玩家手牌中删除刚出的牌</strong>改为<strong>在其他玩家手牌中删除与刚出的牌等量的牌</strong>。这么做的依据是：AI决策时只需要考虑其他角色手牌数量而不需要知道具体是什么牌。</li>
<li>创建AI时根据玩家角色来创建，并且在 <code>env.step()</code>中，调用 <code>act()</code>函数获取AI决策前判断一下当前是否为玩家出牌，是则通过AI决策，否则由玩家输入。</li>
<li>当任意角色手牌数量为0时则代表游戏结束。</li>
</ul>
<blockquote>
<p>俗话说得好，一个成熟的AI，是应该能够自己看牌出牌的。于是我又改出了pyqt5版本，实现部分<strong>自动化操作</strong>。</p>
</blockquote>
<h2 id="pyqt5版本"><a href="#pyqt5版本" class="headerlink" title="pyqt5版本"></a>pyqt5版本</h2><h3 id="1-用法-1"><a href="#1-用法-1" class="headerlink" title="1.用法"></a>1.用法</h3><ul>
<li>打开欢乐斗地主，需要<strong>窗口模式下最大化</strong>运行，并且要求屏幕分辨率 <code>1920x1080</code>，程序窗口需要移至<strong>右下角</strong>，不能遮挡<strong>手牌、地主标志、底牌、历史出牌</strong></li>
</ul>
<p><img src="https://tqraf.cn/images/image-210713-4.png" alt="pyqt5版本"></p>
<center>pyqt5版本</center>

<ul>
<li>在抢地主结束后，手牌出现、底牌出现、地主角色确认，点击<strong>开始</strong>，耗时几秒完成扑克牌的识别。</li>
<li>窗口内显示识别结果，地主角色使用淡红色标出。识别完成自动开始记录出牌。</li>
<li>观察AI建议的出牌，在游戏中手动选择并打出。游戏结束后会弹出对话框提示输赢。</li>
<li>识别错误或无反应导致错过出牌，可通过<strong>结束</strong>按钮停止本局。至于游戏，就自己手动打完吧。</li>
</ul>
<h3 id="2-分析-1"><a href="#2-分析-1" class="headerlink" title="2.分析"></a>2.分析</h3><ul>
<li>利用 <code>pyqt5</code>设计一个简单的窗体用于展示出牌信息</li>
</ul>
<p><img src="https://tqraf.cn/images/image-210713-5.png" alt="主窗口"></p>
<center>主窗口</center>

<ul>
<li>使用 <code>pyautogui</code>来实现自动化。借鉴了<a href="https://github.com/ZDZX-T/cardRecorder">cardRecorder</a>项目的部分代码以及模板图片，用于识别扑克牌。</li>
</ul>
<p><img src="https://tqraf.cn/images/image-210713-6.png" alt="图片模板"></p>
<center>图片模板</center>

<ul>
<li>通过 <code>pyautogui.locateAll()</code>函数将所有扑克牌的模板图片与屏幕特定区域的截图进行对比，获取手牌、底牌与出牌。</li>
<li>由于出牌区域显示的牌较小，因此使用一大一小两套模板。而底牌则更小，通过 <code>resize()</code>函数将截图区域放大，在进行模板比对。</li>
<li><code>pyautogui.locateOnScreen</code>用于白块检测与“不出”检测，“地主”检测，用来自动识别出牌流程。这里仍有一点Bug，例如王炸时出牌特效时间较长，有一定几率导致只能识别出一个王。但是缩短等待时间又会导致两人连续“不出”时无法自动切换到下一个人出牌的状态。</li>
<li>另外，由于像素级操作过于局限，并且识别过程容易出错，有小几率Bug，因此放弃完全自动化的想法，即通过 <code>pyautogui</code>来点击屏幕自动出牌。</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>至少现在，这个AI可以辅助我们出牌了，虽然AI的思路可能跟我们完全不一样。</li>
<li>要注意到，斗地主是个<strong>运气成分很强</strong>的游戏，牌好的时候，闭着眼睛打也能赢。牌烂的时候，高手也救不了（例如被“春天”）。所以只有在自己的牌不好也不烂的时候，AI的优势才能被明显体现出来。</li>
<li>综合来看，在发完牌后，自己没有把握打赢又不至于直接认输的情况下，用AI辅助是不错的选择。毕竟，它天生自带记牌器，能够合理配合，做农民的时候是个不错的队友。</li>
<li>github项目地址：<a href="https://github.com/tianqiraf/DouZero_For_HappyDouDiZhu">DouZero_For_HappyDouDiZhu</a></li>
<li>演示视频链接：<a href="https://www.zhihu.com/zvideo/1398424460945444864">知乎视频</a></li>
</ul>
<h3 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h3><ul>
<li>有时候程序中自己的牌堆显示会与实际手牌不同</li>
<li>使用AI的胜率一般，不知道大家的体验如何</li>
</ul>
<h3 id="转载自：使用DouZero玩欢乐斗地主"><a href="#转载自：使用DouZero玩欢乐斗地主" class="headerlink" title="转载自：使用DouZero玩欢乐斗地主"></a>转载自：<a href="https://tqraf.cn/2021/07/DouZero-For-HappyDouDiZhu.html">使用DouZero玩欢乐斗地主</a></h3>]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>InterestingCode</tag>
      </tags>
  </entry>
  <entry>
    <title>比特币和区块链</title>
    <url>/2021/05/24/%E7%A7%91%E6%99%AE/%E6%AF%94%E7%89%B9%E5%B8%81%E5%92%8C%E5%8C%BA%E5%9D%97%E9%93%BE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="一：比特币：数字货币"><a href="#一：比特币：数字货币" class="headerlink" title="一：比特币：数字货币"></a>一：比特币：数字货币</h3><p><img src="https://pic.imgdb.cn/item/607a6b148322e6675c121da4.png" alt="image-123"></p>
<ul>
<li>2008年11月1日 中本聪《白皮书》</li>
<li>去中心化的电子<strong>记账</strong>系统<ul>
<li>现在的中心化是谁的：银行，谁谁谁用了多少钱，还剩多少钱*</li>
<li>很多条交易记录进行打包连接成一个区块，区块再连接起来，成为区块链</li>
<li>三个问题<ul>
<li>以谁为准</li>
<li>为何记账</li>
<li>如何防伪</li>
</ul>
</li>
<li>记账奖励<ul>
<li>手续费</li>
<li>打包奖励<ul>
<li>每10分钟打一个包，最开始会奖励打包者50个比特币，过了4年之后奖励25个比特币……</li>
<li>一共有多少个比特币<ul>
<li>50x6x24x365x4x(1+1/2+1/2*1/2+….)=2100万</li>
</ul>
</li>
</ul>
</li>
<li>以谁为准<ul>
<li>工作量证明（挖矿）：每一个参与的用户都要做一个很难的数学题，这个数学题没有一个人能够通过脑子把它算出来，我们必须一个一个去试，只有你把它尝试出来了才能获得这个奖励，这个过程称之为挖矿。</li>
<li>挖矿原理<ul>
<li>哈希函数：<ul>
<li>我们能够把一个字符串通过一定的运算转换为摘要的形式</li>
<li>正着算容易反着算难</li>
<li>sha256（美国国家安全局发明的一种算法）<ul>
<li>比如输入“Apple”输出一个256位的二进制数</li>
</ul>
</li>
</ul>
</li>
<li>原理<ul>
<li>字符串：前块头部+账单信息+时间戳+随机数<ul>
<li>改变这个随机数不断去试</li>
</ul>
</li>
<li>hash=sha256（sha256（字符串））</li>
<li>前n位必须为0</li>
<li>如果你算对了，你就有资格去打包，就可以把你的哈希值作为新块的头部打一个包，再把这个包接到区块链的后面去。（每个块有头部+信息）</li>
</ul>
</li>
<li>难度n的确定</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>参考资料：<a href="https://www.youtube.com/watch?v=g_fSistU3MQ">比特币和区块链啥原理？矿机挖矿咋回事？李永乐老师讲比特币(1)</a></p>
]]></content>
      <categories>
        <category>科普</category>
      </categories>
      <tags>
        <tag>科普</tag>
      </tags>
  </entry>
  <entry>
    <title>源代码包”和“二进制包”的区别</title>
    <url>/2022/01/03/%E7%A7%91%E6%99%AE/%E6%BA%90%E4%BB%A3%E7%A0%81%E5%8C%85%E2%80%9D%E5%92%8C%E2%80%9C%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8C%85%E2%80%9D%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="“源代码包”和“二进制包”的区别"><a href="#“源代码包”和“二进制包”的区别" class="headerlink" title="“源代码包”和“二进制包”的区别"></a><a href="https://blog.csdn.net/Tomstrong_369/article/details/51741012">“源代码包”和“二进制包”的区别</a></h1><p>源代码方式和二进制包是软件包的两种形式。二进制包里面包括了已经经过编译，可以马上运行的程 序。你只需要下载和解包（安装）它们以后，就马上可以使用。源代码包里面包括了程序原始的程序代码，需要在你的计算机上进行编译以后才可以产生可以运行程 序,所以从源代码安装的时间会比较长。</p>
<p>source code 是程序員寫的碼， binary code 是機器跑的碼。 source code 得經過 compile 才能成為 binary code 。 </p>
<p>RPM 有分兩種：binary rpm 跟 source rpm 。<br>前者是編好的 binary ，安裝就可用。<br>後者是還沒編好的 source ，需 rebuild 之後才能安裝。</p>
<p>rpm格式很好区分，二进制格式的包名字很长，都带有版本号、适应平台、适应的硬件类型等，而源码格式仅仅就是一个版本号的tar包。<br>mysql-5.0.45.tar.gz 是 源码包    像这样的 mysql-5.0.45-linux-x86_64-glibc23.tar.gz   是二进制包</p>
<p>如果你用过压缩工具就会明白，压缩包未必就是软件，它也可能是备份的许多图片，也可能是打包在一起的普通资料，要分辨它到底是什么最好的办法就是查看包里的文件清单，使用命令tar ztvf *. 或者tar ytvf *.bz2</p>
<p>源代码包里的文件往往会含有种种源代码文件，头文件*.h、c代码源文件*.c、C++代码源文件*.cc/*.cpp等；而二进制包里的文件则会有可执行文件（与软件同名的往往是主执行文件），标志是其所在路径含有名为bin的目录（仅有少数例外）</p>
]]></content>
      <categories>
        <category>科普</category>
      </categories>
  </entry>
  <entry>
    <title>移动通讯技术</title>
    <url>/2021/05/24/%E7%A7%91%E6%99%AE/%E7%A7%BB%E5%8A%A8%E9%80%9A%E8%AE%AF%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="移动通讯技术"><a href="#移动通讯技术" class="headerlink" title="移动通讯技术"></a><a href="https://www.cnblogs.com/SssuperBear/p/14670473.html">移动通讯技术</a></h3><p><img src="https://img.imgdb.cn/item/607a6b0c8322e6675c1209ff.png" alt="image-20210107123834018"></p>
<h4 id="一：移动通讯技术"><a href="#一：移动通讯技术" class="headerlink" title="一：移动通讯技术"></a>一：移动通讯技术</h4><ul>
<li><p>1G：移动蜂窝技术 </p>
<ul>
<li>传输的是模拟信号，只能传输语音不能传输文字，保密性很差，而且通话质量也不好</li>
</ul>
<p><img src="https://img.imgdb.cn/item/607a6b0c8322e6675c120a06.png" alt="image-20210107124105969"></p>
</li>
<li><p>2G：数字信号</p>
<ul>
<li>一段语音，进行采样，转换为数字，再转换为二进制码传输</li>
<li>这样既能传输语音也能传输文字还能进行加密</li>
</ul>
</li>
<li><p>3G：CDMA（码分多址）</p>
</li>
<li><p>4G：OFDMA（正交频分多址）</p>
<p><img src="https://img.imgdb.cn/item/607a6b0c8322e6675c120a0f.png" alt="image-20210107124612998"></p>
<ul>
<li>他可以在同一个频段内传输很多个信号。信号彼此是正交的，一个信号最强的时候其他信号为0。这样一来，虽然他们都在一个频段内却不会彼此干扰。</li>
</ul>
</li>
</ul>
<h4 id="二：5G-5G毫米波"><a href="#二：5G-5G毫米波" class="headerlink" title="二：5G/5G毫米波"></a>二：5G/5G毫米波</h4><ul>
<li>高速率<ul>
<li>4G 5G速率对比<ul>
<li>4G：100Mbps（大约是10M字节每秒）</li>
<li>5G：2Gbps</li>
</ul>
</li>
<li>香农公式  C=Wlog2（1+S/N）<ul>
<li>C：速率极限（再怎么编码都超不过这个速率）</li>
<li>W：频带宽度（1Ghz-2Ghz的频率那么频宽就有1Ghz）</li>
<li>S：信号功率</li>
<li>N：噪声功率</li>
</ul>
</li>
<li>4G频段<ul>
<li>中国移动885M-909Mhz（24Mhz带宽） 930M-954Mhz（24Mhz带宽）</li>
</ul>
</li>
<li>5G频段<ul>
<li>6Ghz以下（sub6 5G）<ul>
<li>大概是5倍的4G</li>
<li>中国移动拿到两个5G频段<ul>
<li>2515M-2575M（160M带宽）</li>
<li>4800M-4900M（100M带宽）</li>
</ul>
</li>
</ul>
</li>
<li>24Ghz以上（毫米波5G）（24-100Ghz）<ul>
<li>大概是4倍的sub6 5G</li>
</ul>
</li>
<li>VR眼镜带的时间长了会头晕？<ul>
<li>视频不够高清</li>
<li>延迟比较严重</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>低延迟<ul>
<li>4G：10ms-100ms</li>
<li>5G-sub6：1ms</li>
<li>5G-毫米波：0.1ms</li>
<li>工业、远程医疗</li>
</ul>
</li>
<li>大容量<ul>
<li>4G：2000个/平方公里</li>
<li>5G：100万个/平方公里</li>
<li>万物互联</li>
</ul>
</li>
</ul>
<h3 id="三毫米波5G挑战"><a href="#三毫米波5G挑战" class="headerlink" title="三毫米波5G挑战"></a>三毫米波5G挑战</h3><ul>
<li><p>频率高、衰减快、覆盖范围小</p>
</li>
<li><p>波长短、衍射差（播不能绕过障碍物）、易于遮挡</p>
</li>
<li><p>解决方案</p>
<ul>
<li><p>波束赋形</p>
<ul>
<li>好几根天线，彼此之间相位不同，发生干涉，结果导致向一个方向发射比较强的电磁波</li>
</ul>
<p><img src="https://img.imgdb.cn/item/607a6b0c8322e6675c120a18.png" alt="image-20210107130727862"></p>
</li>
<li><p>波束追踪</p>
<p><img src="https://img.imgdb.cn/item/607a6b148322e6675c121d9d.png" alt="image-20210107130937454"></p>
<ul>
<li>走哪跟到哪</li>
</ul>
</li>
<li><p>波束反射</p>
<ul>
<li>通过墙的反射</li>
</ul>
</li>
<li><p>波束切换</p>
<ul>
<li>手机在多个基站之间进行切换</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>参考文献：<a href="https://www.youtube.com/watch?v=VdSFah46d7Y">5G到底是什么？它能成为创造未来的新科技吗？</a></p>
]]></content>
      <categories>
        <category>科普</category>
      </categories>
      <tags>
        <tag>科普</tag>
      </tags>
  </entry>
  <entry>
    <title>ADF检验</title>
    <url>/2021/12/26/%E8%AE%BA%E6%96%87%E7%9B%B8%E5%85%B3/ADF%E6%A3%80%E9%AA%8C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="ADF检验"><a href="#ADF检验" class="headerlink" title="ADF检验"></a>ADF检验</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>在使用很多时间序列模型的时候，如ARMA、ARIMA，都会要求时间序列是平稳的，所以一般在研究一段时间序列的时候，第一步都需要进行平稳性检验，除了用肉眼检测的方法，另外比较常用的严格的统计检验方法就是<strong>ADF检验</strong>，也叫做<strong>单位根检验</strong>。</p>
<p>ADF检验全程是Augmented Dickey-Fuller test，顾名思义，ADF是Dickey-Fuller检验的增广形式。DF检验只能应用于一阶情况，当序列存在高阶的滞后相关时，可以使用ADF检验，所以说ADF是对DF检验的扩展。</p>
<h2 id="单位根（unit-root）"><a href="#单位根（unit-root）" class="headerlink" title="单位根（unit root）"></a>单位根（unit root）</h2><p>在做ADF检验，也就是单位根检验时，需要先明白一个概念，也就是要检验的对象——单位根。</p>
<p>在一个自回归的过程中：</p>
<p>$$<br>y _ { t } = b y _ { t - 1 } + a + \epsilon _ { t }<br>$$</p>
<p>，如果滞后项系数b为1，就称为单位根。当单位根存在时，自变量和因变量之间的关系具有欺骗性，因为残差序列的任何误差都不会随着样本量（即时期数）增大而衰退，也就是说模型中的残差的影响是永久的。这种回归又称为伪回归。如果单位根存在，这个过程就是一个随机漫步（random walk）。</p>
<h2 id="ADF检验的原理"><a href="#ADF检验的原理" class="headerlink" title="ADF检验的原理"></a>ADF检验的原理</h2><p>ADF检验就是判断序列是否存在单位根：<strong>如果序列平稳，就不存在单位根；否则，就会存在单位根。</strong></p>
<p>所以，ADF检验的H0假设就是存在单位根，如果得到的显著性检验统计量小于三个置信度（10%， 5%， 1%），则对应有（90%， 95%， 99%）的把握来拒绝假设。</p>
<h2 id="ADF检验的python实现"><a href="#ADF检验的python实现" class="headerlink" title="ADF检验的python实现"></a>ADF检验的python实现</h2><p>adfuller函数的参数意义分别是：</p>
<ol>
<li>x：一维的数据序列。</li>
<li>maxlag：最大滞后数目。</li>
<li>regression：回归中的包含项（c：只有常数项，默认；ct：常数项和趋势项；ctt：常数项，线性二次项；nc：没有常数项和趋势项）</li>
<li>autolag：自动选择滞后数目（AIC：赤池信息准则，默认；BIC：贝叶斯信息准则；t-stat：基于maxlag，从maxlag开始并删除一个滞后直到最后一个滞后长度基于 t-statistic 显著性小于5%为止；None：使用maxlag指定的滞后）</li>
<li>store：True False，默认。</li>
<li>regresults：True 完整的回归结果将返回。False，默认。</li>
</ol>
<p>返回值意义为：</p>
<ol>
<li>adf：Test statistic，T检验，假设检验值。</li>
<li>pvalue：假设检验结果。</li>
<li>usedlag：使用的滞后阶数。</li>
<li>nobs：用于ADF回归和计算临界值用到的观测值数目。</li>
<li>icbest：如果autolag不是None的话，返回最大的信息准则值。</li>
<li>resstore：将结果合并为一个dummy</li>
</ol>
<p>源代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">adfuller</span>(<span class="params">x, maxlag=<span class="literal">None</span>, regression=<span class="string">&quot;c&quot;</span>, autolag=<span class="string">&#x27;AIC&#x27;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">             store=<span class="literal">False</span>, regresults=<span class="literal">False</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Augmented Dickey-Fuller unit root test</span></span><br><span class="line"><span class="string">    The Augmented Dickey-Fuller test can be used to test for a unit root in a</span></span><br><span class="line"><span class="string">    univariate process in the presence of serial correlation.</span></span><br><span class="line"><span class="string">    Parameters</span></span><br><span class="line"><span class="string">    ----------</span></span><br><span class="line"><span class="string">    x : array_like, 1d</span></span><br><span class="line"><span class="string">        data series</span></span><br><span class="line"><span class="string">    maxlag : int</span></span><br><span class="line"><span class="string">        Maximum lag which is included in test, default 12*(nobs/100)^&#123;1/4&#125;</span></span><br><span class="line"><span class="string">    regression : &#123;&#x27;c&#x27;,&#x27;ct&#x27;,&#x27;ctt&#x27;,&#x27;nc&#x27;&#125;</span></span><br><span class="line"><span class="string">        Constant and trend order to include in regression</span></span><br><span class="line"><span class="string">        * &#x27;c&#x27; : constant only (default)</span></span><br><span class="line"><span class="string">        * &#x27;ct&#x27; : constant and trend</span></span><br><span class="line"><span class="string">        * &#x27;ctt&#x27; : constant, and linear and quadratic trend</span></span><br><span class="line"><span class="string">        * &#x27;nc&#x27; : no constant, no trend</span></span><br><span class="line"><span class="string">    autolag : &#123;&#x27;AIC&#x27;, &#x27;BIC&#x27;, &#x27;t-stat&#x27;, None&#125;</span></span><br><span class="line"><span class="string">        * if None, then maxlag lags are used</span></span><br><span class="line"><span class="string">        * if &#x27;AIC&#x27; (default) or &#x27;BIC&#x27;, then the number of lags is chosen</span></span><br><span class="line"><span class="string">          to minimize the corresponding information criterion</span></span><br><span class="line"><span class="string">        * &#x27;t-stat&#x27; based choice of maxlag.  Starts with maxlag and drops a</span></span><br><span class="line"><span class="string">          lag until the t-statistic on the last lag length is significant</span></span><br><span class="line"><span class="string">          using a 5%-sized test</span></span><br><span class="line"><span class="string">    store : bool</span></span><br><span class="line"><span class="string">        If True, then a result instance is returned additionally to</span></span><br><span class="line"><span class="string">        the adf statistic. Default is False</span></span><br><span class="line"><span class="string">    regresults : bool, optional</span></span><br><span class="line"><span class="string">        If True, the full regression results are returned. Default is False</span></span><br><span class="line"><span class="string">    Returns</span></span><br><span class="line"><span class="string">    -------</span></span><br><span class="line"><span class="string">    adf : float</span></span><br><span class="line"><span class="string">        Test statistic</span></span><br><span class="line"><span class="string">    pvalue : float</span></span><br><span class="line"><span class="string">        MacKinnon&#x27;s approximate p-value based on MacKinnon (1994, 2010)</span></span><br><span class="line"><span class="string">    usedlag : int</span></span><br><span class="line"><span class="string">        Number of lags used</span></span><br><span class="line"><span class="string">    nobs : int</span></span><br><span class="line"><span class="string">        Number of observations used for the ADF regression and calculation of</span></span><br><span class="line"><span class="string">        the critical values</span></span><br><span class="line"><span class="string">    critical values : dict</span></span><br><span class="line"><span class="string">        Critical values for the test statistic at the 1 %, 5 %, and 10 %</span></span><br><span class="line"><span class="string">        levels. Based on MacKinnon (2010)</span></span><br><span class="line"><span class="string">    icbest : float</span></span><br><span class="line"><span class="string">        The maximized information criterion if autolag is not None.</span></span><br><span class="line"><span class="string">    resstore : ResultStore, optional</span></span><br><span class="line"><span class="string">        A dummy class with results attached as attributes</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>参考代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> statsmodels.tsa.stattools <span class="keyword">import</span> adfuller <span class="keyword">as</span> ADF</span><br><span class="line">adf = ADF(data)</span><br><span class="line"><span class="built_in">print</span>(adf)</span><br><span class="line"></span><br><span class="line">(-<span class="number">0.45153867687808574</span>, <span class="number">0.9011315454402649</span>, <span class="number">1</span>, <span class="number">198</span>, &#123; <span class="string">&#x27;1%&#x27;</span>: -<span class="number">3.4638151713286316</span>, <span class="string">&#x27;5%&#x27;</span>: -<span class="number">2.876250632135043</span>,<span class="string">&#x27;10%&#x27;</span>: -<span class="number">2.574611347821651</span>&#125;, <span class="number">1172.4579344852016</span>)</span><br></pre></td></tr></table></figure>

<p>看到t-statistic的值-0.451要大于10%，所以无法拒绝原假设，另外，p-value的值也很大。</p>
<h3 id="如何确定该序列能否平稳呢？主要看："><a href="#如何确定该序列能否平稳呢？主要看：" class="headerlink" title="如何确定该序列能否平稳呢？主要看："></a>如何确定该序列能否平稳呢？主要看：</h3><p>1、1%、%5、%10不同程度拒绝原假设的统计值和ADF Test result的比较，ADF Test result同时小于1%、5%、10%即说明非常好地拒绝该假设，本数据中，adf结果为-9， 小于三个level的统计值。<br>2、P-value是否非常接近0。</p>
<p>ADF检验的原假设是存在单位根，只要这个统计值是小于1%水平下的数字就可以极显著的拒绝原假设，认为数据平稳。注意，ADF值一般是负的，也有正的，但是它只有小于1%水平下的才能认为是及其显著的拒绝原假设。<br>对于ADF结果在1% 以上 5%以下的结果，也不能说不平稳，关键看检验要求是什么样子的。</p>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><ul>
<li><a href="https://blog.csdn.net/FrankieHello/article/details/86766625?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.nonecase&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.nonecase">时间序列分析之ADF检验</a></li>
<li><a href="https://blog.csdn.net/weixin_44342108/article/details/102300595?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0.essearch_pc_relevant&spm=1001.2101.3001.4242.1">时间序列—-ADF检验</a></li>
</ul>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>信号处理</tag>
      </tags>
  </entry>
  <entry>
    <title>ARIMA</title>
    <url>/2021/12/26/%E8%AE%BA%E6%96%87%E7%9B%B8%E5%85%B3/ARIMA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="（差分自回归移动平均）ARIMA"><a href="#（差分自回归移动平均）ARIMA" class="headerlink" title="（差分自回归移动平均）ARIMA"></a>（差分自回归移动平均）ARIMA</h1><h2 id="1-时间序列平稳性"><a href="#1-时间序列平稳性" class="headerlink" title="1. 时间序列平稳性"></a>1. 时间序列平稳性</h2><h3 id="1-1-平稳性"><a href="#1-1-平稳性" class="headerlink" title="1.1 平稳性"></a>1.1 平稳性</h3><p>平稳性就是要求经由样本时间序列锁得到的拟合曲线在未来一段时间内仍能顺着现有的形态惯性地延续下去。平稳性要求序列的均值和方差不发生明显的变化。</p>
<h4 id="严平稳"><a href="#严平稳" class="headerlink" title="严平稳"></a>严平稳</h4><p>严平稳表示的分布不随时间的改变而改变。如白噪声（正态分布），无论怎么取，都是期望为0，方差为1</p>
<h4 id="宽平稳"><a href="#宽平稳" class="headerlink" title="宽平稳"></a>宽平稳</h4><p>期望与相关系数（依赖性）不变。未来某时刻的t的值$Xt$就要依赖于它的过去的信息，所以需要依赖性。这种依赖性不能有明显的变化</p>
<h3 id="1-2-差分法"><a href="#1-2-差分法" class="headerlink" title="1.2 差分法"></a>1.2 差分法</h3><p>使用差分法可以使得数据更平稳，常用的方法就是一阶差分和二阶差分。</p>
<p>时间序列差分值的求解可以直接通过pandas中的diff函数得到：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// 一阶差分</span><br><span class="line">data = data.diff(<span class="number">1</span>)</span><br><span class="line">// 二阶差分</span><br><span class="line">data = data.diff(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h2 id="2-ARIMA模型介绍"><a href="#2-ARIMA模型介绍" class="headerlink" title="2. ARIMA模型介绍"></a>2. ARIMA模型介绍</h2><h3 id="2-1-自回归模型AR"><a href="#2-1-自回归模型AR" class="headerlink" title="2.1 自回归模型AR"></a>2.1 自回归模型AR</h3><p>自回归模型描述当前值与历史值之间的关系，用变量自身的历史数据对自身进行预测。自回归模型必须满足平稳性的要求。</p>
<p>自回归模型首先需要确定一个阶数p，表示用几期的值来预测当前值。p阶自回归模型的公式定义为：<br>$$<br>y _ { t } = \mu + \sum _ { i = 1 } ^ { p } \gamma _ { i } y _ { t - i } + \epsilon _ { t }<br>$$<br>上式中$yt$是当前值，$\mu$是常数项，$p$ 是阶数，$\gamma i$是自相关系数， $\epsilon_t$是误差</p>
<p>自回归模型有很多限制：</p>
<ul>
<li>自回归模型是用自身的数据进行预测</li>
<li>时间序列数据必须具有平稳性</li>
<li>自回归只适用于预测与自身前期相关的现象</li>
</ul>
<h3 id="2-2-移动平均模型MA"><a href="#2-2-移动平均模型MA" class="headerlink" title="2.2 移动平均模型MA"></a>2.2 移动平均模型MA</h3><p>移动平均模型关注的是自回归模型中的误差项的累加，q阶自回归的过程的公式定义如下：<br>$$<br>y _ { t } = \mu + \epsilon _ { t } + \sum _ { i = 1 } ^ { q } \theta _ { i } \epsilon_{t - i}​<br>$$<br>移动平均法能有效地消除预测中的随机波动。</p>
<h3 id="2-3-自回归移动平均ARMA"><a href="#2-3-自回归移动平均ARMA" class="headerlink" title="2.3 自回归移动平均ARMA"></a>2.3 自回归移动平均ARMA</h3><p>自回归模型AR和移动平均模型MA模型相结合，我们就得到了自回归移动平均模型ARMA(p,q)，计算公式如下：<br>$$<br>y _ { t } = \mu + \sum _ { i = 1 } ^ { p } \gamma _ { i }  y _ { t - i } + \epsilon _ { t } + \sum _ { i = 1 } ^ { q } \theta _ { i } \epsilon _ { t - i }<br>$$</p>
<h3 id="2-4-差分自回归移动平均模型ARIMA"><a href="#2-4-差分自回归移动平均模型ARIMA" class="headerlink" title="2.4 差分自回归移动平均模型ARIMA"></a>2.4 差分自回归移动平均模型ARIMA</h3><p>将自回归模型、移动平均模型和差分算法结合，我们就得到了差分自回归移动平均模型ARIMA(p,d,q)，其中d是需要对数据进行差分和阶数。</p>
<h2 id="3、建立ARIMA模型的过程"><a href="#3、建立ARIMA模型的过程" class="headerlink" title="3、建立ARIMA模型的过程"></a>3、建立ARIMA模型的过程</h2><p>一般来说，建立ARIMA模型一般有三个阶段，分别是模型识别和定阶、参数估计和模型检验。</p>
<h3 id="3-1-模型识别和定阶"><a href="#3-1-模型识别和定阶" class="headerlink" title="3.1 模型识别和定阶"></a>3.1 模型识别和定阶</h3><p>模型的识别问题和定阶问题，主要是确定p,d,q三个参数，差分的阶数d一般通过观察图示，1阶或2阶即可。这里我们主要介绍p和q的确定。我们首先介绍两个函数。</p>
<h4 id="自相关函数ACF-autocorrelation-function"><a href="#自相关函数ACF-autocorrelation-function" class="headerlink" title="自相关函数ACF(autocorrelation function)"></a>自相关函数ACF(autocorrelation function)</h4><p>自相关函数ACF描述的是时间序列观测值与其过去的观测值之间的线性相关性。计算公式如下：<br>$$<br>A C F ( k ) = \rho  _ { k } = \frac { C ov ( y _ { t } , y _ { t - k } ) } { V a r ( y _ { t } ) }<br>$$<br>其中k表示滞后期数，如果$k$=2，则代表$y_t$和$y_{t-2}$</p>
<h4 id="偏自相关函数PACF-partial-autocorrelation-function"><a href="#偏自相关函数PACF-partial-autocorrelation-function" class="headerlink" title="偏自相关函数PACF(partial autocorrelation function)"></a>偏自相关函数PACF(partial autocorrelation function)</h4><p>偏自相关函数PACF描述的是在给定中间观测值的条件下，时间序列观测值预期过去的观测值之间的线性相关性。</p>
<p>举个例子：假设k=3，那么我们描述的是$y_t$和$y_{t-3}$之间的相关性，但是这个相关性还收到yt-1和yt-2的影响。PACF剔除了这个影响，而ACF包含了这个影响。</p>
<h4 id="拖尾和截尾"><a href="#拖尾和截尾" class="headerlink" title="拖尾和截尾"></a>拖尾和截尾</h4><p>拖尾指序列以指数率单调递减或震荡衰减，而截尾指序列从某个时点变得非常小：</p>
<p><img src="https://pic.imgdb.cn/item/61c833332ab3f51d91bdf3da.png" alt="img"></p>
<p>出现以下情况，通常是为（偏）自相关系数d阶截尾：</p>
<ol>
<li>在最初的d阶明显大于2倍标准差范围以内</li>
<li>之后几乎95%的（偏）自相关系数都落在2倍标准差范围以内</li>
<li>且由非零自相关系数衰减为在零附近小值波动的过程非常突然</li>
</ol>
<p><img src="https://pic.imgdb.cn/item/61c8335c2ab3f51d91be05a6.png" alt="img"></p>
<p>出现以下情况，通常视为（偏）自相关系数拖尾：</p>
<ol>
<li>如果有超过5%的样本（偏）自相关系数都落入2倍标准差范围之外</li>
<li>或者是由显著非0的（偏）自相关系数衰减为小值波动的过程比较缓慢或非常连续</li>
</ol>
<p><img src="https://pic.imgdb.cn/item/61c833792ab3f51d91be1186.png" alt="img"></p>
<h4 id="p，q阶数的确定"><a href="#p，q阶数的确定" class="headerlink" title="p，q阶数的确定"></a>p，q阶数的确定</h4><p>根据刚才判定截尾和拖尾的准则，p， q的确定基于如下规则：</p>
<table>
<thead>
<tr>
<th>模型（序列）</th>
<th>AR（p）</th>
<th>MA（q）</th>
<th>ARMA（p,q）</th>
</tr>
</thead>
<tbody><tr>
<td>自相关函数</td>
<td>拖尾</td>
<td>第q个后截尾</td>
<td>拖尾</td>
</tr>
<tr>
<td>偏自相关函数</td>
<td>第p个后拖尾</td>
<td>拖尾</td>
<td>拖尾</td>
</tr>
</tbody></table>
<h3 id="3-2-参数估计"><a href="#3-2-参数估计" class="headerlink" title="3.2 参数估计"></a>3.2 参数估计</h3><p>通过拖尾和截尾对模型进行定阶的方法，往往具有很强的主观性，回想我们之前在参数预估的时候往往是怎么做的，不就是和损失和正则项的加权么？我们这里能不能结合最终的预测误差来确定p，q的阶数呢？在相同的预测误差情况下，根据奥斯卡姆剃刀准则，模型越小是越好的。那么，平均预测误差和参数个数，我们可以根据信息准则函数法，来确定模型的阶数。预测误差通常用平方误差即残差平方和来表示。</p>
<p>常用的信息准则函数法有下面几种：</p>
<h4 id="AIC准则"><a href="#AIC准则" class="headerlink" title="AIC准则"></a>AIC准则</h4><p>AIC准则全称为最小信息量准则（Akaike Information Criterion），计算公式如下：</p>
<p>AIC=2*(模型参数的个数) -2ln(模型的极大似然估计函数)</p>
<h4 id="BIC准则"><a href="#BIC准则" class="headerlink" title="BIC准则"></a>BIC准则</h4><p>AIC准则存在一定的不足之处。当样本容量很大时，在AIC准则中拟合误差提供的信息就要受到样本容量的放大，</p>
<p>而参数个数的惩罚因子却和样本容量没关系（一直是2），因此当样本容量很大时，使用AIC准则选择的模型不收敛与真实模型，它通常比真实模型所含的未知参数个数要多。BIC（Bayesian InformationCriterion）贝叶斯信息准则弥补了AIC的不足，计算公式如下：</p>
<p>BIC = ln(n) * (模型中参数的个数) - 2ln(模型的极大似然函数值)，n是样本容量</p>
<p>我们通过类似网格搜索二等方式来寻找我们模型的最佳p，q组合吧。我们可以使用简单的方法来得到p和q的最优值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_results = sm.tsa.arma_order_select_ic(train, ic=[<span class="string">&#x27;aic&#x27;</span>, <span class="string">&#x27;bic&#x27;</span>], trend=<span class="string">&#x27;nc&#x27;</span>, max_ar=<span class="number">8</span>, max_ma=<span class="number">8</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;AIC&#x27;</span>, train_results.aic_min_order)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;BIC&#x27;</span>, train_results.bic_min_order)</span><br></pre></td></tr></table></figure>

<p>结果为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AIC (1, 0)</span><br><span class="line">BIC (1, 0)</span><br></pre></td></tr></table></figure>

<p>表明我们应该选择AR(1)模型。</p>
<p>一般来说，BIC准则得到的ARMA模型的阶数较AIC的低。</p>
<h3 id="3-3-模型检验"><a href="#3-3-模型检验" class="headerlink" title="3.3 模型检验"></a>3.3 模型检验</h3><p>这里的模型检验主要有两个：</p>
<ol>
<li>检验参数估计的显著性（t检验）</li>
<li>检验残差序列的随机性，即残差直接是独立的</li>
</ol>
<p>残差序列的随机性可以通过自相关函数法来检验，即做残差的自相关函数图：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">model = sm.tsa.ARIMA(train, order=(1, 0, 0))</span><br><span class="line">results = model.fit()</span><br><span class="line">resid = results.resid #赋值</span><br><span class="line">fig = plt.figure(figsize=(12,8))</span><br><span class="line">fig = sm.graphics.tsa.plot_acf(resid.values.squeeze(), lags=40)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<p><img src="https://pic.imgdb.cn/item/61c832f52ab3f51d91bdd962.png" alt="img"></p>
<p>这里很明显的检测是通过的。</p>
<h3 id="3-4-模型训练"><a href="#3-4-模型训练" class="headerlink" title="3.4 模型训练"></a>3.4 模型训练</h3><p>预测主要有两个函数，一个是<strong>predict</strong>函数，一个是<strong>forecast</strong>函数。</p>
<p><strong>predict中进行预测的时间段必须在我们训练ARIMA模型的数据中。</strong></p>
<p><strong>forecast则是对训练数据集末尾下一个时间段的值进行预估。</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model = sm.tsa.ARIMA(data, order=(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">results = model.fit()</span><br><span class="line">predict_sunspots = results.predict(start=<span class="built_in">str</span>(<span class="string">&#x27;2014-04&#x27;</span>),end=<span class="built_in">str</span>(<span class="string">&#x27;2014-05&#x27;</span>),dynamic=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<p>预估下一个值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">results.forecast()[0]</span><br></pre></td></tr></table></figure>



<h2 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h2><ul>
<li><a href="https://blog.csdn.net/sunnyxidian/article/details/92946542">ARIMA模型原理及实现</a></li>
</ul>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>传统算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Savitzky-Golay 滤波器</title>
    <url>/2021/12/24/%E8%AE%BA%E6%96%87%E7%9B%B8%E5%85%B3/Savitzky-Golay%20%E6%BB%A4%E6%B3%A2%E5%99%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="Savitzky-Golay-滤波器"><a href="#Savitzky-Golay-滤波器" class="headerlink" title="Savitzky-Golay 滤波器"></a>Savitzky-Golay 滤波器</h4><p>Savitzky-Golay平滑滤波是光谱预处理中常用滤波方法，它的<strong>核心思想是对一定长度窗口内的数据点进行k阶多项式拟合，从而得到拟合后的结果</strong>。对他进行离散化处理后，<strong>S-G滤波其实是一种移动窗口的加权平均算法，</strong>但是其加权系数不是简单的窗口函数，而是通过在滑动窗口内对定高阶多项式的最小二乘拟合得出。</p>
<p>Savitzky-Golay平滑滤波被广泛地运用于数据流平滑除噪，是一种在时域内基于局域多项式最小二乘法拟合的滤波方法。<strong>这种滤波器最大的特点在于在滤除噪声的同时可以确保信号的形状、宽度不变。</strong></p>
<p>使用平滑滤波器对信号滤波时，<strong>实际上是拟合了信号中的低频成分，而将高频成分平滑出去了</strong>。如果噪声在高频端，那么滤波的结果就是去除了噪声，反之，若噪声在低频段，那么滤波的结果就是留下了噪声。</p>
<p>总之，平滑滤波是光谱分析中常用的预处理方法之一。用Savitzky-Golay方法进行平滑滤波，可以提高光谱的平滑性，并降低噪音的干扰。S-G平滑滤波的效果，随着选取窗宽不同而不同，可以满足多种不同场合的要求。</p>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><ul>
<li><p>测试代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">y_smooth = scipy.signal.savgol_filter(y,5,3)  </span><br><span class="line"></span><br><span class="line"># 备注：</span><br><span class="line">y：代表曲线点坐标（x,y）中的y值数组</span><br><span class="line">window_length：窗口长度，该值需为正奇整数。例如：此处取值53</span><br><span class="line">k值：polyorder为对窗口内的数据点进行k阶多项式拟合，k的值需要小于window_length。例如：此处取值3</span><br><span class="line">mode：确定了要应用滤波器的填充信号的扩展类型。（This determines the type of extension to use for the padded signal to which t</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>window_length和K这两个值对曲线的影响。</p>
<ul>
<li>window_length对曲线的平滑作用：window_length的值越小，曲线月贴近真实曲线，window_length值越大，平滑效果越厉害（该值必须为正奇整数）</li>
<li>k值对曲线的平滑作用：k值越大，曲线越贴近真实曲线；k值越小，曲线平滑越厉害。另外，当k值较大时，受窗口长度限制，拟合会出现问题，高频曲线会变成直线。</li>
</ul>
</li>
</ul>
<h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><ul>
<li><a href="https://www.cnblogs.com/manuowen-123/p/14967367.html">https://www.cnblogs.com/manuowen-123/p/14967367.html</a></li>
<li><a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.savgol_filter.html">https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.savgol_filter.html</a></li>
</ul>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>信号处理</tag>
      </tags>
  </entry>
  <entry>
    <title>差分与复原</title>
    <url>/2021/12/26/%E8%AE%BA%E6%96%87%E7%9B%B8%E5%85%B3/%E5%B7%AE%E5%88%86%E4%B8%8E%E5%A4%8D%E5%8E%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="时间序列的差分与复原"><a href="#时间序列的差分与复原" class="headerlink" title="时间序列的差分与复原"></a>时间序列的差分与复原</h1><p><strong>在时序分析时，我们经常需要将原始序列进行差分，然后做出拟合或者预测，最后还需要将拟合的或者预测的值恢复成原始序列。这里，使用Pandas的Series中的diff和cumsum函数可以方便的实现。</strong></p>
<h2 id="一阶差分与复原"><a href="#一阶差分与复原" class="headerlink" title="一阶差分与复原"></a>一阶差分与复原</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import pandas as pd</span><br><span class="line">time_series = pd.Series([2, 4, 3, 5, 6, 7, 4, 5, 6, 3, 2, 4])</span><br><span class="line">time_series_diff = time_series.diff(1).dropna()</span><br><span class="line">time_series_restored = pd.Series([time_series[0]], index=[time_series.index[0]]).append(time_series_diff).cumsum()</span><br><span class="line">print(time_series)</span><br><span class="line">print(time_series_diff)</span><br><span class="line">print(time_series_restored)</span><br><span class="line">plt.plot(time_series, color=&#x27;red&#x27;, label=&#x27;time_series&#x27;)</span><br><span class="line">plt.plot(time_series_diff, color=&#x27;green&#x27;, label=&#x27;time_series_diff&#x27;)</span><br><span class="line">plt.plot(time_series_restored, color=&#x27;blue&#x27;,linestyle=&#x27;--&#x27;, label=&#x27;time_series_restored&#x27;)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<h2 id="多阶差分复原"><a href="#多阶差分复原" class="headerlink" title="多阶差分复原"></a>多阶差分复原</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import pandas as pd</span><br><span class="line">time_series = pd.Series([2,4,3,5,6,7,4,5,6,3,2,4], index=pd.date_range(start=&#x27;2000&#x27;, periods=12, freq=&#x27;a&#x27;))</span><br><span class="line">time_series_diff = time_series</span><br><span class="line">diff_times = 3</span><br><span class="line">first_values = []</span><br><span class="line">for i in range(diff_times):</span><br><span class="line">    first_values.append(pd.Series([time_series_diff[0]],index=[time_series_diff.index[0]]))</span><br><span class="line">    time_series_diff = time_series_diff.diff(1).dropna()</span><br><span class="line"></span><br><span class="line">time_series_restored = time_series_diff</span><br><span class="line">for first in reversed(first_values):</span><br><span class="line">    time_series_restored = first.append(time_series_restored).cumsum()</span><br><span class="line">print(time_series)</span><br><span class="line">print(time_series_diff)</span><br><span class="line">print(time_series_restored)</span><br><span class="line">plt.plot(time_series, color=&#x27;red&#x27;, label=&#x27;time_series&#x27;)</span><br><span class="line">plt.plot(time_series_diff, color=&#x27;green&#x27;, label=&#x27;time_series_diff&#x27;)</span><br><span class="line">plt.plot(time_series_restored, color=&#x27;blue&#x27;,linestyle=&#x27;--&#x27;, label=&#x27;time_series_restored&#x27;)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><ul>
<li><a href="https://www.jianshu.com/p/88d663ecdf25">Pandas 连续差分diff后恢复原始的序列</a></li>
</ul>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>信号处理</tag>
      </tags>
  </entry>
  <entry>
    <title>希腊字母表</title>
    <url>/2022/01/03/%E8%AE%BA%E6%96%87%E7%9B%B8%E5%85%B3/%E5%B8%8C%E8%85%8A%E5%AD%97%E6%AF%8D%E8%A1%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="希腊字母表"><a href="#希腊字母表" class="headerlink" title="希腊字母表"></a>希腊字母表</h1><table>
<thead>
<tr>
<th>希腊字母小写、大写</th>
<th>LaTeX形式</th>
<th>希腊字母小写、大写</th>
<th>LaTeX形式</th>
</tr>
</thead>
<tbody><tr>
<td>α <em><strong>A</strong></em></td>
<td>\alpha A</td>
<td>μ <em><strong>N</strong></em></td>
<td>\mu N</td>
</tr>
<tr>
<td>β <em><strong>B</strong></em></td>
<td>\beta B</td>
<td>ξ Ξ</td>
<td>\xi \Xi</td>
</tr>
<tr>
<td>γ Γ</td>
<td>\gamma \Gamma</td>
<td><strong>o</strong> <em><strong>O</strong></em></td>
<td>o O</td>
</tr>
<tr>
<td>δ Δ</td>
<td>\delta \ Delta</td>
<td>π Π</td>
<td>\pi \Pi</td>
</tr>
<tr>
<td>ϵ ε <em><strong>E</strong></em></td>
<td>\epsilon \varepsilon E</td>
<td>ρ ϱ <em><strong>P</strong></em></td>
<td>\rho \varrho P</td>
</tr>
<tr>
<td>ζ <em><strong>Z</strong></em></td>
<td>\zeta Z</td>
<td>σ Σ</td>
<td>\sigma \Sigma</td>
</tr>
<tr>
<td>η <em><strong>H</strong></em></td>
<td>\eta H</td>
<td>τ <em><strong>T</strong></em></td>
<td>\tau T</td>
</tr>
<tr>
<td>θ ϑ Θ</td>
<td>\theta \vartheta \Theta</td>
<td>υ Υ</td>
<td>\upsilon \Upsilon</td>
</tr>
<tr>
<td>ι <em><strong>I</strong></em></td>
<td>\iota I</td>
<td>ϕ φ Φ</td>
<td>\phi \varphi \Phi</td>
</tr>
<tr>
<td>κ <em><strong>K</strong></em></td>
<td>\kappa K</td>
<td>χ <em><strong>X</strong></em></td>
<td>\chi X</td>
</tr>
<tr>
<td>λ Λ</td>
<td>\lambda \Lambda</td>
<td>ψ Ψ</td>
<td>\psi \Psi</td>
</tr>
<tr>
<td>μ <em><strong>M</strong></em></td>
<td>\mu M</td>
<td>ω Ω</td>
<td>\omega \Omega</td>
</tr>
</tbody></table>
]]></content>
  </entry>
  <entry>
    <title>经验模态分解</title>
    <url>/2021/12/24/%E8%AE%BA%E6%96%87%E7%9B%B8%E5%85%B3/%E7%BB%8F%E9%AA%8C%E6%A8%A1%E6%80%81%E5%88%86%E8%A7%A3%EF%BC%88EMD%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="经验模态分解"><a href="#经验模态分解" class="headerlink" title="经验模态分解"></a>经验模态分解</h3><p>经验模态分解(Empirical Mode Decomposition, EMD)是依据数据自身的时间尺度特征来进行信号分解，无需预先设定任何基函数，是一种时频域信号处理方式。<code>EMD</code>在处理非平稳及非线性数据上具有明显的优势，<strong>适合分析非线性非平稳的信号序列</strong>，具有较高的信噪比。<br><strong>平稳信号</strong>：分布参数（均值，方差，协方差等）或者分布规律随着时间不发生变化<br><strong>非平稳信号</strong>：分布参数（均值，方差，协方差等）或者分布规律随着时间发生变化</p>
<p>该方法的关键是经验模式分解，使负载信号分解为有限个本征信号（Intrinsic Mode Function, IMF），分解出来的各个<code>IMF</code>分量包含了原信号的不同时间尺度的局部特征信息。通俗理解就是，<code>EMD</code>是一台机器，将一对混杂的硬币投进去，其会自动按照1元、5毛、1毛、5分、1分分好。</p>
<h4 id="EMD原理"><a href="#EMD原理" class="headerlink" title="EMD原理"></a>EMD原理</h4><p>在物理上，如果瞬时频率有意义，那么函数必须是对称的，局部均值为零，并且具有相同的过零点和极值点数目。任何信号都是由若干本征模函数组成，一个<strong>本征模函数必须满足以下两个条件：</strong></p>
<ul>
<li>函数在整个时间范围内，局部极值点和过零点的数目必须相等或最多相差一个</li>
<li>在任意时刻点，局部最大值的包络（上包络线）和局部最小值的包络（下包络线）平均必须为零，即上下包络线相对于时间轴局部对称</li>
</ul>
<p>画图解释：</p>
<ol>
<li><p>图线要反复跨越x轴</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/v2-0e5b832aee81e8a9068c9665e6eb2a3a_720w.jpg" alt="img"></p>
<center>在整个数据段内，极值点的个数和过零点的个数必须相等或相差最多不能超过一个</center>

<p>而不能像这样某次穿过零点后出现多个极点：</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/v2-921bc09334db7a4e443578091117788f_720w.jpg" alt="img"></p>
</li>
</ol>
<center>极点数目偏多</center>

<ol start="2">
<li><p>包络线要对称：</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/v2-8826ddaefd1cebee1841bf5ff083c494_720w.jpg" alt="img"></p>
<center>包络线对称</center>

<p>而不能像这样：</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/v2-deb9cd0d0dcb8a154f8621276cce9972_720w.jpg" alt="img"></p>
<center>包络线不对称</center></li>
</ol>
<p>对于上述第二条说明：他把经典的全局性要求修改为局部性要求，使瞬时频率不再受不对称波形所形成的不必要的波动所影响，实际上，这个条件应为“数据的局部均值是零”。但是对于非平稳数据来说，计算局部均值涉及到“局部时间尺度”的概念，而这是很难定义的，因此，在第二个条件中使用了局部极大值和局部极小值包络的平均为零来代替，是信号的波形局部对称。</p>
<p><code>EMD</code>将输入信号分解为几个本征模函数和一个残差组成，即由下列公式组成：</p>
<p>$$<br>I ( n ) = \sum _ { m = 1 } ^ { M } \operatorname { I M F _ { m } ( n ) + \operatorname { Res } _{m} ( n ) }<br>$$<br>其中<em>I</em>(n)表示输入信号，IMF<sub>m</sub>表示M<sup>th</sup>的本征模函数，Res<sub>M</sub>(n)表示残差</p>
<h4 id="EMD分解过程"><a href="#EMD分解过程" class="headerlink" title="EMD分解过程"></a>EMD分解过程</h4><p>提取<code>IMF</code>的过程称为筛选，筛选的过程如下：</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/emd_0.png" alt="emd分解"></p>
<ol>
<li>标出局部极值点</li>
<li>通过<strong>三次样条插值</strong>（cubic spline line）连接极大值点构成上包络线（upper envelope）,连接极小值点构成下包络线（lower envelope）</li>
<li>求上下包络线的均值m<sub>1</sub></li>
<li>用输入信号减去上下包络线均值</li>
</ol>
<p>$$<br>X ( t ) - m _ { 1 } = h _ { 1 }<br>$$</p>
<p>​        上述过程的一次迭代不能保证h1是本征模函数（<code>IMF</code>），需要重复上述过程，直到h<sub>1</sub>是本征模函数（<code>IMF</code>）</p>
<h4 id="停机准则"><a href="#停机准则" class="headerlink" title="停机准则"></a>停机准则</h4><p>停机准则决定了一个本征模函数（<code>IMF</code>）筛选过程执行的数目，有如下停机准则</p>
<ul>
<li><p>标准偏差（Standard Deviation, SD）<br>$$<br>S D _ { k } = \sum _ { t = 0 } ^ { T } \frac { | h _ { k - 1 } ( t ) - h _ { k } ( t ) |  ^ { 2 } } { h _ { k - 1 } ^ { 2 } (t)}<br>$$<br>当SD的值小于给定的阈值时，筛选过程停止</p>
</li>
<li><p>S Number准则</p>
<p>定义为过零点和极值点相等或者至多差为1的连续筛选数目。一个S-Number被提前设置，只有当S次连续筛选后，每一次过零点和极值点保持相同（相等或者至多差1），筛选过程才停止</p>
</li>
<li><p>阈值方法</p>
<p>阈值方法设置两个阈值，确保全局小的扰动同时考虑局部大的偏移</p>
</li>
</ul>
<p>选择停机准则后，第一个<code>IMF</code>（c<sub>1</sub>）可以获得，c<sub>1</sub>为包含输入信号最大频率的成分（component）,之后分离c<sub>1</sub><br>$$<br>X ( t ) - c _ { 1 } = r _ { 1 }<br>$$<br>利用r<sub>1</sub>作为输入，获得其他的本征模函数</p>
<h4 id="EMD限制（Limitations）"><a href="#EMD限制（Limitations）" class="headerlink" title="EMD限制（Limitations）"></a>EMD限制（Limitations）</h4><p><code>EMD</code>的主要<strong>优点</strong>有如下：</p>
<ul>
<li><strong>EMD具有数据驱动的自适应性，能分析非线性非平稳信号，不受Heisenberg测不准原理制约等优点。</strong></li>
<li>EMD在非线性非平稳信号分析中具有显著优势。与传统分析技术相比，<strong>EMD无需选择基函数，其分解基于信号本身极值点的分布。</strong></li>
</ul>
<p><code>EMD</code>的主要<strong>缺点</strong>有如下：</p>
<ul>
<li><p>末端效应</p>
<p>末端效应发生在信号的开始和结尾，因为在信号开始之前和结尾之后没有样本点被考虑。大多数情况下，末端点并不是信号的极值，但是在执行<code>EMD</code>的过程中，极值包络线会在末端点发散（diverge），导致错误，进而扭曲了<code>IMF</code>在末端点的波形，而且这种错误在<code>EMD</code>分解过程中会累积</p>
</li>
<li><p>模态混叠问题</p>
<p>模态混叠问题发上在<code>EMD</code>的执行过程中。出现下列情况之一就称为模态混合</p>
<ul>
<li>在同一个<code>IMF</code>分量中，存在尺度分布范围很宽却又各不相同的信号</li>
<li>在不同的<code>IMF</code>分量中，存在着尺度相近的信号</li>
</ul>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20211227120152132.png" alt="image-20211227120152132"></p>
<p>模态混叠问题使得特征提取、模型训练、模式识别变得困难，<code>IMF</code>失去了单一特征尺度的特征。<strong>集成经验模态分解(Ensemble empirical mode decomposition, EEMD)被提出用来解决模态混叠问题</strong></p>
</li>
</ul>
<h4 id="EMD和其他方法对比"><a href="#EMD和其他方法对比" class="headerlink" title="EMD和其他方法对比"></a>EMD和其他方法对比</h4><p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/emd_1.png" alt="结果对比"></p>
<h3 id="集成经验模态分解（EEMD）"><a href="#集成经验模态分解（EEMD）" class="headerlink" title="集成经验模态分解（EEMD）"></a>集成经验模态分解（EEMD）</h3><p>为了改善测量的准确性，集成平均是有效的方法（也就是多次测量取平均值）。信号极值点影响<code>IMF</code>,若分布不均匀时会出现<strong>模态混叠</strong>，白噪声的频谱均匀分布，白噪声是的信号会自动分布到合适的参考尺度上。由于零均值噪声的特性，噪音经过多次的平均计算后会相互抵消，这样集成均值的计算结果与原始信号的差值随着集成平均的次数增加而减少</p>
<h4 id="EEMD的分解"><a href="#EEMD的分解" class="headerlink" title="EEMD的分解"></a>EEMD的分解</h4><ol>
<li>给原始信号添加白噪声序列</li>
<li>分解带有白噪声序列的输入信号，得到<code>IMFs</code>（第一次测量得到一系列的<code>IMFs</code>）</li>
<li>重复第一和第二步，每次添加不同的白噪声序列（执行多次测量）</li>
<li>获取相关<code>IMFs</code>集成的均值作为最后的结果（理解为多次测量取平均）</li>
</ol>
<p>添加的白噪声的两个属性</p>
<ul>
<li>添加的白噪声导致所有时间尺度上机制分布的相对均匀分布（The added white noise leads to relatively even distribution of extrema distribution on all timescales）</li>
<li>通过集成平均，添加的噪声会被移除（噪声的均值为0）</li>
</ul>
<h4 id="集成经验模态分解（EEMD）优缺点"><a href="#集成经验模态分解（EEMD）优缺点" class="headerlink" title="集成经验模态分解（EEMD）优缺点"></a>集成经验模态分解（EEMD）优缺点</h4><p><strong>优点：</strong></p>
<ul>
<li>该算法利用<strong>EMD滤波器组行</strong>为及<strong>白噪声频谱均匀分布</strong>的统计特性，使Sifting过程信号极值点分布更趋匀称，<strong>有效抑制</strong>由间歇性高频分量等因素造成的<strong>模态混叠</strong>。</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>在EEMD中，每个加噪信号hi(t)独立地被分解，使得每个hi(t)分解后可能产生<strong>不同数量的IMF</strong>，导致<strong>集合平均时IMF分量对齐困难。</strong></li>
<li>此外，添加的<strong>白噪声幅值和迭代次数依靠人为经验设置</strong>，当数值设置不当时，无法克服模态混叠。</li>
<li>集总平均次数一般在<strong>几百次</strong>以上，<strong>非常耗时</strong>。虽然增加集合平均次数可降低重构误差，但这是以<strong>增加计算成本</strong>为代价，且<strong>有限次数的集合平均并不能完全消除白噪声，</strong>导致算法重构误差大，分解完备性差。</li>
</ul>
<h3 id="代码实现EMD"><a href="#代码实现EMD" class="headerlink" title="代码实现EMD"></a>代码实现EMD</h3><ul>
<li><p>安装EMD包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install EMD-signal</span><br></pre></td></tr></table></figure></li>
<li><p>测试代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">values = dataset[<span class="string">&#x27;request&#x27;</span>].tolist()</span><br><span class="line">S = np.array(values)</span><br><span class="line">emd = EMD()</span><br><span class="line"><span class="comment"># emd.emd(S,max_imf=3)</span></span><br><span class="line">emd.emd(S)</span><br><span class="line">imfs, res = emd.get_imfs_and_residue()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制 IMF</span></span><br><span class="line">vis = Visualisation()</span><br><span class="line">vis.plot_imfs(imfs=imfs, residue=res, include_residue=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 绘制并显示所有提供的IMF的瞬时频率</span></span><br><span class="line"><span class="comment"># vis.plot_instant_freq(imfs=imfs)</span></span><br><span class="line">vis.show()</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="代码实现EEMD"><a href="#代码实现EEMD" class="headerlink" title="代码实现EEMD"></a>代码实现EEMD</h3><ul>
<li><p>测试代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Prepare and run EEMD</span></span><br><span class="line">eemd = EEMD(trials=<span class="number">50</span>)</span><br><span class="line">eemd.noise_seed(<span class="number">12345</span>)</span><br><span class="line">E_IMFs = eemd.eemd(S)</span><br><span class="line">imfNo = E_IMFs.shape[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># Plot results in a grid</span></span><br><span class="line">c = np.floor(np.sqrt(imfNo + <span class="number">1</span>))</span><br><span class="line">r = np.ceil((imfNo + <span class="number">1</span>) / c)</span><br><span class="line">plt.ioff()</span><br><span class="line">plt.subplot(r, c, <span class="number">1</span>)</span><br><span class="line">plt.plot(S, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">plt.title(<span class="string">&quot;Original signal&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(imfNo):</span><br><span class="line">    plt.subplot(r, c, num + <span class="number">2</span>)</span><br><span class="line">    plt.plot(E_IMFs[num], <span class="string">&quot;g&quot;</span>)</span><br><span class="line">    <span class="comment"># plt.xlim((tMin, tMax))</span></span><br><span class="line">    plt.title(<span class="string">&quot;Imf &quot;</span> + <span class="built_in">str</span>(num + <span class="number">1</span>))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20211227132458310.png" alt="image-20211227132458310"></p>
</li>
</ul>
<p>参考：</p>
<ul>
<li><a href="https://muyi110.github.io/2019/%E6%B5%85%E8%B0%88%E7%BB%8F%E9%AA%8C%E6%A8%A1%E6%80%81%E5%88%86%E8%A7%A3-EMD/">浅谈经验模态分解-EMD</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/40005057">这篇文章能让你明白经验模态分解（EMD）——基础理论篇</a></li>
<li><a href="https://blog.csdn.net/qinghuanduji/article/details/113801965">EMD的多种方法的介绍与优缺点总结</a></li>
</ul>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>信号处理</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaSE</title>
    <url>/2022/01/03/%E9%9D%A2%E8%AF%95/JavaSE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="JAVA基础"><a href="#JAVA基础" class="headerlink" title="JAVA基础"></a>JAVA基础</h3><h4 id="String，StringBuilder，StringBuffer的区别："><a href="#String，StringBuilder，StringBuffer的区别：" class="headerlink" title="String，StringBuilder，StringBuffer的区别："></a>String，StringBuilder，StringBuffer的区别：</h4>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.操作数量较少的字符串用String，不可修改的字符串；</span><br><span class="line">2.在单线程且操作大量字符串用StringBuilder,速度快，但线程不安全，可修改；</span><br><span class="line">3.在多线程且操作大量字符串用StringBuffer，线程安全，可修改。</span><br></pre></td></tr></table></figure>

<h4 id="String的拼接优化"><a href="#String的拼接优化" class="headerlink" title="String的拼接优化:"></a>String的拼接优化:</h4>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String s = s1 + s2;</span><br><span class="line">java实际运行时优化为</span><br><span class="line">String s = new StringBuilder(s1).append(s2).toString();</span><br></pre></td></tr></table></figure>

<h4 id="Java支持的数据类型有哪些"><a href="#Java支持的数据类型有哪些" class="headerlink" title="Java支持的数据类型有哪些"></a>Java支持的数据类型有哪些</h4>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Java语言支持的8种基本数据类型是：</span><br><span class="line">byte</span><br><span class="line">short</span><br><span class="line">int</span><br><span class="line">long</span><br><span class="line">float</span><br><span class="line">double</span><br><span class="line">boolean</span><br><span class="line">char</span><br></pre></td></tr></table></figure>

<h4 id="什么是自动拆装箱"><a href="#什么是自动拆装箱" class="headerlink" title="什么是自动拆装箱"></a>什么是自动拆装箱</h4>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">自动装箱是Java编译器在基本数据类型和对应的对象包装类型之间做的一个转化。比如：把int转化成Integer，double转化成Double，等等。反之就是自动拆箱</span><br></pre></td></tr></table></figure>

<h4 id="int-和-Integer-有什么区别"><a href="#int-和-Integer-有什么区别" class="headerlink" title="int 和 Integer 有什么区别"></a>int 和 Integer 有什么区别</h4>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Int是java的原始数据类型，Integer是java为int提供的封装类。</span><br><span class="line">Java为每个原始类型提供了封装类。</span><br><span class="line">原始类型封装类</span><br><span class="line">booleanBoolean</span><br><span class="line">charCharacter</span><br><span class="line">byteByte</span><br><span class="line">shortShort</span><br><span class="line">intInteger</span><br><span class="line">longLong</span><br><span class="line">floatFloat</span><br><span class="line">doubleDouble</span><br></pre></td></tr></table></figure>

<h4 id="amp-和-amp-amp-的区别"><a href="#amp-和-amp-amp-的区别" class="headerlink" title="&amp;和&amp;&amp;的区别"></a>&amp;和&amp;&amp;的区别</h4>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;运算符有两种用法：(1)按位与；(2)逻辑与。&amp;&amp;运算符是短路与运算。逻辑与跟短路与的差别是非常巨大的，虽然二者都要求运算符左右两端的布尔值都是true整个表达式的值才是true。&amp;&amp;之所以称为短路运算是因为，如果&amp;&amp;左边的表达式的值是false，右边的表达式会被直接短路掉，不会进行运算。很多时候我们可能都需要用&amp;&amp;而不是&amp;，例如在验证用户登录时判定用户名不是null而且不是空字符串，应当写为：username != null &amp;&amp;!username.equals(&quot;&quot;)，二者的顺序不能交换，更不能用&amp;运算符，因为第一个条件如果不成立，根本不能进行字符串的equals比较，否则会产生NullPointerException异常。</span><br></pre></td></tr></table></figure>

<h4 id="Java中如何跳出当前的多重嵌套循环"><a href="#Java中如何跳出当前的多重嵌套循环" class="headerlink" title="Java中如何跳出当前的多重嵌套循环"></a>Java中如何跳出当前的多重嵌套循环</h4>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在最外层循环前加一个标记如A，然后用break A;可以跳出多重循环</span><br></pre></td></tr></table></figure>

<h4 id="比较一下Java和JavaSciprt"><a href="#比较一下Java和JavaSciprt" class="headerlink" title="比较一下Java和JavaSciprt"></a>比较一下Java和JavaSciprt</h4>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JavaScript 与Java是两个公司开发的不同的两个产品。Java 是原Sun Microsystems公司推出的面向对象的程序设计语言，特别适合于互联网应用程序开发；而JavaScript是Netscape公司的产品，为了扩展Netscape浏览器的功能而开发的一种可以嵌入Web页面中运行的基于对象和事件驱动的解释性语言。JavaScript的前身是LiveScript；而Java的前身是Oak语言。</span><br><span class="line">下面对两种语言间的异同作如下比较：</span><br><span class="line">- 基于对象和面向对象：Java是一种真正的面向对象的语言，即使是开发简单的程序，必须设计对象；JavaScript是种脚本语言，它可以用来制作与网络无关的，与用户交互作用的复杂软件。它是一种基于对象（Object-Based）和事件驱动（Event-Driven）的编程语言，因而它本身提供了非常丰富的内部对象供设计人员使用。</span><br><span class="line">- 解释和编译：Java的源代码在执行之前，必须经过编译。JavaScript是一种解释性编程语言，其源代码不需经过编译，由浏览器解释执行。（目前的浏览器几乎都使用了JIT（即时编译）技术来提升JavaScript的运行效率）</span><br><span class="line">- 强类型变量和类型弱变量：Java采用强类型变量检查，即所有变量在编译之前必须作声明；JavaScript中变量是弱类型的，甚至在使用变量前可以不作声明，JavaScript的解释器在运行时检查推断其数据类型。</span><br><span class="line">- 代码格式不一样</span><br></pre></td></tr></table></figure>

<h4 id="数组-Array-和列表-ArrayList-的区别"><a href="#数组-Array-和列表-ArrayList-的区别" class="headerlink" title="数组(Array)和列表(ArrayList)的区别"></a>数组(Array)和列表(ArrayList)的区别</h4>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Array和ArrayList的不同点：</span><br><span class="line">Array可以包含基本类型和对象类型，ArrayList只能包含对象类型。</span><br><span class="line">Array大小是固定的，ArrayList的大小是动态变化的。</span><br><span class="line">ArrayList提供了更多的方法和特性，比如：addAll()，removeAll()，iterator()等等。</span><br><span class="line">对于基本类型数据，集合使用自动装箱来减少编码工作量。但是，当处理固定大小的基本数据类型的时候，这种方式相对比较慢。</span><br></pre></td></tr></table></figure>

<h4 id="什么是值传递和引用传递"><a href="#什么是值传递和引用传递" class="headerlink" title="什么是值传递和引用传递"></a>什么是值传递和引用传递</h4>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">值传递是对基本型变量而言的,传递的是该变量的一个副本,改变副本不影响原变量.</span><br><span class="line">引用传递一般是对于对象型变量而言的,传递的是该对象地址的一个副本, 并不是原对象本身 。所以对引用对象进行操作会同时改变原对象.一般认为,java内的传递都是值传递</span><br></pre></td></tr></table></figure>

<h4 id="为什么会出现4-0-3-6-0-40000001这种现象"><a href="#为什么会出现4-0-3-6-0-40000001这种现象" class="headerlink" title="为什么会出现4.0-3.6=0.40000001这种现象"></a>为什么会出现4.0-3.6=0.40000001这种现象</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2进制的小数无法精确的表达10进制小数，计算机在计算10进制小数的过程中要先转换为2进制进行计算，这个过程中出现了误差。</span><br><span class="line">出现0.40000001的情况可以使用BigDecimal类解决，其实浮点数基本上都不精确，BigDecimal使用String来解决的</span><br></pre></td></tr></table></figure>

<h4 id="十进制的数在内存中是怎么存的"><a href="#十进制的数在内存中是怎么存的" class="headerlink" title="十进制的数在内存中是怎么存的"></a>十进制的数在内存中是怎么存的</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">补码的形式。把一个十进制转换为二进制的方法是：把被转换的十进制数反复地除以 2，直到商为 0 为止，所得余数（从末位读起）就是这个数的二进制表示，简单地说，就是 &quot;除 2 取余法&quot;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20211125151652729.png" alt="image-20211125151652729"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20211125151705033.png" alt="image-20211125151705033"></p>
<h4 id="原码、反码和补码"><a href="#原码、反码和补码" class="headerlink" title="原码、反码和补码"></a>原码、反码和补码</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">原码：是一种计算机中对数字的二进制定点表示法。原码表示法在数值前面增加了一位符号位（即最高位为符号位）：正数该位为 0，负数该位为 1</span><br><span class="line"></span><br><span class="line">反码：一个数字用原码表示是容易理解的，但是需要单独一个位来表示符号位，并且在进行加法时，计算机需要先识别某个二进制原码是正数还是负数，识别出来之后再进行相应的运算。这样效率不高，能不能让计算机在进行运算时不用去管符号位，也就是让符号位参与运算。要实现这个功能，我们就要用到反码。</span><br><span class="line">对于单个数值（二进制的 0 和 1）而言，对其进行取反操作就是将 0 变为 1，1 变为 0。正数的反码和原码一样，负数的反码就是在原码的基础上符号位保持不变，其他位取反。</span><br><span class="line"></span><br><span class="line">补码：补码是一种用二进制表示有符号数的方法。正数和 0 的补码就是该数字本身。负数的补码则是将其对应正数按位取反再加 1。补码系统的最大优点是可以在加法或减法处理中，不需因为数字的正负而使用不同的计算方式</span><br><span class="line">只要一种加法电路就可以处理各种有符号数加法，而且减法可以用一个数加上另一个数的补码来表示，因此只要有加法电路和补码电路即可以完成各种有符号数加法和减法，在电路设计上相当方便。</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">十进制</th>
<th align="center">原码</th>
<th align="center">反码</th>
<th align="center">补码</th>
</tr>
</thead>
<tbody><tr>
<td align="center">6</td>
<td align="center">0000 0110</td>
<td align="center">0000 0110</td>
<td align="center">0000 0110</td>
</tr>
<tr>
<td align="center">-3</td>
<td align="center">1000 0011</td>
<td align="center">1111 1100</td>
<td align="center">1111 1101</td>
</tr>
</tbody></table>
<h4 id="符号“-”比较的是什么"><a href="#符号“-”比较的是什么" class="headerlink" title="符号“==”比较的是什么"></a>符号“==”比较的是什么</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">“==”对比两个对象基于内存引用，如果两个对象的引用完全相同（指向同一个对象）时，“==”操作将返回true，否则返回false。“==”如果两边是基本类型，就是比较数值是否相等。</span><br></pre></td></tr></table></figure>



<h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><h4 id="final关键字是怎么用的"><a href="#final关键字是怎么用的" class="headerlink" title="final关键字是怎么用的"></a>final关键字是怎么用的</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">当用final修饰一个类时，表明这个类不能被继承。也就是说，如果一个类你永远不会让他被继承，就可以用final进行修饰。final类中的成员变量可以根据需要设为final，但是要注意final类中的所有成员方法都会被隐式地指定为final方法。</span><br><span class="line"></span><br><span class="line">对于一个final变量，如果是基本数据类型的变量，则其数值一旦在初始化之后便不能更改；如果是引用类型的变量，则在对其初始化之后便不能再让其指向另一个对象。</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>面试</category>
      </categories>
  </entry>
  <entry>
    <title>Java多线程与并发编程</title>
    <url>/2022/01/03/%E9%9D%A2%E8%AF%95/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Java多线程与并发编程在面试中的高频考点"><a href="#Java多线程与并发编程在面试中的高频考点" class="headerlink" title="Java多线程与并发编程在面试中的高频考点"></a>Java多线程与并发编程在面试中的高频考点</h1><h2 id="1-说说什么是线程安全？如何实现线程安全？"><a href="#1-说说什么是线程安全？如何实现线程安全？" class="headerlink" title="1. 说说什么是线程安全？如何实现线程安全？"></a>1. 说说什么是线程安全？如何实现线程安全？</h2><h3 id="什么是线程安全"><a href="#什么是线程安全" class="headerlink" title="什么是线程安全"></a>什么是线程安全</h3><p>答：当多个线程同时访问一个对象时，如果不考虑这些线程在运行时环境下的调度和交替执行，也不 需要进行额外的同步，或者在调用方进行任何其他的协调操作，调用这个对象的行为都可以获得正确的结果，那就称这个对象是线程安全的。</p>
<h3 id="实现线程安全的三大方法"><a href="#实现线程安全的三大方法" class="headerlink" title="实现线程安全的三大方法"></a>实现线程安全的三大方法</h3><ul>
<li>互斥同步：同步是指多个线程并发访问共享数据时，保证共享数据在同一时刻只被一条（或一些，当使用信号量的时候）线程使用。而互斥是实现同步的一种手段，临界区、互斥量和信号量都是常见的互斥实现方式。Java中实现互斥同步的手段主要有synchronized关键字或ReentrantLock等。</li>
<li>非阻塞同步，类似是一种乐观并发的策略，比如CAS。</li>
<li>无同步方案，比如使用ThreadLocal</li>
</ul>
<h3 id="synchronized关键字或ReentrantLock的区别是什么？"><a href="#synchronized关键字或ReentrantLock的区别是什么？" class="headerlink" title="synchronized关键字或ReentrantLock的区别是什么？"></a>synchronized关键字或ReentrantLock的区别是什么？</h3><p><strong>相同点：</strong></p>
<ol>
<li>都是可重入锁</li>
<li>都保证了可见性和互斥性</li>
<li>都可以用于控制多线程对共享对象的访问</li>
</ol>
<p><strong>不同点：</strong></p>
<ol>
<li>ReentrantLock等待可中断</li>
<li>synchronized中的锁是非公平的，ReentrantLock默认也是非公平的，但是可以通过修改参数来实现共平锁。</li>
<li>ReentrantLock绑定多个条件</li>
<li>synchronized是Java中的关键字，是JVM级别的锁，而ReentrantLock是一个Lock接口下的实现类，是API层面的锁。</li>
<li>synchronized隐试获取锁和释放锁，ReetrantLock显示获取和释放锁，在使用时避免程序异常无法释放锁，需要在finally控制块中进行解锁操作。</li>
</ol>
<h2 id="2-Java中线程的状态有哪些？线程间的通信方式有哪些？"><a href="#2-Java中线程的状态有哪些？线程间的通信方式有哪些？" class="headerlink" title="2. Java中线程的状态有哪些？线程间的通信方式有哪些？"></a>2. Java中线程的状态有哪些？线程间的通信方式有哪些？</h2><p>答：Java中线程生命周期分为新建（New）、运行（Runnable）、阻塞（Blocked）、无限期等待（Waiting）、限期等待（Time Waiting）和结束（Terminated）这6种状态。</p>
<table>
<thead>
<tr>
<th>状态名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>New</td>
<td>初始状态，线程被构建，但是还没有调用start()方法</td>
</tr>
<tr>
<td>Runnable</td>
<td>运行状态，Java线程将操作系统中的就绪和运行两种状态笼统地称作“运行中”</td>
</tr>
<tr>
<td>Blocked</td>
<td>阻塞状态，表示线程阻塞于锁</td>
</tr>
<tr>
<td>Waiting</td>
<td>等待状态，表示线程进入等待状态，进入该状态表示当前线程需要等待其他线程做出一些特定动作（通知或中断）</td>
</tr>
<tr>
<td>Time Waiting</td>
<td>超时等待状态，该状态不同于Waiting，它是可以在指定的时间自行返回的</td>
</tr>
<tr>
<td>Terminated</td>
<td>终止状态，表示当前线程已经执行完毕</td>
</tr>
</tbody></table>
<p>Java中线程间<strong>通信方式</strong>有：</p>
<p><strong>互斥量（Mutex）</strong>：采用互斥对象机制，只有拥有互斥对象的线程才有访问公共资源的权限。因为互斥对象只有一个，所以可以保证公共资源不会被多个线程同时访问。比如Java中的synchronized关键词和各种Lock都是这种机制。</p>
<p><strong>信号量（Semphares）</strong>:它允许同一时刻多个线程访问同一资源，但是需要控制同一时刻访问此资源的最大线程数量</p>
<p><strong>事件（Event）</strong>：Wait/Notify：通过通知操作的方式来保持多线程同步，还可以方便的实现多线程优先级的比较操作</p>
<h3 id="sleep后进入什么状态，wait后进入什么状态？"><a href="#sleep后进入什么状态，wait后进入什么状态？" class="headerlink" title="sleep后进入什么状态，wait后进入什么状态？"></a>sleep后进入什么状态，wait后进入什么状态？</h3><p>答：sleep后进入Time waiting超市等待状态，wait后进入waiting状态</p>
<h3 id="sleep和wait的区别"><a href="#sleep和wait的区别" class="headerlink" title="sleep和wait的区别"></a>sleep和wait的区别</h3><ul>
<li> sleep方法属于Thread类，wait方法属于Object类</li>
<li> sleep方法暂停执行指定的时间，让出CPU给其他线程，但其监控状态依然保持在指定的时间过后又会自动恢复运行状态</li>
<li> 在调用sleep方法的过程中，线程不会释放对象锁，而wait会释放对象锁。</li>
</ul>
<h3 id="wait为什么是数Object类下面的方法？"><a href="#wait为什么是数Object类下面的方法？" class="headerlink" title="wait为什么是数Object类下面的方法？"></a>wait为什么是数Object类下面的方法？</h3><p>所谓的释放锁资源实际是通知对象内置的monitor对象进行释放，而只有所有对象都有内置的monitor对象才能实现任何对象的锁资源都可以释放。又因为所有类都继承自Object，所以wait()就成了Object方法，也就是通过wait()来通知对象内置的monitor对象释放，而且事实上因为这涉及到硬件底层的操作，所以wait()方法是native方法，底层是用C写的。</p>
<h3 id="start方法和run方法有什么区别？"><a href="#start方法和run方法有什么区别？" class="headerlink" title="start方法和run方法有什么区别？"></a>start方法和run方法有什么区别？</h3><ol>
<li>star方法用于启动线程，真正实现了多线程运行。在调用了线程的start方法周，线程会在后台执行，无须等待run方法体的代码执行完毕。</li>
<li>通过调用start方法启动一个线程时，此线程处于就绪状态，并没有运行。</li>
<li>run方法也叫线程体，包含了要执行的线程的逻辑代码，在调用run方法后，线程就进入运行状态，开始运行run方法中的代码，在run方法运行结束后，该线程终止，CPU在调度其他线程。 </li>
</ol>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><ul>
<li><a href="https://www.nowcoder.com/discuss/805699?source_id=profile_create_nctrack&channel=-1">Java多线程与并发编程在面试中的高频考点！</a></li>
</ul>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
  </entry>
  <entry>
    <title>JavaSE</title>
    <url>/2022/01/03/%E9%9D%A2%E8%AF%95/Linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="linux基本命令"><a href="#linux基本命令" class="headerlink" title="linux基本命令"></a><a href="https://www.nowcoder.com/discuss/807495?type=all&order=recall&pos=&page=0&ncTraceId=&channel=-1&source_id=search_all_nctrack&gio_id=5C27F5E8CC05D3FEFF557CD8FC40F544-1641215720650">linux基本命令</a></h2><h6 id="cd-（change-directory：英文释义是改变目录）切换目录"><a href="#cd-（change-directory：英文释义是改变目录）切换目录" class="headerlink" title="cd （change directory：英文释义是改变目录）切换目录"></a>cd （change directory：英文释义是改变目录）切换目录</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ../ ;跳到上级目录</span><br><span class="line">cd /opt ;不管现在到那直接跳到指定的opt文件夹中</span><br><span class="line">cd ~ ;切换当前用户的家目录。root用户的家目录就是root目录。 复制代码</span><br></pre></td></tr></table></figure>



<h6 id="pwd-（print-working-directory：显示当前工作目录的绝对路径）"><a href="#pwd-（print-working-directory：显示当前工作目录的绝对路径）" class="headerlink" title="pwd （print working directory：显示当前工作目录的绝对路径）"></a>pwd （print working directory：显示当前工作目录的绝对路径）</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwd </span><br><span class="line">显示当前的绝对路径 复制代码</span><br></pre></td></tr></table></figure>



<h6 id="ls-（ls：list的缩写，查看列表）查看当前目录下的所有文件夹（ls-只列出文件名或目录名）"><a href="#ls-（ls：list的缩写，查看列表）查看当前目录下的所有文件夹（ls-只列出文件名或目录名）" class="headerlink" title="ls （ls：list的缩写，查看列表）查看当前目录下的所有文件夹（ls 只列出文件名或目录名）"></a>ls （ls：list的缩写，查看列表）查看当前目录下的所有文件夹（ls 只列出文件名或目录名）</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -a ;显示所有文件夹,隐藏文件也显示出来</span><br><span class="line">ls -R ;连同子目录一起列出来 复制代码</span><br></pre></td></tr></table></figure>



<h6 id="ll-（ll：list的缩写，查看列表详情）查看当前目录下的所有详细信息和文件夹（ll-结果是详细-有时间-是否可读写等信息）"><a href="#ll-（ll：list的缩写，查看列表详情）查看当前目录下的所有详细信息和文件夹（ll-结果是详细-有时间-是否可读写等信息）" class="headerlink" title="ll （ll：list的缩写，查看列表详情）查看当前目录下的所有详细信息和文件夹（ll 结果是详细,有时间,是否可读写等信息）"></a>ll （ll：list的缩写，查看列表详情）查看当前目录下的所有详细信息和文件夹（ll 结果是详细,有时间,是否可读写等信息）</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ll -a ;显示所有文件,隐藏文件也显示出来</span><br><span class="line">ll -R ;连同子目录内容一起列出来</span><br><span class="line">ll -h ;友好展示详情信息,可以看大小</span><br><span class="line">ll -al ;即能显示隐藏文件又能显示详细列表。 复制代码</span><br></pre></td></tr></table></figure>



<h6 id="touch-（touch：创建文件）创建文件"><a href="#touch-（touch：创建文件）创建文件" class="headerlink" title="touch （touch：创建文件）创建文件"></a>touch （touch：创建文件）创建文件</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">touch test.txt  ;创建test.txt文件</span><br><span class="line">touch /opt/java/test.java ;在指定目录创建test.java文件 复制代码</span><br></pre></td></tr></table></figure>



<h6 id="mkdir-（mkdir：创建目录）-创建目录"><a href="#mkdir-（mkdir：创建目录）-创建目录" class="headerlink" title="mkdir （mkdir：创建目录） 创建目录"></a>mkdir （mkdir：创建目录） 创建目录</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir 文件夹名称 ;在此目录创建文件夹</span><br><span class="line">mkdir /opt/java/jdk ;在指定目录创建文件夹 复制代码</span><br></pre></td></tr></table></figure>



<h6 id="cat-（concatenate：显示或把多个文本文件连接起来）查看文件命令（可以快捷查看当前文件的内容）（不能快速定位到最后一页）"><a href="#cat-（concatenate：显示或把多个文本文件连接起来）查看文件命令（可以快捷查看当前文件的内容）（不能快速定位到最后一页）" class="headerlink" title="cat （concatenate：显示或把多个文本文件连接起来）查看文件命令（可以快捷查看当前文件的内容）（不能快速定位到最后一页）"></a>cat （concatenate：显示或把多个文本文件连接起来）查看文件命令（可以快捷查看当前文件的内容）（不能快速定位到最后一页）</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat lj.log ;快捷查看文件命令 </span><br><span class="line">Ctrl + c ;暂停显示文件</span><br><span class="line">Ctrl + d ;退出查看文件命令 复制代码</span><br></pre></td></tr></table></figure>



<h6 id="more-（more：更多的意思）分页查看文件命令（不能快速定位到最后一页）"><a href="#more-（more：更多的意思）分页查看文件命令（不能快速定位到最后一页）" class="headerlink" title="more （more：更多的意思）分页查看文件命令（不能快速定位到最后一页）"></a>more （more：更多的意思）分页查看文件命令（不能快速定位到最后一页）</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">回车：向下n行，需要定义，默认为1行。</span><br><span class="line">空格键：向下滚动一屏或Ctrl+F</span><br><span class="line">B：返回上一层或Ctrl+B</span><br><span class="line">q：退出more 复制代码</span><br></pre></td></tr></table></figure>



<h6 id="less-（lese：较少的意思）分页查看文件命令（可以快速定位到最后一页）"><a href="#less-（lese：较少的意思）分页查看文件命令（可以快速定位到最后一页）" class="headerlink" title="less （lese：较少的意思）分页查看文件命令（可以快速定位到最后一页）"></a>less （lese：较少的意思）分页查看文件命令（可以快速定位到最后一页）</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">less -m 显示类似于more命令的百分比。</span><br><span class="line">less -N 显示每行的行号。(大写的N)</span><br><span class="line">两参数一起使用如：less -mN 文件名，如此可分页并显示行号。</span><br><span class="line"></span><br><span class="line">空格键：前下一页或page down。</span><br><span class="line">回车：向下一行。</span><br><span class="line">b：后退一页 或 page up。</span><br><span class="line">q：退出。</span><br><span class="line">d：前进半页。</span><br><span class="line">u：后退半页 复制代码</span><br></pre></td></tr></table></figure>



<h6 id="tail（尾巴）-查看文件命令（看最后多少行）"><a href="#tail（尾巴）-查看文件命令（看最后多少行）" class="headerlink" title="tail（尾巴） 查看文件命令（看最后多少行）"></a>tail（尾巴） 查看文件命令（看最后多少行）</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tail -10 ;文件名 看最后10行 复制代码</span><br></pre></td></tr></table></figure>



<h6 id="cp（copy单词缩写，复制功能）"><a href="#cp（copy单词缩写，复制功能）" class="headerlink" title="cp（copy单词缩写，复制功能）"></a>cp（copy单词缩写，复制功能）</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp /opt/java/java.log /opt/logs/ ;把java.log 复制到/opt/logs/下</span><br><span class="line">cp /opt/java/java.log /opt/logs/aaa.log ;把java.log 复制到/opt/logs/下并且改名为aaa.log</span><br><span class="line">cp -r /opt/java /opt/logs ;把文件夹及内容复制到logs文件中 复制代码</span><br></pre></td></tr></table></figure>



<h6 id="mv（move单词缩写，移动功能，该文件名称功能）"><a href="#mv（move单词缩写，移动功能，该文件名称功能）" class="headerlink" title="mv（move单词缩写，移动功能，该文件名称功能）"></a>mv（move单词缩写，移动功能，该文件名称功能）</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv /opt/java/java.log /opt/mysql/ ;移动文件到mysql目录下</span><br><span class="line">mv java.log mysql.log ;把java.log改名为mysql.log 复制代码</span><br></pre></td></tr></table></figure>



<h6 id="rm（remove：移除的意思）删除文件，或文件夹"><a href="#rm（remove：移除的意思）删除文件，或文件夹" class="headerlink" title="rm（remove：移除的意思）删除文件，或文件夹"></a>rm（remove：移除的意思）删除文件，或文件夹</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-f或--force 强制删除文件或目录。删除文件不包括文件夹的文件    </span><br><span class="line">-r或-R或--recursive 递归处理，将指定目录下的所有文件及子目录一并删除。 </span><br><span class="line">-rf 强制删除文件夹及内容</span><br><span class="line"></span><br><span class="line">rm 文件名 ;安全删除命令  （yes删除 no取消）</span><br><span class="line">rm -rf 强制删除文件夹及内容</span><br><span class="line">rm -rf *  删除当前目录下的所有内容。</span><br><span class="line">rm -rf /* 删除Linux系统根目录下所有的内容。系统将完蛋。 复制代码</span><br></pre></td></tr></table></figure>



<h6 id="find-（find：找到的意思）查找指定文件或目录"><a href="#find-（find：找到的意思）查找指定文件或目录" class="headerlink" title="find （find：找到的意思）查找指定文件或目录"></a>find （find：找到的意思）查找指定文件或目录</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* 表示0~多个任意字符。</span><br><span class="line"></span><br><span class="line">find -name 文件名;按照指定名称查找在当前目录下查找文件</span><br><span class="line">find / -name 文件名按照指定名称全局查找文件</span><br><span class="line">find -name &#x27;*文件名&#x27; ;任意前缀加上文件名在当前目录下查找文件</span><br><span class="line">find / -name &#x27;*文件名*&#x27; ;全局进行模糊查询带文件名的文件 复制代码</span><br></pre></td></tr></table></figure>



<h6 id="vi-（VIsual：视觉）文本编辑器-类似win的记事本-（操作类似于地下的vim命令，看底下vim-的操作）"><a href="#vi-（VIsual：视觉）文本编辑器-类似win的记事本-（操作类似于地下的vim命令，看底下vim-的操作）" class="headerlink" title="vi （VIsual：视觉）文本编辑器 类似win的记事本 （操作类似于地下的vim命令，看底下vim 的操作）"></a>vi （VIsual：视觉）文本编辑器 类似win的记事本 （操作类似于地下的vim命令，看底下vim 的操作）</h6><h6 id="vim-（VI-IMproved：改进版视觉）改进版文本编辑器-（不管是文件查看还是文件编辑-按-Shift-上或者下可以上下移动查看视角）"><a href="#vim-（VI-IMproved：改进版视觉）改进版文本编辑器-（不管是文件查看还是文件编辑-按-Shift-上或者下可以上下移动查看视角）" class="headerlink" title="vim （VI IMproved：改进版视觉）改进版文本编辑器   （不管是文件查看还是文件编辑 按 Shift + 上或者下可以上下移动查看视角）"></a>vim （VI IMproved：改进版视觉）改进版文本编辑器   （不管是文件查看还是文件编辑 按 Shift + 上或者下可以上下移动查看视角）</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入”vim 文件名” 打开文件，刚刚时是”一般模式”。</span><br><span class="line"></span><br><span class="line">一般模式：可以浏览文件内容，可以进行文本快捷操作。如单行复制，多行复制，单行删除，多行删除，（退出）等。</span><br><span class="line">插入模式：可以编辑文件内容。</span><br><span class="line">底行模式：可以进行强制退出操作,不保存   :q!</span><br><span class="line">         可以进行保存并退出操作       :wq</span><br><span class="line"></span><br><span class="line">按下”i”或”a”或”o”键，从”一般模式”，进入”插入模式（编辑模式）”。</span><br><span class="line">在编辑模式下按”Esc” 即可到一般模式</span><br><span class="line">在一般模式下按”:”，冒号进入底行模式。</span><br><span class="line"></span><br><span class="line">在一般模式下的快捷键</span><br><span class="line">    dd ;删除一整行</span><br><span class="line">    X ;向前删除  等同于windowns系统中的删除键</span><br><span class="line">    x ;向后删除和大写x相反方向</span><br><span class="line">    Ctrl + f ;向后看一页</span><br><span class="line">    Ctrl + b ;向前看一页</span><br><span class="line">    u ;撤销上一步操作</span><br><span class="line">    /word ;向下查找word关键字  输入:n查找下一个,N查找上一个（不管是哪个查找都是全局查找 只不过n的方向相反）</span><br><span class="line">    ?log ;向上查找log关键字  输入:n查找上一个,N查找下一个</span><br><span class="line">    :1,90s/redis/Redis/g ;把1-90行的redis替换为Redis。语法n1,n2s/原关键字/新关键字/g，n1代表其实行,n2代表结尾行,g是必须要的</span><br><span class="line">    :0 ;光标移动到第一行</span><br><span class="line">    :$ ;光标移动到最后一行</span><br><span class="line">    :300 ;光标移动到300行,输入多少数字移动到多少行</span><br><span class="line">    :w  ;保存</span><br><span class="line">    :w! ;强制保存</span><br><span class="line">    :q  ;退出</span><br><span class="line">    :q! ;强制退出</span><br><span class="line">    5dd ;删除后面5行,打一个参数为自己填写</span><br><span class="line">    5x ;删除此光标后面5个字符</span><br><span class="line">    d1G ;删除此光标之前的所有</span><br><span class="line">    d0 ;从光标当前位置删除到此行的第一个位置</span><br><span class="line">    yy ;复制</span><br><span class="line">    p ;在光标的下面进行粘贴</span><br><span class="line">    P ;在光标的上门进行粘贴 复制代码</span><br></pre></td></tr></table></figure>



<h6 id="管道命令（把多个命令组合起来使用）"><a href="#管道命令（把多个命令组合起来使用）" class="headerlink" title="| 管道命令（把多个命令组合起来使用）"></a>| 管道命令（把多个命令组合起来使用）</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">管道命令的语法：命令1 | 命令2 | 命令3。 复制代码</span><br></pre></td></tr></table></figure>



<h6 id="grep-（grep-：正则表达式）正则表达式，用于字符串的搜索工作-模糊查询-。不懂可以先过"><a href="#grep-（grep-：正则表达式）正则表达式，用于字符串的搜索工作-模糊查询-。不懂可以先过" class="headerlink" title="grep （grep ：正则表达式）正则表达式，用于字符串的搜索工作(模糊查询)。不懂可以先过"></a>grep （grep ：正则表达式）正则表达式，用于字符串的搜索工作(模糊查询)。不懂可以先过</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">单独使用：</span><br><span class="line">grep String test.java ；在test.java文件中查找String的位置，返回整行</span><br><span class="line">一般此命令不会单独使用下面列几个常用的命令（地下通过管道命令组合起来使用）</span><br><span class="line"></span><br><span class="line">ps aux|grep java ；查找带java关键字的进程</span><br><span class="line">ll |grep java ；查找带java关键字的文件夹及文件 复制代码</span><br></pre></td></tr></table></figure>



<h6 id="yum-install-y-lrzsz-命令（实现win到Linux文件互相简单上传文件）"><a href="#yum-install-y-lrzsz-命令（实现win到Linux文件互相简单上传文件）" class="headerlink" title="yum install -y lrzsz 命令（实现win到Linux文件互相简单上传文件）"></a>yum install -y lrzsz 命令（实现win到Linux文件互相简单上传文件）</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#（实际上就是在Linux系统中下载了一个插件）下了了此安装包后就可以实现win系统到linux之间拉文件拉文件</span><br><span class="line">#等待下载完了就可以输入：</span><br><span class="line"></span><br><span class="line">rz  从win系统中选择文件上传到Linux系统中</span><br><span class="line"></span><br><span class="line">sz  文件名 选择Linux系统的文件复制到win系统中 复制代码</span><br></pre></td></tr></table></figure>



<h6 id="tar-（解压-压缩-命令）"><a href="#tar-（解压-压缩-命令）" class="headerlink" title="tar （解压 压缩 命令）"></a>tar （解压 压缩 命令）</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">常用的组合命令：</span><br><span class="line">-z 是否需要用gzip压缩。</span><br><span class="line">-c 建立一个压缩文件的参数指令(create) –压缩</span><br><span class="line">    -x 解开一个压缩文件的参数指令(extract) –解压  </span><br><span class="line">    -v 压缩的过程中显示文件(verbose)</span><br><span class="line">    -f 使用档名，在f之后要立即接档中(file)</span><br><span class="line">    常用解压参数组合：zxvf</span><br><span class="line">    常用压缩参数组合：zcvf </span><br><span class="line"></span><br><span class="line">解压命令：</span><br><span class="line">tar -zxvf redis-3.2.8.tar.gz ；解压到当前文件夹</span><br><span class="line">tar -zxvf redis-3.2.8.tar.gz -C /opt/java/ ；解压到指定目录</span><br><span class="line"></span><br><span class="line">压缩命令：（注意 语法有点反了，我反正每次都搞反）</span><br><span class="line">tar -zcvf redis-3.2.8.tar.gz  redis-3.2.8/  ;语法 tar -zcvf  压缩后的名称  要压缩的文件</span><br><span class="line">tar -zcvf 压缩后的文件（可指定目录）  要压缩的文件（可指定目录） 复制代码</span><br></pre></td></tr></table></figure>



<h6 id="ps-（process-status：进程状态，类似于windows的任务管理器）"><a href="#ps-（process-status：进程状态，类似于windows的任务管理器）" class="headerlink" title="ps （process status：进程状态，类似于windows的任务管理器）"></a>ps （process status：进程状态，类似于windows的任务管理器）</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">常用组合：ps -ef     标准的格式查看系统进程</span><br><span class="line">      ps -aux    BSD格式查看系统进程</span><br><span class="line">      ps -aux|grep redis  BSD格式查看进程名称带有redis的系统进程（常用技巧）</span><br><span class="line">//显示进程的一些属性,需要了解（ps aux）</span><br><span class="line">USER     //用户名</span><br><span class="line">PID         //进程ID号,用来杀死进程的</span><br><span class="line">%CPU     //进程占用的CPU的百分比</span><br><span class="line">%MEM     //占用内存的的百分比</span><br><span class="line">VSZ      //该进程使用的虚拟內存量（KB）</span><br><span class="line">RSS      //该进程占用的固定內存量（KB）</span><br><span class="line">STAT     //进程的状态</span><br><span class="line">START    //该进程被触发启动时间</span><br><span class="line">TIME     //该进程实际使用CPU运行的时间 复制代码</span><br></pre></td></tr></table></figure>



<h6 id="clear-清屏命令。（强迫症患者使用）"><a href="#clear-清屏命令。（强迫症患者使用）" class="headerlink" title="clear 清屏命令。（强迫症患者使用）"></a>clear 清屏命令。（强迫症患者使用）</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kill 命令用来中止一个进程。（要配合ps命令使用，配合pid关闭进程）</span><br><span class="line">（ps类似于打开任务管理器，kill类似于关闭进程）</span><br><span class="line">    kill -5 进程的PID ;推荐,和平关闭进程</span><br><span class="line">    kill -9 PID ;不推荐,强制杀死进程 复制代码</span><br></pre></td></tr></table></figure>



<h6 id="ifconfig命令"><a href="#ifconfig命令" class="headerlink" title="ifconfig命令"></a>ifconfig命令</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">用于查看和更改网络接口的地址和参数，包括IP地址、网络掩码、广播地址，使用权限是超级用户。（一般是用来查看的，很少更改）</span><br><span class="line">如果此命令输入无效，先输入yum -y install net-tools</span><br><span class="line">ifconfig 复制代码</span><br></pre></td></tr></table></figure>



<h6 id="ping-（用于检测与目标的连通性）语法：ping-ip地址"><a href="#ping-（用于检测与目标的连通性）语法：ping-ip地址" class="headerlink" title="ping （用于检测与目标的连通性）语法：ping ip地址"></a>ping （用于检测与目标的连通性）语法：ping ip地址</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">测试：</span><br><span class="line">1、在Windows操作系统中cmdipconfig，查看本机IP地址：</span><br><span class="line">2、再到LInux系统中输入 ping ip地址</span><br><span class="line">（公司电脑，我就不暴露Ip了,没图片  自己去试）</span><br><span class="line">按Ctrl + C 可以停止测试。 复制代码</span><br></pre></td></tr></table></figure>



<h6 id="free-命令-（显示系统内存）"><a href="#free-命令-（显示系统内存）" class="headerlink" title="free 命令 （显示系统内存）"></a>free 命令 （显示系统内存）</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#显示系统内存使用情况，包括物理内存、交互区内存(swap)和内核缓冲区内存。</span><br><span class="line">-b 以Byte显示内存使用情况</span><br><span class="line">-k 以kb为单位显示内存使用情况</span><br><span class="line">-m 以mb为单位显示内存使用情况</span><br><span class="line">-g 以gb为单位显示内存使用情况</span><br><span class="line">-s&lt;间隔秒数&gt; 持续显示内存</span><br><span class="line">-t 显示内存使用总合 复制代码</span><br></pre></td></tr></table></figure>



<h6 id="top-命令"><a href="#top-命令" class="headerlink" title="top 命令"></a>top 命令</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#显示当前系统正在执行的进程的相关信息，包括进程 ID、内存占用率、CPU 占用率等</span><br><span class="line">-c 显示完整的进程命令</span><br><span class="line">-s 保密模式</span><br><span class="line">-p &lt;进程号&gt; 指定进程显示</span><br><span class="line">-n &lt;次数&gt;循环显示次数 复制代码</span><br></pre></td></tr></table></figure>



<h6 id="netstat-命令"><a href="#netstat-命令" class="headerlink" title="netstat 命令"></a>netstat 命令</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#Linux netstat命令用于显示网络状态。</span><br><span class="line">#利用netstat指令可让你得知整个Linux系统的网络情况。</span><br><span class="line">#语法：</span><br><span class="line">netstat [-acCeFghilMnNoprstuvVwx][-A&lt;网络类型&gt;][--ip] 复制代码</span><br></pre></td></tr></table></figure>



<h6 id="file-（可查看文件类型）"><a href="#file-（可查看文件类型）" class="headerlink" title="file （可查看文件类型）"></a>file （可查看文件类型）</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file 文件名 复制代码</span><br></pre></td></tr></table></figure>



<h6 id="重启linux"><a href="#重启linux" class="headerlink" title="重启linux"></a>重启linux</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Linux centos 重启命令：reboot 复制代码</span><br></pre></td></tr></table></figure>



<h6 id="关机linux"><a href="#关机linux" class="headerlink" title="关机linux"></a>关机linux</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Linux centos 关机命令：halt 复制代码</span><br></pre></td></tr></table></figure>



<h6 id="同步时间命令"><a href="#同步时间命令" class="headerlink" title="同步时间命令"></a>同步时间命令</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ntpdate ntp1.aliyun.com 复制代码</span><br></pre></td></tr></table></figure>



<h6 id="更改为北京时间命令"><a href="#更改为北京时间命令" class="headerlink" title="更改为北京时间命令"></a>更改为北京时间命令</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm -rf /etc/localtime</span><br><span class="line">ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime 复制代码</span><br></pre></td></tr></table></figure>



<h6 id="查看时间命令："><a href="#查看时间命令：" class="headerlink" title="查看时间命令："></a>查看时间命令：</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">date</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>面试</category>
      </categories>
  </entry>
  <entry>
    <title>实战例子</title>
    <url>/2022/01/03/%E9%9D%A2%E8%AF%95/%E5%AE%9E%E6%88%98%E4%BE%8B%E5%AD%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://muyi110.github.io/2019/%E8%85%BE%E8%AE%AF%E4%B8%80%E9%9D%A2/">腾讯一面</a>：</p>
<h4 id="进程间的通信方式"><a href="#进程间的通信方式" class="headerlink" title="进程间的通信方式"></a>进程间的通信方式</h4><p>进程间有六种通信方式：</p>
<ol>
<li><strong>管道（pipe）及有名管道（named pipe）</strong>：管道可用于具有亲缘关系的父子进程间的通信，有名管道除了具有管道所具有的功能外，它还允许无亲缘关系进程间的通信</li>
<li><strong>信号（signal）</strong>：信号是在软件层次上对中断机制的一种模拟，它是比较复杂的通信方式，用于通知进程有某事件发生，一个进程收到一个信号与处理器收到一个中断请求效果上可以说是一致的</li>
<li><strong>消息队列（message queue）</strong>：消息队列是消息的链接表，它克服了上两种通信方式中信号量有限的缺点，具有写权限的进程可以按照一定的规则向消息队列中添加新信息；对消息队列有读权限的进程可以从消息队列中读取信息</li>
<li><strong>共享内存（share memory）</strong>：他使得多个进程可以访问同一块内存空间，不同进程可以及时看到对方进程中对共享内存中数据的更新。这种方式需要依靠某种同步操作，如互斥锁和信号量（也就是一个进行在未完成写操作之前，另一个进程不能读取）</li>
<li><strong>信号量（semaphore）</strong>：它是一个计数器，信号量用于实现进程间的互斥与同步，而不是用于存储进程间通信数据（而信号量一般常用于保护一段代码，使其每次只被一个执行线程运行）。对于二值信号量（0-1），信号量大于0时，可以对进程操作，等于0时要等待，知道信号量大于0</li>
<li><strong>套接字（socket）</strong>：一种更为一般的进程通信机制，它可用于网络中不同机器之间的进程间通信，应用非常广泛</li>
</ol>
<h4 id="僵尸进程和孤儿进程"><a href="#僵尸进程和孤儿进程" class="headerlink" title="僵尸进程和孤儿进程"></a>僵尸进程和孤儿进程</h4><p><strong>僵尸进程：</strong>一个父进程利用fork创建子进程，如果子进程退出，而父进程没有利用wait或wait pid来获取子进程的状态信息，那么子进程的状态描述符依然保存在系统中。</p>
<p>在Linux进程的状态中，僵尸进程是非常特殊的一种，它已经放弃了几乎所有内存空间，没有任何可执行代码，也不能被调度，仅仅在进程列表中保留一个位置，记在该进程的退出状态等信息，供其他进程收集，除此之外，僵尸进程需要它的父进程来为它收尸，如果他的父进程没有处理这个僵尸进程的措施，那么它就一直保持僵尸状态，如果这时父进程结束了，那么init进程自动会接手这个子进程，为它收尸，他还是能被清除的。但是如果父进程是进入一个循环，不会结束，那么子进程就会一直保持僵尸状态，这就是为什么系统中有时会很多僵尸进程。</p>
<p><strong>僵尸进程解决</strong></p>
<ul>
<li>调用wait函数，进程一旦调用了wait，就立即阻塞自己，由wait自动分析是否当前进程的某个子进程已经退出，如果让它找到了这样一个已经变成僵尸的子进程，wait就会收集这个子进程的信息，并把它彻底销毁后返回；如果没有找到这样一个子进程，wait就会一直阻塞在这里，知道有一个出现为止</li>
<li>当子进程终止时，内核就会向它的父进程发送一个SIGCHLD信号，当父进程接收到SIGCHLD信号后就应该调用wait或waitpid函数对子进程进行善后处理，释放子进程占用的资源</li>
</ul>
<p><strong>孤儿进程：</strong>一个父进程退出，而它的一个或几个子进程仍然还在运行，那么这些子进程就会变成孤儿进程，孤儿进程将被init进程（进程号为1）所收养，并有init进程对它们完成状态收集的工作</p>
<p>子进程死亡需要父进程来处理，那么意味着正常的进程应该是子进程先于父进程死亡。当父进程先于子进程死亡时，子进程死亡时没父进程处理，这个死亡的子进程就是孤儿进程。但孤儿进程与僵尸进程不同的是，由于父进程已经死亡，系统会帮助父进程回收处理孤儿进程。所以孤儿进程实际上是不占用资源的，因为它终究是被系统回收了。不会向僵尸进程那样占用ID，损害运行系统。</p>
<h4 id="TCP为啥需要三次握手"><a href="#TCP为啥需要三次握手" class="headerlink" title="TCP为啥需要三次握手"></a>TCP为啥需要三次握手</h4><h5 id="三次握手原理"><a href="#三次握手原理" class="headerlink" title="三次握手原理"></a>三次握手原理</h5><p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/68747470733a2f2f696d672d626c6f672e6373646e2e6e65742f32303138303831393232333433313438.jpg" alt="这里写图片描述"></p>
<ol>
<li><p>上图的名词解释</p>
<ul>
<li>SYN：同步序号。<strong>它表示建立连接</strong>。TCP规定SYN=1时不能携带数据，但要消耗一个序号，因此随机选取一个序列号为seq=x数据包（该数据包里就是一个标记seq，并没有任何有效的数据）</li>
<li>ACK：确认序号。<strong>它表示响应</strong>（都能响应了 那肯定上一步就连接成功了啊，所以说ACK=1代表确认连接成功啦）</li>
</ul>
<p>因此<strong>SYN和ACK同时为1，表示建立连接之后的响应</strong>；而只是<strong>单个的SYN=1，表示的只是建立连接。</strong></p>
<ul>
<li>seq：（sequence number）序列号。他是发送端数据包的初始序列号。<strong>seq=x表示发送端数据包的初始序号为x</strong>（seq=0就代表这是第0号帧）</li>
<li>ack：（acknowledge number）确认号。它是对这次收到数据包的确认，以及对下次收到数据包的期待。<strong>ack=x+1表示我方到x位置的所有数据都已正确收到，且我方告知对方：我期待你下次给我发送包的初始序号（seq）是x+1。</strong></li>
</ul>
<p>为了方便记忆，可以这么理解：SYN/ACK是TCP协议层面的标记，而seq/ack是数据层面的标记。</p>
</li>
</ol>
<h5 id="TCP三次握手过程："><a href="#TCP三次握手过程：" class="headerlink" title="TCP三次握手过程："></a><strong>TCP三次握手过程：</strong></h5><ol>
<li><strong>首先Client向Server发送连接：SYN=1，seq=x；</strong><ul>
<li><strong>因为</strong>要<strong>建立连接，所以SYN=1</strong>；又<strong>因为</strong>TCP规定SYN=1时不能携带数据，但要消耗一个序号，<strong>所以</strong>Client随机选取一个<strong>初始序号seq=x</strong>。（因为并没有相应动作，所以这里没ACK什么事，我们就认为ACK=0吧）</li>
<li>发送后Client进入syn_sent状态，表示客户端等待服务器的回复</li>
</ul>
</li>
<li><strong>Server收到请求后 再向Client发送确认：SYN=1，ACK=1，seq=y，ack=x+1；</strong><ul>
<li>因为Server建立连接后做出了相应，所以SYN=1，ACK=1.因为TCP规定SYN=1时不能携带数据，但要消耗一个序号，所以Server随机选取一个初始序号seq=y。又因为Server到x为止的所有数据都已正确收到了，且Server告诉Client：我期待你下次给我发送包的初始序号（seq）是x+1，所以ack=x+1。</li>
<li>发送后服务器进入syn_rcvd，表示服务器已经收到Client的连接请求，等待Client的确认。</li>
</ul>
</li>
<li><strong>Client收到确认后还需再次发送确认，同时携带要发送给Server的数据：ACK=1，seq=x+1,ack=y+1;连接建立</strong><ul>
<li><strong>因为</strong>有响应动作，<strong>所以ACK=1</strong>（因为要携带发送的数据，所以这没SYN什么事）。<strong>因为2中s</strong>erver已经告诉了这次它想收到包的初始序列号是x+1，<strong>所以初始序号为seq=x+1</strong>。<strong>又因为</strong>Client到y为止的所有数据都已正确收到了，准备接收序列号为y+1的包，<strong>所以ack=y+1</strong></li>
<li>server收到后，这个TCP连接就进入到Established状态，就可以发起http请求了。</li>
</ul>
</li>
</ol>
<p><strong>形象些：</strong></p>
<ul>
<li><p>第一次握手，由浏览器发起，告诉服务器我要发送请求了</p>
</li>
<li><p>第二次握手，由服务器发起，告诉浏览器我准备接收了，你赶紧发送吧</p>
</li>
<li><p>第三次握手，由浏览器发送，告诉服务器，我马上发了，准备接收吧</p>
</li>
</ul>
<h5 id="为什么需要三次握手，两次不行吗？"><a href="#为什么需要三次握手，两次不行吗？" class="headerlink" title="为什么需要三次握手，两次不行吗？"></a>为什么需要三次握手，两次不行吗？</h5><p>  其实这是由TCP的自身特点可靠传输决定的。客户端和服务端要进行可靠传输，那么就需要确认<code>双方</code>的<code>接收和发送能力</code>,不然容易出现丢包的现象</p>
<ul>
<li>第一次握手: 服务端 可以确认<code>客户端</code>具有发送能力</li>
<li>第二次握手: 客户端 可以确认<code>服务端</code>具有接收能力和发送能力</li>
<li>第三次握手: 服务端 可以确认<code>客户端</code>具有接收能力</li>
</ul>
<h5 id="为什么不能改成两次握手？"><a href="#为什么不能改成两次握手？" class="headerlink" title="为什么不能改成两次握手？"></a>为什么不能改成两次握手？</h5><p>如果两次握手，则会出现下面这种情况：</p>
<p>如客户端发出连接请求，但因连接请求报文丢失而未收到确认，于是客户端再重传一次连接请求。后来收到了确认，建立了连接。数据传输完毕后，就释放了连接，客户端共发出了两个连接请求报文段，其中第一个丢失，第二个到达了服务端，但是第一个丢失的报文段只是在某些网络结点长时间滞留了，延误到连接释放以后的某个时间才到达服务端，此时服务端误认为客户端又发出一次新的连接请求，于是就向客户端发出确认报文段，同意建立连接，不采用三次握手，只要服务端发出确认，就建立新的连接了，此时客户端忽略服务端发来的确认，也不发送数据，则服务端一直等待客户端发送数据，浪费资源。</p>
<h5 id="三次握手过程中可以携带数据吗？"><a href="#三次握手过程中可以携带数据吗？" class="headerlink" title="三次握手过程中可以携带数据吗？"></a>三次握手过程中可以携带数据吗？</h5><p>其实第三次握手的时候,是可以携带数据的.但是,第一次,第二次握手不可以携带数据.</p>
<p>为什么这样呢?假如第一次握手可以携带数据的话,如果有人要恶意攻击服务器,那他每次都在第一次握手中的<code>SYN</code>报文中放入大量的数据.因为攻击者根本就不理服务器的接收 发送能力是否正常,然后疯狂重复发<code>SYN</code>报文的话,这会让服务器话费很多时间 内存空间来接收这些报文.</p>
<p>也就是说,第一次握手不可以放数据,其中一个简单的原因就是会让服务器更加容易受到攻击了.而对于第三次的话,此时客户端已经处于<code>ESTAB-LISHED</code>状态。对于客户端来说，他已经建立起连接了，并且也已经知道服务器的接收、发送能力是正常的了，所以能携带数据也没啥毛病。</p>
<h4 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h4><h5 id="static-assert"><a href="#static-assert" class="headerlink" title="static_assert"></a>static_assert</h5><p>static_assert这个关键字，用来做编译期间的断言，因此叫做静态断言。</p>
<p>语法：static_assert(常量表达式，提示字符串)——如果第一个参数常量表达式的值为真（true或者非零值），那么static_assert不做任何事情，就像它不存在一样，否则会产生一条编译错误，错误位置就是该static_assert语句所在行，错误提示就是第二个参数提示字符串。</p>
<p>编译器在遇到一个static_assert语句时，通常立刻将其第一个参数作为常量表达式进行演算，但如果该常量表达式依赖于某些模板参数，则延迟到模板实例化时再进行演算，这就让检查模板参数成为了可能。</p>
<p>static_assert的断言表达式的结果必须是在编译时期可以计算的表达式，即必须是常量表达式。如果使用变量，则会导致错误</p>
<h5 id="write和fwrite"><a href="#write和fwrite" class="headerlink" title="write和fwrite"></a>write和fwrite</h5><p>fwrite：带缓冲区；write：不带缓冲区</p>
<h5 id="程序中1-0是在编译期出错还是在运行的时候出错"><a href="#程序中1-0是在编译期出错还是在运行的时候出错" class="headerlink" title="程序中1/0是在编译期出错还是在运行的时候出错"></a>程序中1/0是在编译期出错还是在运行的时候出错</h5><p>在linux系统中gcc编译期测试：编译可以通过，运行时报错</p>
<p>参考：</p>
<ul>
<li><a href="https://muyi110.github.io/2019/%E8%85%BE%E8%AE%AF%E4%B8%80%E9%9D%A2/">https://muyi110.github.io/2019/%E8%85%BE%E8%AE%AF%E4%B8%80%E9%9D%A2/</a></li>
<li><a href="https://blog.csdn.net/lengxiao1993/article/details/82771768">https://blog.csdn.net/lengxiao1993/article/details/82771768</a></li>
<li><a href="https://github.com/Vuact/Blog/blob/main/base/http/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.md">https://github.com/Vuact/Blog/blob/main/base/http/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.md</a></li>
</ul>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
  </entry>
  <entry>
    <title>操作系统</title>
    <url>/2022/01/03/%E9%9D%A2%E8%AF%95/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><h2 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h2><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>指在系统中正在运行的一个应用程序；程序一旦运行就是进程；或者更专业化来说：进程是指程序执行时的一个实例，即它是程序已经执行到课中程度的数据结构的汇集。从内核的观点看，进程的目的就是担当分配系统资源（CPU时间、内存等）的基本单位。</p>
<p><strong>线程进程的区别体现在4个方面：</strong></p>
<p>1、因为进程拥有独立的堆栈空间和数据段，所以每当启动一个新的进程必须分配给它独立的地址空间，建立众多的数据表来维护它的代码段、堆栈段和数据段，这对于多进程来说十分“奢侈”，系统开销比较大，而线程不一样，线程拥有独立的堆栈空间，但是共享数据段，它们彼此之间使用相同的地址空间，共享大部分数据，比进程更节俭，开销比较小，切换速度也比进程快，效率高，但是正由于进程之间独立的特点，使得进程安全性比较高，也因为进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。一个线程死掉就等于整个进程死掉。</p>
<p>2、体现在通信机制上面，正因为进程之间互不干扰，相互独立，进程的通信机制相对很复杂，譬如管道，信号，消息队列，共享内存，套接字等通信机制，而线程由于共享数据段所以通信机制很方便。。</p>
<p>3、体现在CPU系统上面，线程使得CPU系统更加有效，因为操作系统会保证当线程数不大于CPU数目时，不同的线程运行于不同的CPU上。</p>
<p>4、体现在程序结构上，举一个简明易懂的列子：当我们使用进程的时候，我们不自主的使用if else嵌套来判断pid，使得程序结构繁琐，但是当我们使用线程的时候，基本上可以甩掉它，当然程序内部执行功能单元需要使用的时候还是要使用，所以线程对程序结构的改善有很大帮助。</p>
<p><strong>什么情况下使用进程个线程：</strong></p>
<p>1、需要频繁创建销毁的优先使用线程；因为对进程来说创建和销毁一个进程代价是很大的</p>
<p>2、线程的切换速度快，所以在需要大量计算，切换频繁时用线程，还有耗时的操作使用线程可提高应用程序的响应</p>
<p>3、因为对CPU系统的效率使用上线程更占优，所以可能要发展到多机分布的用进程，多核分布用线程</p>
<p>4、并行操作时使用线程，如C/S架构的服务器端并发线程响应用户的请求</p>
<p>5、需要更稳定安全时，适合选择进程；需要速度时，选择线程更好</p>
<p>​    因为我的项目中需要对数据段的数据共享，可以被多个程序所修改，所以使用线程来完成此操作，无需加入复杂的通信机制，使用进程需要添加复杂的通信机制实现数据段的共享，增加了我的代码的繁琐，而且使用线程开销小，项目运行的速度快，效率高。</p>
<p>​    如果只用进程的话，虽然安全性高，但是对代码的简洁性不好，程序结构繁琐，开销比较大，还需要加入复杂的通信机制，会使得我的项目代码量大大增加，切换速度会变的很慢，执行效率降低不少。。。</p>
<p><strong>进程和线程的关系：</strong></p>
<p>1、一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程。线程是操作系统可识别的最小执行和调度单位。</p>
<p>2、资源分配给进程，同一进程的所有线程共享该进程的所有资源。 同一进程中的多个线程共享代码段(代码和常量)，数据段(全局变量和静态变量)，扩展段(堆存储)。但是每个线程拥有自己的栈段，栈段又叫运行时段，用来存放所有局部变量和临时变量。</p>
<p>3、处理机分给线程，即真正在处理机上运行的是线程。</p>
<p>4、线程在执行过程中，需要协作同步。不同进程的线程间要利用消息通信的办法实现同步。</p>
<p><strong>系统线程数量上限是多少</strong></p>
<p><strong>参考回答：</strong></p>
<p>Linux 系统中单个进程的最大线程数有其最大的限制 PTHREAD_THREADS_MAX。</p>
<p>这个限制可以在/usr/include/bits/local_lim.h中查看 ，对 linuxthreads 这个值一般是 1024，对于 nptl 则没有硬性的限制，仅仅受限于系统的资源。</p>
<p>这个系统的资源主要就是线程的 stack 所占用的内存，用 ulimit -s 可以查看默认的线程栈大小，一般情况下，这个值是8M=8192KB</p>
<p><strong>如何杀死一个进程</strong></p>
<p>kill pid</p>
<h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p>系统分配处理器时间资源的基本单元，或者说进程之内独立执行的一个单元执行流。进程——资源分配的最小单位，线程——程序执行的最小单位。</p>
<p><strong>多线程一般用在哪些地方？</strong></p>
<p>1、java多线程一般多用于高并发的地方，如订单状态的修改，可以通过多线程，固定时间执行修改订单状态，还有就是支付方面一般都会用到多线程。</p>
<p>2、最典型的如：</p>
<p>用户注册完成送大礼包/积分之类，且积分等也是另一个系统并比较耗时；且这类任务即使失败也不是特别重要的。<br>后台线程：比如定期执行一些特殊任务，如定期更新配置文件，任务调度（如quartz），一些监控用于定期信息采集等。</p>
<p>3、最典型的应用比如tomcat，tomcat内部采用的就是多线程，上百个客户端访问同一个web应用，tomcat接入后都是把后续的处理扔给一个新的线程来处理，这个新的线程最后调用到我们的servlet程序，比如doGet或者doPost方法。</p>
<p>如果不采用多线程机制，上百个人同时访问一个web应用的时候，tomcat就得排队串行处理了，那样客户端根本是无法忍受那种访问速度的。</p>
<p>还有就是需要异步处理的时候，需要使用多线程。比如task a和task b要并行处理，单个线程只能串行处理，先做完task a然后再做task b。如果想要多个task同时执行的话，就必须为每个task分配一个线程，然后通过java虚拟机的线程调度，来同时执行多个任务。比如你的CPU是多核心的话，就可以让一个CPU执行一个线程。如果只有一个CPU的话，底层是按照分时复用的原则，各个线程按照时间片来获得CPU资源。</p>
<p>4、特别耗时的操作，如备份数据库，可以开个线程执行备份，然后执行返回，前台不断向后台询问线程执行状态</p>
<p>5、一个业务逻辑有很多次的循环，每次循环之间没有影响，比如验证1万条url路径是否存在，正常情况要循环1万次，逐个去验证每一条URL，这样效率会很低，假设验证一条需要1分钟，总共就需要1万分钟，有点恐怖。这时可以用多线程，将1万条URL分成50等份，开50个线程，没个线程只需验证200条，这样所有的线程执行完是远小于1万分钟的。</p>
<p>6、需要知道一个任务的执行进度，比如我们常看到的进度条，实现方式可以是在任务中加入一个整型属性变量(这样不同方法可以共享)，任务执行一定程度就给变量值加1，另外开一个线程按时间间隔不断去访问这个变量，并反馈给用户。</p>
<p>总之使用多线程就是为了充分利用cpu的资源，提高程序执行效率，当你发现一个业务逻辑执行效率特别低，耗时特别长，就可以考虑使用多线程。不过CPU执行哪个线程的时间和顺序是不确定的，即使设置了线程的优先级，因此使用多线程</p>
<p><strong>多线程的优点？</strong><br>1、使用线程可以把占据时间长的程序中的任务放到后台去处理<br>2、用户界面可以更加吸引人，这样比如用户点击了一个按钮去触发某些事件的处理，可以弹出一个进度条来显示处理的进度<br>3、程序的运行速度可能加快<br>4、在一些等待的任务实现上如用户输入、文件读写和网络收发数据等，线程就比较有用了。在这种情况下可以释放一些珍贵的资源如内存占用等等。<br>5、多个线程交替执行，减少或避免因程序阻塞或意外情况造成的响应过慢现象，降低了用户等待的概率。</p>
<p><strong>多线程的缺点？</strong><br>1、如果有大量的线程,会影响性能,因为操作系统需要在它们之间切换。<br>2、更多的线程需要更多的内存空间。<br>3、程可能会给程序带来更多“bug”，因此要小心使用<br>4、程的中止需要考虑其对程序运行的影响。<br>5、通常块模型数据是在多个线程间共享的，需要防止线程死锁情况的发生。</p>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子:"></a>例子:</h3><p>开个QQ，开了一个进程；开了迅雷，开了一个进程。在QQ的这个进程里，传输文字开一个线程、传输语音开了一个线程、弹出对话框又开了一个线程。所以运行某个软件，相当于开了一个进程。在这个软件运行的过程里（在这个进程里），多个工作支撑的完成QQ的运行，那么这“多个工作”分别有一个线程。所以一个进程管着多个线程。通俗的讲：“进程是爹妈，管着众多的线程儿子”…</p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
  </entry>
  <entry>
    <title>时间复杂度与空间复杂度</title>
    <url>/2022/01/03/%E9%9D%A2%E8%AF%95/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E4%B8%8E%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="时间复杂度与空间复杂度"><a href="#时间复杂度与空间复杂度" class="headerlink" title="时间复杂度与空间复杂度"></a><a href="https://www.cnblogs.com/lonely-wolf/p/15674526.html">时间复杂度与空间复杂度</a></h1><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><h3 id="O-1-常数阶"><a href="#O-1-常数阶" class="headerlink" title="O(1) 常数阶"></a>O(1) 常数阶</h3><p>0(1) 复杂度算法也称之为常数阶算法。这里的 <code>1</code> 是用来代指常量，也就是说这个算法的效率是固定的，无论你的数据量如何变化，效率都一样，这种复杂度也是最优的一种算法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> sum = a + b + c;</span><br><span class="line">    System.out.println(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的示例中不论有多少行代码，时间复杂度都是属于常数阶。换言之：只要代码不存在<strong>循环</strong>，<strong>递归</strong>等循环类调用，不论代码有多少行，其复杂度都是常数阶</p>
<h3 id="O-n-线性阶"><a href="#O-n-线性阶" class="headerlink" title="O(n) 线性阶"></a>O(n) 线性阶</h3><p><code>O(n)</code> 复杂度算法也称之为线性阶。比如下面这个示例我们应该怎么分析复杂度呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print1</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>前面常量阶没分析是因为常量阶比较容易理解，接下来我们就以线性阶这个为例子来分析下具体是怎么得到的。</p>
<p>我们假设每一行代码的执行时间是 <code>T</code>，那么上面这段代码的执行复杂度是多少呢？</p>
<p>答案很明显，那就是 <code>T+n*T</code>，也就是 <code>(n+1)T</code>，而在算法中有一个原则，那就是常量可以被忽略，所以就得到了 <code>nT</code>，换成大 <code>O</code> 表示法就是 <code>O(n)</code>。</p>
<p>这只是一个简略的计算过程，大家也不用较真说每行代码执行时间可能不一样之类的，也不要较真说 <code>for</code> 循环占用了一行，下面的大括号也占用了一行，如果要较真这个，那我建议可以去想一下 <code>1=1</code> 为什么等于 <code>2</code>。</p>
<p>算法中的复杂度反应的只是一个趋势，这里 <code>O(n)</code> 反应的就是一个趋势，也就是随着 <code>n</code> 的变化，算法的执行时间是会降低的。</p>
<h3 id="O-n²-平方阶"><a href="#O-n²-平方阶" class="headerlink" title="O(n²) 平方阶"></a>O(n²) 平方阶</h3><p>知道了上面的线性阶，那么平方阶就很好理解了，双层循环就是平方阶，同理，三次循环就是立方阶，<code>k</code> 次循环就是 <code>k</code> 次方阶。</p>
<h3 id="O-logn-对数阶"><a href="#O-logn-对数阶" class="headerlink" title="O(logn) 对数阶"></a>O(logn) 对数阶</h3><p><code>O(logn)</code> 也称之为对数阶，对数阶也很常见，像二分查找，二叉树之类的问题中会见到比较多的对数阶复杂度，但是对数阶也是比较难理解的一种算法复杂度。</p>
<p>下面我们还是来看一个例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print2</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= n) &#123;</span><br><span class="line">        i = i * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码又该如何分析复杂度呢？这段代码最关键就是要分析出 <code>while</code> 循环中到底循环了多少次，我们观察这个循环，发现 <code>i</code> 并不是逐一递增，而是不断的翻倍：<code>1-&gt;2-&gt;4-&gt;8-&gt;16-&gt;32-&gt;64</code> 一直到等于 <code>n</code> 为止才会结束，所以我们得到了这样的一个公式：<code>2^x=n</code>。</p>
<p>也就是我们只要计算出 <code>x</code> 的值，就得到了循环次数，而根据高中的数学知识我们可以得到 <code>x=log2n</code>（<code>2</code> 在下面，是底数，试了几种方法都打不出来，放弃了），所以根据上面线性阶的分析方法，我们省略常量，就得到了示例中的算法复杂度为 <code>O(log2n)</code>。</p>
<p>同样的分析方式，下面的例子，我们可以很快的分析出复杂度就为 <code>O(log3n)</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= n) &#123;</span><br><span class="line">    i = i * <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面得到的 <code>log3n</code> 我们可以再做进一步的转换：<code>log3n=log32 * log2n</code>，而 <code>log32</code>（注意这几个地方的 <code>3</code> 是底数，在下面） 是一个常量，常量可以省略，所以也就得到了：<code>O(log3n)=O(log2n)</code>。同样的道理，不论底数是多少，其实最终都可以转化成和 <code>O(log2n)</code> 相等，正因为如此，为了方便，我们算法中通常就会省略底数，直接写作 <code>O(logn)</code>。</p>
<p>上面的数学公式大家如果忘了或者看不懂也没关系，只要记住不论对数的底数是多少，我们都算作 <code>O(logn)</code>，而对于一个算法的复杂度是否是对数阶，还有一个简易的判断方法：<strong>当循环中下标以指定倍数形式衰减，那么这就是一个对数阶</strong>。</p>
<h3 id="O-nlogn-线性对数阶"><a href="#O-nlogn-线性对数阶" class="headerlink" title="O(nlogn) 线性对数阶"></a>O(nlogn) 线性对数阶</h3><p>如果理解了上面的对数阶，那么这种线性对数阶就非常好理解了，只需要在对数阶的算法中再嵌一层循环就是线性对数阶：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= n) &#123;</span><br><span class="line">        i = i * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分析了前面这些最常用的时间复杂度，其实我们可以得到以下规律：</p>
<ul>
<li>只要是常量级别，不论多大，效率都是一样的（如：常量阶复杂度例子）。</li>
<li>分析一段代码的时间复杂度，只需要分析执行次数最多的一段代码（如：所以例子中我们只分析了循环体中代码执行次数）。</li>
<li>嵌套代码的复杂度等于嵌套内外代码复杂度的乘积（如：分析线性对数阶复杂度例子）。</li>
</ul>
<h3 id="其他复杂度"><a href="#其他复杂度" class="headerlink" title="其他复杂度"></a>其他复杂度</h3><p>除了上面常用的复杂度之外，另外还有指数阶，阶层阶，根号阶等，这些接触的相对会较少，我们就不特意做分析了，如果大家感兴趣的话，可以自己去了解下。</p>
<h3 id="组合式复杂度分析"><a href="#组合式复杂度分析" class="headerlink" title="组合式复杂度分析"></a>组合式复杂度分析</h3><p>前面我们分析的都是只有一段代码比较复杂的情况下得到的复杂度结果，那么假如我一个算法中，有多段代码都比较复杂呢？这时候复杂度该如何分析？</p>
<h4 id="取最大复杂度作为整个算法复杂度"><a href="#取最大复杂度作为整个算法复杂度" class="headerlink" title="取最大复杂度作为整个算法复杂度"></a>取最大复杂度作为整个算法复杂度</h4><p>我们先看下面这个例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print1</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++)&#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">        System.out.println(j);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> p=<span class="number">0</span>;p&lt;n;p++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> q=<span class="number">0</span>;q&lt;n;q++)&#123;</span><br><span class="line">            System.out.println(p+q);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个例子中有三个循环，首先第一个，是一个常量，那么根据前面的结论，不论这个常量是多大，都属于常量级，所以第一个循环中的复杂度为 <code>O(1)</code>，第二个和第三个循环我们前面也分析过，复杂度分别为 <code>O(n)</code> 和 <code>O(n²)</code>。</p>
<p>也就是这一段代码中有三段代码产生了三种不同复杂度，而且这三个复杂度可以很明显得到的大小关系为：<code>O(1)&lt;O(n)&lt;O(n²)</code>，像这种在同一个算法中有明确大小关系的，我们就可以直接取最大值作为这个算法的复杂度，所以这个例子中算法的复杂度就是 <code>O(n²)</code>。</p>
<h4 id="取多个复杂度之和作为整个算法复杂度"><a href="#取多个复杂度之和作为整个算法复杂度" class="headerlink" title="取多个复杂度之和作为整个算法复杂度"></a>取多个复杂度之和作为整个算法复杂度</h4><p>接下来我们再来看一个例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print2</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++)&#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">        System.out.println(j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;n;k++)&#123;</span><br><span class="line">        System.out.println(k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个例子我们同样对三段循环分别分析可以分别得到如下复杂度：<code>O(1)</code>，<code>O(m)</code>，<code>O(n)</code>。这时候我们只能知道 <code>O(1)</code> 最小可以忽略，但是后面两个无法却无法确定大小，所以这时候我们需要取两段循环复杂度之和来作为算法的复杂度，所以可以得到这个例子的算法复杂度为：<code>O(m+n)</code>。</p>
<h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>空间复杂度全称就是渐进空间复杂度，用来表示算法的存储空间与数据规模之间的增长关系。和时间复杂度一样，空间复杂度也是用大 <code>O</code> 进行表示。</p>
<p>其实学会了分析时间复杂度，那么空间复杂度的分析就简单了，主要就看我们在一个算法当中到底有没有使用到了额外的空间来进行存储数据，然后判断这个额外空间的大小会不会随着 <code>n</code> 的变化而变化，从而得到空间复杂度。</p>
<p>我们来看一个给数组赋值例子，假设这就是一个算法，我们可以来分析下这个算法的空间复杂度：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> arr[] = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        arr[i]=n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一开始定义了一个变量，这里需要空间，但是这是一个常量级的（不随 <code>n</code> 的变化而变化），然后再定义了一个数组，数组的长度为 <code>n</code>，这里数组也需要占用空间，而且数组的空间是随着 <code>n</code> 的变化而变化的，其余代码没有占用额外空间，所以我们就可以认为上面示例中的空间复杂度为 <code>O(n)</code>。</p>
<p>对于算法的空间复杂度也可以简单的进行总结一下：</p>
<ul>
<li>如果申请的是有限个数（常量）的变量，空间复杂度为 <code>O(1)</code>。</li>
<li>如果申请的是一维数组，队列或者链表等，那么空间复杂度为 <code>O(n)</code>。</li>
<li>如果申请的是二维数组，那么空间复杂度为 <code>O(n²)</code>。</li>
<li>如果是在循环体中申请的数组等，可能就需要取嵌套的乘积来作为空间复杂度，这种就需要具体的进一步分析</li>
</ul>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
  </entry>
  <entry>
    <title>可乐鸡翅</title>
    <url>/2022/01/03/%E9%A3%9F%E7%89%A9/%E5%8F%AF%E4%B9%90%E9%B8%A1%E7%BF%85/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="可乐鸡翅"><a href="#可乐鸡翅" class="headerlink" title="可乐鸡翅"></a><a href="https://www.bilibili.com/video/BV1pJ411v7S9?from=search&seid=2151627749794461067">可乐鸡翅</a></h3><ul>
<li><p>原料</p>
<ul>
<li>鸡翅250g（11个左右）</li>
</ul>
</li>
<li><p>做法</p>
<ul>
<li><p>鸡翅泡水解冻</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20210126155937382.png" alt="image-20210126155937382"></p>
</li>
<li><p>捞出，加姜片料酒腌制20分钟（用手抓一抓，搅拌均匀）</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20210126155946527.png" alt="image-20210126155946527"></p>
</li>
<li><p>放入锅中焯水捞出</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20210126160034775.png" alt="image-20210126160034775"></p>
</li>
<li><p>锅内热油加入姜片</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20210126160120839.png" alt="image-20210126160120839"></p>
</li>
<li><p>鸡翅正面朝下煎至金黄</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20210126160210270.png" alt="image-20210126160210270"></p>
</li>
<li><p>加入调味</p>
<ul>
<li>一勺料酒</li>
<li>一勺生抽</li>
<li>半勺老抽</li>
</ul>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20210126160624263.png" alt="image-20210126160624263"></p>
</li>
<li><p>翻炒均匀上色</p>
</li>
<li><p>可乐一听倒入2/3罐子</p>
</li>
<li><p>放入半勺盐调味，盖上锅盖煮沸</p>
</li>
<li><p>放入香料：香叶八角都可以</p>
</li>
<li><p>大火煮至汤汁收干</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20210126160844786.png" alt="image-20210126160844786"></p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>食物</category>
      </categories>
  </entry>
  <entry>
    <title>手撕包菜</title>
    <url>/2022/01/03/%E9%A3%9F%E7%89%A9/%E6%89%8B%E6%92%95%E5%8C%85%E8%8F%9C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<p>typora-copy-images-to: images</p>
<hr>
<h3 id="手撕包菜"><a href="#手撕包菜" class="headerlink" title="手撕包菜"></a><a href="https://www.bilibili.com/video/BV1hh41197hh?from=search&seid=4921812292540006215">手撕包菜</a></h3><ul>
<li><p>包菜去根，用手撕成小块 <strong>根部用刀拍一下</strong></p>
</li>
<li><p>清水+少许食用盐，在水中清洗浸泡彻底洗净</p>
</li>
<li><p>洗好以后控水备用</p>
</li>
<li><p>几粒大蒜拍碎+干辣椒+花椒</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20210126162351153.png" alt="image-20210126162351153"></p>
</li>
<li><p>五花肉切成薄片</p>
</li>
<li><p><strong>猪油+五花肉来炒</strong>这样的才香</p>
</li>
<li><p>猪油熬化以后加入五花肉片</p>
</li>
<li><p>先将五花肉煸炒出油，肉片变色，微微发黄时，加入准备好的小料，煸炒出香味，（火要大，锅要热，油要多）</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20210127102537195.png" alt="image-20210127102537195"></p>
</li>
<li><p>彻底炒出香味以后放入准备好的包菜</p>
</li>
<li><p>少许米酒或者料酒沿锅边淋入去腥增香</p>
</li>
<li><p>放入少许米醋或者香醋（先放醋，炒出来的包菜更脆）</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20210127102716126.png" alt="image-20210127102716126"></p>
</li>
<li><p>大火将包菜炒至塌陷</p>
</li>
<li><p>塌陷以后开始调味（适量盐+少许白糖+蒸鱼豉油）</p>
</li>
<li><p>大火翻炒均匀</p>
</li>
<li><p>香醋沿锅边淋入将整道菜的香味彻底激发出来</p>
</li>
<li><p>这道菜要的是干香脆爽，翻炒时间不要太长</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20210127103410622.png" alt="image-20210127103410622"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>食物</category>
      </categories>
  </entry>
  <entry>
    <title>MySQL学习笔记</title>
    <url>/2021/05/24/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><h3 id="一、如何使用终端操作数据库"><a href="#一、如何使用终端操作数据库" class="headerlink" title="一、如何使用终端操作数据库"></a>一、如何使用终端操作数据库</h3></li>
<li><p>如何登陆数据库服务器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure>

<p><img src="https://img.imgdb.cn/item/607d324d8322e6675c0c2074.png" alt="image-20210419101047635"></p>
</li>
<li><p>如何查询数据库服务器中所有的数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show databases；</span><br></pre></td></tr></table></figure>

<p><img src="https://img.imgdb.cn/item/607d32998322e6675c0cc068.png" alt="image-20210419100514663"></p>
</li>
<li><p>如何选中某一个数据库进行操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use sushe；</span><br></pre></td></tr></table></figure>

<p><img src="https://img.imgdb.cn/item/607d32c78322e6675c0d1a07.png" alt="image-20210419100606162"></p>
<ul>
<li>SQL语句中的查询</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from admin；</span><br></pre></td></tr></table></figure>

<p><img src="https://img.imgdb.cn/item/607d32d58322e6675c0d3364.png" alt="image-20210419100728472"></p>
<ul>
<li><p>只查询Admin_ID中的一条</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from admin where Admin_ID=1；</span><br></pre></td></tr></table></figure>

<p><img src="https://img.imgdb.cn/item/607d32e48322e6675c0d4e65.png" alt="image-20210419102716439"></p>
</li>
<li><p>如何退出数据库服务器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exit；</span><br></pre></td></tr></table></figure></li>
<li><p>如何在数据库服务器中创建我们的数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database test；</span><br></pre></td></tr></table></figure>

<p><img src="https://img.imgdb.cn/item/607d32f18322e6675c0d6763.png" alt="image-20210419103011881"></p>
</li>
<li><p>使用test数据库进行操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use test；</span><br></pre></td></tr></table></figure></li>
<li><p>查看数据库中的数据表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show tables；</span><br></pre></td></tr></table></figure>

<p><img src="https://img.imgdb.cn/item/607d32ff8322e6675c0d82bc.png" alt="image-20210419103151476"></p>
</li>
<li><p>创建一个数据表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> pet (</span><br><span class="line">	name <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">	owner <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">	species <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">	sex <span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line">	birth <span class="type">DATE</span>,</span><br><span class="line">	death <span class="type">DATE</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://img.imgdb.cn/item/607d33118322e6675c0da562.png" alt="image-20210419103553869"></p>
</li>
<li><p>查看数据表是否创建成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show tables；</span><br></pre></td></tr></table></figure>

<p><img src="https://img.imgdb.cn/item/607d331d8322e6675c0dbd0b.png" alt="image-20210419103659284"></p>
</li>
<li><p>查看创建好的数据表的结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">describe pet;</span><br></pre></td></tr></table></figure>

<p><img src="https://img.imgdb.cn/item/607d332e8322e6675c0dde96.png" alt="image-20210419103818698"></p>
</li>
<li><p>查看数据表中的记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> pet;</span><br></pre></td></tr></table></figure>

<p> <img src="https://img.imgdb.cn/item/607d33498322e6675c0e1431.png" alt="image-20210419104228606"></p>
</li>
<li><p>如何往数据表中添加数据记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> pet</span><br><span class="line"><span class="keyword">VALUES</span> （<span class="string">&#x27;Puffball&#x27;</span>,<span class="string">&#x27;Diane&#x27;</span>,<span class="string">&#x27;hamster&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;1999-03-30&#x27;</span>,<span class="keyword">NULL</span>）;</span><br></pre></td></tr></table></figure></li>
<li><p>再次查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> pet;</span><br></pre></td></tr></table></figure>

<p><img src="https://img.imgdb.cn/item/607d33568322e6675c0e2c64.png" alt="image-20210419104507492"></p>
</li>
<li><p>删除数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> pet <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;Fluffy&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><img src="https://img.imgdb.cn/item/607d33658322e6675c0e4753.png" alt="image-20210419110249261"></p>
<p><img src="https://img.imgdb.cn/item/607d33738322e6675c0e6013.png" alt="image-20210419110317720"></p>
</li>
<li><p>修改数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">update pet <span class="keyword">set</span> name<span class="operator">=</span><span class="string">&#x27;旺旺才&#x27;</span> <span class="keyword">where</span> owner<span class="operator">=</span><span class="string">&#x27;周星驰&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<ul>
<li><p>mysql常用数据类型</p>
<ul>
<li><p>日期选择按照格式；数值字符串按照大小！</p>
</li>
<li><p>MySQL支持多种类型，大致可以分为三类：</p>
</li>
<li><p>数值</p>
<table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left">大小</th>
<th align="left">范围（有符号）</th>
<th align="left">范围（无符号）</th>
<th align="left">用途</th>
</tr>
</thead>
<tbody><tr>
<td align="left">TINYINT</td>
<td align="left">1 byte</td>
<td align="left">(-128，127)</td>
<td align="left">(0，255)</td>
<td align="left">小整数值</td>
</tr>
<tr>
<td align="left">SMALLINT</td>
<td align="left">2 bytes</td>
<td align="left">(-32 768，32 767)</td>
<td align="left">(0，65 535)</td>
<td align="left">大整数值</td>
</tr>
<tr>
<td align="left">MEDIUMINT</td>
<td align="left">3 bytes</td>
<td align="left">(-8 388 608，8 388 607)</td>
<td align="left">(0，16 777 215)</td>
<td align="left">大整数值</td>
</tr>
<tr>
<td align="left">INT或INTEGER</td>
<td align="left">4 bytes</td>
<td align="left">(-2 147 483 648，2 147 483 647)</td>
<td align="left">(0，4 294 967 295)</td>
<td align="left">大整数值</td>
</tr>
<tr>
<td align="left">BIGINT</td>
<td align="left">8 bytes</td>
<td align="left">(-9,223,372,036,854,775,808，9 223 372 036 854 775 807)</td>
<td align="left">(0，18 446 744 073 709 551 615)</td>
<td align="left">极大整数值</td>
</tr>
<tr>
<td align="left">FLOAT</td>
<td align="left">4 bytes</td>
<td align="left">(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)</td>
<td align="left">0，(1.175 494 351 E-38，3.402 823 466 E+38)</td>
<td align="left">单精度 浮点数值</td>
</tr>
<tr>
<td align="left">DOUBLE</td>
<td align="left">8 bytes</td>
<td align="left">(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td>
<td align="left">0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td>
<td align="left">双精度 浮点数值</td>
</tr>
<tr>
<td align="left">DECIMAL</td>
<td align="left">对DECIMAL(M,D) ，如果M&gt;D，为M+2否则为D+2</td>
<td align="left">依赖于M和D的值</td>
<td align="left">依赖于M和D的值</td>
<td align="left">小数值</td>
</tr>
</tbody></table>
</li>
<li><p>日期/时间</p>
<table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left">大小 ( bytes)</th>
<th align="left">范围</th>
<th align="left">格式</th>
<th align="left">用途</th>
</tr>
</thead>
<tbody><tr>
<td align="left">DATE</td>
<td align="left">3</td>
<td align="left">1000-01-01/9999-12-31</td>
<td align="left">YYYY-MM-DD</td>
<td align="left">日期值</td>
</tr>
<tr>
<td align="left">TIME</td>
<td align="left">3</td>
<td align="left">‘-838:59:59’/‘838:59:59’</td>
<td align="left">HH:MM:SS</td>
<td align="left">时间值或持续时间</td>
</tr>
<tr>
<td align="left">YEAR</td>
<td align="left">1</td>
<td align="left">1901/2155</td>
<td align="left">YYYY</td>
<td align="left">年份值</td>
</tr>
<tr>
<td align="left">DATETIME</td>
<td align="left">8</td>
<td align="left">1000-01-01 00:00:00/9999-12-31 23:59:59</td>
<td align="left">YYYY-MM-DD HH:MM:SS</td>
<td align="left">混合日期和时间值</td>
</tr>
<tr>
<td align="left">TIMESTAMP</td>
<td align="left">4</td>
<td align="left">1970-01-01 00:00:00/2038结束时间是第 <strong>2147483647</strong> 秒，北京时间 <strong>2038-1-19 11:14:07</strong>，格林尼治时间 2038年1月19日 凌晨 03:14:07</td>
<td align="left">YYYYMMDD HHMMSS</td>
<td align="left">混合日期和时间值，时间戳</td>
</tr>
</tbody></table>
</li>
<li><p>字符串（字符）</p>
<table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left">大小</th>
<th align="left">用途</th>
</tr>
</thead>
<tbody><tr>
<td align="left">CHAR</td>
<td align="left">0-255 bytes</td>
<td align="left">定长字符串</td>
</tr>
<tr>
<td align="left">VARCHAR</td>
<td align="left">0-65535 bytes</td>
<td align="left">变长字符串</td>
</tr>
<tr>
<td align="left">TINYBLOB</td>
<td align="left">0-255 bytes</td>
<td align="left">不超过 255 个字符的二进制字符串</td>
</tr>
<tr>
<td align="left">TINYTEXT</td>
<td align="left">0-255 bytes</td>
<td align="left">短文本字符串</td>
</tr>
<tr>
<td align="left">BLOB</td>
<td align="left">0-65 535 bytes</td>
<td align="left">二进制形式的长文本数据</td>
</tr>
<tr>
<td align="left">TEXT</td>
<td align="left">0-65 535 bytes</td>
<td align="left">长文本数据</td>
</tr>
<tr>
<td align="left">MEDIUMBLOB</td>
<td align="left">0-16 777 215 bytes</td>
<td align="left">二进制形式的中等长度文本数据</td>
</tr>
<tr>
<td align="left">MEDIUMTEXT</td>
<td align="left">0-16 777 215 bytes</td>
<td align="left">中等长度文本数据</td>
</tr>
<tr>
<td align="left">LONGBLOB</td>
<td align="left">0-4 294 967 295 bytes</td>
<td align="left">二进制形式的极大文本数据</td>
</tr>
<tr>
<td align="left">LONGTEXT</td>
<td align="left">0-4 294 967 295 bytes</td>
<td align="left">极大文本数据</td>
</tr>
</tbody></table>
<h3 id="mysql建表约束"><a href="#mysql建表约束" class="headerlink" title="mysql建表约束"></a>mysql建表约束</h3></li>
<li><p>主键约束</p>
<ul>
<li><p>它能够唯一确定一张表中的一条记录，也就是我们通过给某个字段添加约束，就可以使得该字段不重复且不为空。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE user (</span><br><span class="line">    id INT PRIMARY KEY,</span><br><span class="line">    name VARCHAR(20)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><img src="https://img.imgdb.cn/item/607d34858322e6675c10a412.png" alt="image-20210419111116893"></p>
<ul>
<li>– 联合主键<br>– 联合主键中的每个字段都<strong>不能为空</strong>，并且<strong>加起来</strong>不能和已设置的联合主键重复。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> (</span><br><span class="line">    id <span class="type">INT</span>,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    password <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY(id, name)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;123&#x27;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>自增约束</p>
<ul>
<li>管控id的值让他可以增长</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (name) <span class="keyword">values</span>(<span class="string">&#x27;zhangsan&#x27;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>忘记创建主键约束怎么办，可以通过SQL语句设置（两种方式）：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> (</span><br><span class="line">    id <span class="type">INT</span>,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>```<br>desc user<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">![image-20210419135347642](https://img.imgdb.cn/item/607d33918322e6675c0e993b.png)</span><br><span class="line"></span><br><span class="line">* 修改表结构，添加主键</span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line">ALTER TABLE user ADD PRIMARY KEY(id);</span><br><span class="line">ALTER TABLE user MODIFY id INT PRIMARY KEY;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="https://img.imgdb.cn/item/607d339c8322e6675c0eb30b.png" alt="image-20210419140048250"></p>
<ul>
<li><p>如何删除</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">drop</span> <span class="keyword">primary</span> key;</span><br></pre></td></tr></table></figure>

<p><img src="https://img.imgdb.cn/item/607d33aa8322e6675c0ed7de.png" alt="image-20210419140205166"></p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>唯一约束</p>
<ul>
<li>约束修饰的字段的值不能重复</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line">	id <span class="type">int</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>添加唯一约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">add</span> <span class="keyword">unique</span>(name);</span><br></pre></td></tr></table></figure>

<p><img src="https://img.imgdb.cn/item/607d33b68322e6675c0eed4b.png" alt="image-20210419140558495"></p>
</li>
<li><p>创建表的时候添加唯一约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line">	id <span class="type">int</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>)，</span><br><span class="line">    <span class="keyword">unique</span>(name)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 或者</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line">	id <span class="type">int</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">unique</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="keyword">unique</span>(id,name)表示两个键在一起不重复就行</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line">	id <span class="type">int</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    <span class="keyword">unique</span>(id,name)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><img src="https://img.imgdb.cn/item/607d33c58322e6675c0f0b88.png" alt="image-20210419140816729"></p>
</li>
<li><p>删除唯一约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">drop</span> index name;</span><br></pre></td></tr></table></figure></li>
<li><p>modify添加</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> modify <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">unique</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>总结：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、建表的时候添加约束</span><br><span class="line">2、可以使用alter... add ...</span><br><span class="line">3、alter... modify ...</span><br><span class="line">4、删除alter ... drop ...</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>非空约束</p>
<ul>
<li><p>修饰的字段不能为空</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> (</span><br><span class="line">    id <span class="type">INT</span>,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><img src="https://img.imgdb.cn/item/607d33d38322e6675c0f2817.png" alt="image-20210419141716219"></p>
</li>
<li><p>不传入name值会报错</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (id) <span class="keyword">values</span>(<span class="number">1</span>);</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>正确用法</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> uservalues(<span class="number">1</span>,<span class="string">&#x27;zhangsan&#x27;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>默认约束</p>
<ul>
<li><p>当我们插入字段值时，如果没有传值，就会使用默认值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line">	id <span class="type">int</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    age <span class="type">int</span> <span class="keyword">default</span> <span class="number">10</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><img src="https://img.imgdb.cn/item/607d33e08322e6675c0f4744.png" alt="image-20210419142616113"></p>
</li>
</ul>
</li>
<li><p>外键约束</p>
<ul>
<li><p>涉及到两个表：父表，子表</p>
</li>
<li><p>主表，副表</p>
</li>
<li><p>班级表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> classes(</span><br><span class="line">	id <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li>
<li><p>学生表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> classes(</span><br><span class="line">	id <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    class_id <span class="type">int</span>,</span><br><span class="line">    <span class="keyword">foreign</span> key(class_id) <span class="keyword">references</span> classes(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><img src="https://img.imgdb.cn/item/607d33f68322e6675c0f7d6a.png" alt="image-20210419143103219"></p>
</li>
<li><p>插入四个班</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> calsses <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;一班&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> calsses <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;二班&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> calsses <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;三班&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> calsses <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">&#x27;四班&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://img.imgdb.cn/item/607d34068322e6675c0fa28e.png" alt="image-20210419143606566"></p>
</li>
<li><p>往对应的班级添加学生信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> calsses <span class="keyword">values</span>(<span class="number">1001</span>,<span class="string">&#x27;一班&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> calsses <span class="keyword">values</span>(<span class="number">1002</span>,<span class="string">&#x27;二班&#x27;</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> calsses <span class="keyword">values</span>(<span class="number">1003</span>,<span class="string">&#x27;三班&#x27;</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> calsses <span class="keyword">values</span>(<span class="number">1004</span>,<span class="string">&#x27;四班&#x27;</span>,<span class="number">4</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>结论</p>
<ul>
<li>主表classes中没有的数据值，在副表中，是不可以使用的。</li>
<li>主表中的记录被副表引用，是不可以被删除的。 </li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="数据库的三大设计范式"><a href="#数据库的三大设计范式" class="headerlink" title="数据库的三大设计范式"></a>数据库的三大设计范式</h3><ul>
<li><p>第一范式（1NF)</p>
<ul>
<li><p>数据表中的所有字段都是不可分割的原子值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">	id <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    address <span class="type">varchar</span>(<span class="number">30</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">inser <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;中国四川省成都市武侯区武侯大道100号&#x27;</span>);</span><br><span class="line">inser <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;中国四川省成都市武侯区武侯大道200号&#x27;</span>);</span><br><span class="line">inser <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="string">&#x27;中国四川省成都市武侯区武侯大道300号&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://img.imgdb.cn/item/607d34198322e6675c0fca93.png" alt="image-20210419150252138"></p>
</li>
<li><p>字段还可以继续拆分，就不满足第一范式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">	id <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    country <span class="type">varchar</span>(<span class="number">30</span>),</span><br><span class="line">    privence <span class="type">varchar</span>(<span class="number">30</span>),</span><br><span class="line">    city <span class="type">varchar</span>(<span class="number">30</span>),</span><br><span class="line">    details <span class="type">varchar</span>(<span class="number">30</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">inser <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;中国&#x27;</span>,<span class="string">&#x27;四川省&#x27;</span>,<span class="string">&#x27;成都市&#x27;</span>,<span class="string">&#x27;武侯区武侯大道100号&#x27;</span>);</span><br><span class="line">inser <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;中国&#x27;</span>,<span class="string">&#x27;四川省&#x27;</span>,<span class="string">&#x27;成都市&#x27;</span>,<span class="string">&#x27;武侯区武侯大道100号&#x27;</span>);</span><br><span class="line">inser <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="string">&#x27;中国&#x27;</span>,<span class="string">&#x27;四川省&#x27;</span>,<span class="string">&#x27;成都市&#x27;</span>,<span class="string">&#x27;武侯区武侯大道100号&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://img.imgdb.cn/item/607d34268322e6675c0fe63e.png" alt="image-20210419150357502"></p>
</li>
<li><p>范式，设计的越详细，对于某些实际操作可能更好，单不一定都是好处。</p>
</li>
</ul>
</li>
<li><p>第二范式（2NF）</p>
<ul>
<li><p>在满足第一范式的前提下，其他列都必须完全依赖于主键列。</p>
</li>
<li><p>如果出现不完全依赖，只可能发生在联合主键的情况下。</p>
</li>
<li><p>订单表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> myorder (</span><br><span class="line">    product_id <span class="type">INT</span>,</span><br><span class="line">    customer_id <span class="type">INT</span>,</span><br><span class="line">    product_name <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    customer_name <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (product_id, customer_id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li>
<li><p>除了主键以外的列，只依赖于主键的部分字段。</p>
</li>
<li><p>实际上，在这张订单表中，<code>product_name</code> 只依赖于 <code>product_id</code> ，<code>customer_name</code> 只依赖于 <code>customer_id</code> 。也就是说，<code>product_name</code> 和 <code>customer_id</code> 是没用关系的，<code>customer_name</code> 和 <code>product_id</code> 也是没有关系的。</p>
</li>
<li><p>拆表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> myorder (</span><br><span class="line">    order_id <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">    product_id <span class="type">int</span>,</span><br><span class="line">    customer_id <span class="type">int</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> product (</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> customer (</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li>
<li><p>拆分之后，<code>myorder</code> 表中的 <code>product_id</code> 和 <code>customer_id</code> 完全依赖于 <code>order_id</code> 主键，而 <code>product</code> 和 <code>customer</code> 表中的其他字段又完全依赖于主键。满足了第二范式的设计！</p>
</li>
</ul>
</li>
<li><p>第三范式（3NF）</p>
<ul>
<li><p>必须先满足第二范式，除开主键的其他列之间不能传递依赖</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> myorder (</span><br><span class="line">    order_id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    product_id <span class="type">INT</span>,</span><br><span class="line">    customer_id <span class="type">INT</span>,</span><br><span class="line">    customer_phone <span class="type">VARCHAR</span>(<span class="number">15</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li>
<li><p>表中的 <code>customer_phone</code> 有可能依赖于 <code>order_id</code> 、 <code>customer_id</code> 两列，也就不满足了第三范式的设计：其他列之间不能有传递依赖关系。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> myorder (</span><br><span class="line">    order_id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    product_id <span class="type">INT</span>,</span><br><span class="line">    customer_id <span class="type">INT</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> customer (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,<span class="keyword">sql</span></span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    phone <span class="type">VARCHAR</span>(<span class="number">15</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li>
<li><p>修改后就不存在其他列之间的传递依赖关系，其他列都只依赖于主键列，满足了第三范式的设计！</p>
</li>
<li><p>参考文献：<a href="https://www.bilibili.com/video/BV1Vt411z7wy?p=18&spm_id_from=pageDriver">一天学会 MySQL 数据库</a></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>手机拍照技巧</title>
    <url>/2022/01/03/%E6%91%84%E5%BD%B1/%E6%89%8B%E6%9C%BA%E6%8B%8D%E7%85%A7%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="自拍"><a href="#自拍" class="headerlink" title="自拍"></a>自拍</h4><ul>
<li>灯光在头顶，正午拍照，光源在头顶，脸上会有非常明显的三角形投影，不适合自拍。<ul>
<li>脸部朝向灯光的方向，避免顶光在脸部形成强烈的投影</li>
<li>带个帽子</li>
</ul>
</li>
</ul>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201208205624811.png" alt="image-20201208205624811"></p>
<ul>
<li><p>室内怎么让自拍照更美？靠近窗户的时候，逆光，脸部光线不好。</p>
</li>
<li><p>换个方向，面向光源，逆光自拍会看到脸部的瑕疵（颗粒，皱纹等等），顺光自拍可以减少脸部的瑕疵。</p>
</li>
<li><p>自拍角度决定你的胖瘦。</p>
<ul>
<li><p>低于30°的仰拍角，容易拍出圆乎乎的大脸</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201208210135055.png" alt="image-20201208210135055"></p>
</li>
<li><p>手机保持30-45°的仰拍角度，更容易拍出巴掌脸与尖下巴</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201208210352336.png" alt="image-20201208210352336"></p>
</li>
<li><p>脸大脸圆？学会遮挡术</p>
<ul>
<li><p>利用树叶花朵等作为前景，虚化并遮住部分脸，即显得脸小又增加画面趣味。(借助道具，手、围巾、帽子、花花草草。)</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201208210639392.png" alt="image-20201208210639392"></p>
</li>
<li><p>还可以用双手或者单手托脸既可以遮住部分脸又显得可爱</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201208210742655.png" alt="image-20201208210742655"></p>
</li>
<li><p>借助道具，比如饮料杯遮住部分脸</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201208210830160.png" alt="image-20201208210830160"></p>
</li>
</ul>
</li>
<li><p>怎么让自拍照看起来不像自拍照</p>
<ul>
<li>借助手机自拍杆+定时遥控器</li>
<li>放在桌子或者窗台+定时自拍</li>
</ul>
</li>
<li><p>全身照瞬间拥有大长腿</p>
<ul>
<li>错误角度：俯拍容易拍的比本人显矮</li>
<li>蹲下来采用仰拍角度<ul>
<li>脚与地面的留白一定要少留地面</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201208211431040.png" alt="image-20201208211431040"></p>
<h4 id="拍照的构图"><a href="#拍照的构图" class="headerlink" title="拍照的构图"></a>拍照的构图</h4><ul>
<li><p><strong>黄金分割</strong>，拍摄人像不知道把任务放置于画面哪个位置的时候，置于黄金分割点是最稳妥的构图方法。</p>
<ul>
<li><p>设置九宫格四个交叉点的位置就是黄金分割点</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201208211908865.png" alt="image-20201208211908865"></p>
</li>
</ul>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201208211942688.png" alt="image-20201208211942688"></p>
</li>
<li><p><strong>点构图</strong>：点构图是拍摄环境人像时，最喜欢使用的一种构图方法，这样的构图，<strong>人物在画面里的比例很小</strong>，强调环境与人物和谐统一的关系。</p>
<ul>
<li>点构图的适用场景通常为视野开阔画面干净纯粹没有过多杂物的环境</li>
</ul>
</li>
</ul>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201208212412080.png" alt="image-20201208212412080"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201208212426560.png" alt="image-20201208212426560"></p>
<ul>
<li><p><strong>对角线构图</strong>：拍摄静物或者风光照片时，对角线构图特别适用</p>
<ul>
<li><p>对角线构图适合用于拍摄静物、花草植物或大面积的草坪、画面中有道路的自然风景</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201208212932256.png" alt="image-20201208212932256"></p>
</li>
</ul>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201208212723202.png" alt="image-20201208212723202"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201208212746080.png" alt="image-20201208212746080"></p>
</li>
</ul>
<ul>
<li><p><strong>中心对称构图</strong> </p>
<ul>
<li><p>有倒影的时候，为了追求画面平衡对称，把人物放置于画面正中间，倒影与人物聚焦中心对称点</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201208213049793.png" alt="image-20201208213049793"></p>
</li>
<li><p>横构图中如果有弧形的线条横穿画面拍摄主体为一颗树时，可以将树放置于画面正中心</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201208213322513.png" alt="image-20201208213322513"></p>
</li>
<li><p>用竖构图拍摄人物特写，为了画面饱满，突出人物神态，也适用中心对称构图。</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201208213428017.png" alt="image-20201208213428017"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201208213437744.png" alt="image-20201208213437744"></p>
</li>
</ul>
</li>
<li><p><strong>三角形构图</strong>，利用三角形构图，达到画面的平衡、稳定、饱满同时又不失灵活与动感</p>
<ul>
<li><p>拍摄静物或者人像时都可以尝试三角形构图</p>
<p><img src="images/image-20201208213524368.png?lastModify=1607434632" alt="image-20201208213524368"></p>
</li>
<li><p>拍摄前摆设物品时，有意识的选择三角形构图，把几个物品分别放在三个角，这样构图比较饱满不会显得呆板。</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201208213739834.png" alt="image-20201208213739834"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201208213755697.png" alt="image-20201208213755697"></p>
</li>
<li><p>拍摄人像如何使用三角形构图</p>
<ul>
<li><p>利用模特的手或腿摆出不同的pose，让人物呈现三角形的构图画面</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201208213944752.png" alt="image-20201208213944752"></p>
</li>
<li><p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201208214024680.png" alt="image-20201208214024680"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201208214041217.png" alt="image-20201208214041217"></p>
</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>引导线构图</strong>，利用画面中的线条，引导观者的目光，让视线可以汇聚到画面的焦点</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201208214225858.png" alt="image-20201208214225858"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201208214244817.png" alt="image-20201208214244817"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201208214254865.png" alt="image-20201208214254865"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201208214707089.png" alt="image-20201208214707089"></p>
</li>
<li><p><strong>重复线条构图</strong>：利用画面中规律排列的物体进行构图，让照片充满工整与秩序感</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201208214916083.png" alt="image-20201208214916083"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201208214926913.png" alt="image-20201208214926913"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201208214937969.png" alt="image-20201208214937969"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201208214946433.png" alt="image-20201208214946433"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201208214955154.png" alt="image-20201208214955154"></p>
</li>
<li><p><strong>开放式构图</strong>：主体不一定放在画中心，有意在画面周围留下被切割的不完整形象，引导观众产生画外空间联想</p>
<ul>
<li><p>什么是封闭式构图：讲究画面完整，主体在画面之中，构图较工整，框架内部布局均衡、严禁、完整</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201208215546274.png" alt="image-20201208215546274"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201208215809810.png" alt="image-20201208215809810"></p>
</li>
<li><p>什么是开放式构图：主体不一定放在画中心，注重主体与画外的联系有意在画面周围留下切割的不完整形象，引导观众突破画框限制，产生画外空间联系</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201208215557329.png" alt="image-20201208215557329"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201208215825762.png" alt="image-20201208215825762"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201208215840816.png" alt="image-20201208215840816"></p>
</li>
<li><p>开放式构图拍摄静物或美食：拍摄画面里，桌面露出一小部分边角，这样的开放构图也会让人产生能长久注视画面思考遐想的效果</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201208215955632.png" alt="image-20201208215955632"></p>
</li>
</ul>
</li>
<li><p><strong>前景虚化构图</strong>：利用花草树木等物品作为前景，用大光圈拍摄虚化前景，制造梦幻、神秘的画面</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201208220521634.png" alt="image-20201208220521634"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201208220549714.png" alt="image-20201208220549714"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201208220601698.png" alt="image-20201208220601698"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201208220615777.png" alt="image-20201208220615777"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201208220625584.png" alt="image-20201208220625584"></p>
</li>
</ul>
<h4 id="小道具"><a href="#小道具" class="headerlink" title="小道具"></a>小道具</h4><ul>
<li><p>拍照的时候不知道手往哪里放，眼睛该往哪儿看</p>
</li>
<li><p>道具一：书、报纸、杂志</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201210113723831.png" alt="image-20201210113723831"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201210113740913.png" alt="image-20201210113740913"></p>
</li>
<li><p>道具二：食物（假装吃，假装喝）</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201210113840257.png" alt="image-20201210113840257"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201210114107202.png" alt="image-20201210114107202"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201210114038513.png" alt="image-20201210114038513"></p>
</li>
<li><p>道具三：围巾、披肩、帽子</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201210114229969.png" alt="image-20201210114229969"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201210114249425.png" alt="image-20201210114249425"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201210114304577.png" alt="image-20201210114304577"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201210114315969.png" alt="image-20201210114315969"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201210114348323.png" alt="image-20201210114348323"></p>
</li>
<li><p>相机</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201210114427329.png" alt="image-20201210114427329"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201210114455826.png" alt="image-20201210114455826"></p>
</li>
<li><p>镜子</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201210114556977.png" alt="image-20201210114556977"></p>
</li>
<li><p>花草树叶等植物</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201210114640865.png" alt="image-20201210114640865"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201210114711890.png" alt="image-20201210114711890"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201210114746689.png" alt="image-20201210114746689"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201210114928673.png" alt="image-20201210114928673"></p>
</li>
<li><p>自行车</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201210114958755.png" alt="image-20201210114958755"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201210115016593.png" alt="image-20201210115016593"></p>
</li>
<li><p>雨、雪、风、阳光</p>
<ul>
<li>雨，躲在屋檐下把手放在头顶装作要遮雨一样</li>
</ul>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201210115258513.png" alt="image-20201210115258513"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201210115315522.png" alt="image-20201210115315522"></p>
<ul>
<li>雪</li>
</ul>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201210115421905.png" alt="image-20201210115421905"></p>
<ul>
<li>雪+逆光<ul>
<li>最好是很细颗粒的雪花，逆光拍摄，把雪花朝着镜头洒过来</li>
<li>模特洒雪花的同时要保持微笑，表情不能太奔放与放松</li>
<li>伞，伞柄不能把脸遮住</li>
</ul>
</li>
</ul>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201210115832982.png" alt="image-20201210115832982"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201210115851699.png" alt="image-20201210115851699"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201210115924946.png" alt="image-20201210115924946"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201210120224994.png" alt="image-20201210120224994"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201210120244786.png" alt="image-20201210120244786"></p>
</li>
<li><p>风</p>
<ul>
<li>当有风的时候，利用风将头发和衣服吹起来</li>
<li>最好是顺风，迎着风摆pose，眼神表情一定要到位</li>
</ul>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201210120424421.png" alt="image-20201210120424421"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201210120529268.png" alt="image-20201210120529268"></p>
</li>
<li><p>阳光</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201210120614675.png" alt="image-20201210120614675"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201210120829954.png" alt="image-20201210120829954"></p>
</li>
<li><p>逆光拍摄</p>
<ul>
<li>日出、日落是逆光拍摄的最佳时间段</li>
</ul>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201210120959832.png" alt="image-20201210120959832"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201210121240403.png" alt="image-20201210121240403"></p>
<ul>
<li>当屋外太阳比较高时可以选择路面有积雪的或者四周有白色墙面的环境进行拍摄逆光</li>
</ul>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201210121734771.png" alt="image-20201210121734771"></p>
<ul>
<li>或者躲进屋内拍摄逆光</li>
</ul>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201210121820695.png" alt="image-20201210121820695"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201210121830145.png" alt="image-20201210121830145"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201210121839586.png" alt="image-20201210121839586"></p>
<ul>
<li>逆光帮手：三棱镜</li>
</ul>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201211222932427.png" alt="image-20201211222932427"></p>
<ul>
<li>逆光剪影怎么拍<ul>
<li>人物背后要有大面积空景，不能有山等阻挡（山顶、楼顶、海边、或者站高一点与其他人物脱离）</li>
</ul>
</li>
<li>光背景过亮 人脸过黑怎么办<ul>
<li>对焦锁焦以后加曝光</li>
</ul>
</li>
<li>逆光条件不理想，比如天空惨白怎么办<ul>
<li>只利用光线，天空部分少拍入画面</li>
</ul>
</li>
<li>太阳角度比较高的逆光拍摄<ul>
<li>可以选择室内拍摄，让光线透过玻璃窗打进屋内</li>
<li>寻找有积雪、四周白色墙壁环境的地方拍摄逆光，让白色物体的反光对人物进行补光</li>
</ul>
</li>
<li>巧妙的利用小道具制造不一样的逆光（三棱镜）</li>
<li>逆光拍摄剪影有哪些诀窍<ul>
<li>任务的背后要有大面积的空景，不能有建筑物或山等阻挡</li>
<li>天空中最好有美丽的火烧云，这样逆光照片色彩好看</li>
<li>最好挑选在山顶、楼顶、海边等空旷环境拍摄逆光剪影</li>
</ul>
</li>
</ul>
</li>
<li><p>哪些小技巧，可以让你的照片更有感觉</p>
<ul>
<li><p>虚化背景，突出主题（相机人像模式）。</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201211224712762.png" alt="image-20201211224712762"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201211224731048.png" alt="image-20201211224731048"></p>
</li>
<li><p>三棱镜：遮挡杂物，营造梦幻效果。</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201211224823643.png" alt="image-20201211224823643"></p>
</li>
<li><p>分身效果：全景模式下模特由起始点移动到结束点，中间不能有路人闯入。</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201211224920330.png" alt="image-20201211224920330"></p>
</li>
<li><p>镜面效果：积水，湖泊</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201211224938235.png" alt="image-20201211224938235"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201211224957947.png" alt="image-20201211224957947"></p>
</li>
<li><p>悬浮效果：站板凳上一张，空景一张，app合成去掉板凳（设置一个蒙版，把它擦出来）</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201211225121692.png" alt="image-20201211225121692"></p>
</li>
<li><p>制造画框，将拍摄主体置于任何框内</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201211225222522.png" alt="image-20201211225222522"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201211225238832.png" alt="image-20201211225238832"></p>
</li>
<li><p>用手机如何拍出车辆运动轨迹的照片</p>
<ul>
<li>快门速度设置到1/20,1/30秒的速度</li>
</ul>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201211225456114.png" alt="image-20201211225456114"></p>
</li>
<li><p>一组人像：景大人小，互相衬托，人景合一</p>
<ul>
<li>尝试拍摄景大人小的环境人像，这样的照片更耐看</li>
</ul>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201211225614266.png" alt="image-20201211225614266"></p>
<ul>
<li>环境人像要斟酌人物着装是否与环境相呼应</li>
</ul>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201211225706777.png" alt="image-20201211225706777"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201211225718601.png" alt="image-20201211225718601"></p>
</li>
</ul>
</li>
<li><p>男友拍照指南？？？</p>
<ul>
<li><p>餐厅</p>
<ul>
<li><p>挑选靠窗户的光源位置，让女朋友面朝窗户</p>
</li>
<li><p>跟实物合影，可以近距离高角度把她和食物一起拍进画面</p>
</li>
<li><p>注意看看脸上细节，进行补妆</p>
</li>
<li><p>端着水杯，或者利用桌上的植物作为虚化的前景增添照片的意境</p>
</li>
<li><p>不一定要看镜头，不看镜头的照片可能更加自然</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201211225858985.png" alt="image-20201211225858985"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201211230014394.png" alt="image-20201211230014394"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201211230232644.png" alt="image-20201211230232644"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201211230320730.png" alt="image-20201211230320730"></p>
</li>
</ul>
</li>
<li><p>街景拍照</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201211230434330.png" alt="image-20201211230434330"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201211230456826.png" alt="image-20201211230456826"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201211230537417.png" alt="image-20201211230537417"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201211230832809.png" alt="image-20201211230832809"></p>
</li>
<li><p>旅行拍摄赢芳心</p>
<ul>
<li><p>大头照与景大人小的照片都要拍</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201211231020307.png" alt="image-20201211231020307"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201211231032234.png" alt="image-20201211231032234"></p>
</li>
<li><p>寻找好的光源或者利用小道具，让她的皮肤在镜头里显得水汪汪</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201211231125843.png" alt="image-20201211231125843"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201211231135144.png" alt="image-20201211231135144"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201211231148765.png" alt="image-20201211231148765"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201211231159066.png" alt="image-20201211231159066"></p>
</li>
<li><p>想避开人群或拍出大长腿只需要蹲下拍摄</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201211231255965.png" alt="image-20201211231255965"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201211231304281.png" alt="image-20201211231304281"></p>
</li>
<li><p>手机采用竖构图拍摄更容易拉长腿</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201211231335864.png" alt="image-20201211231335864"></p>
</li>
<li><p>与可爱的小动物合影，抓拍自然生动的照片</p>
<p>​    <img src="images/image-20201211231418986.png" alt="image-20201211231418986"></p>
</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>拍美食</strong> </p>
<ul>
<li><p>尽量在光线充足明亮的地方拍照，最好是靠近窗户的光源</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201213133702979.png" alt="image-20201213133702979"></p>
</li>
<li><p>当地特色美食纪念照</p>
<ul>
<li><p>寻找漂亮的背景，如店铺的招牌</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201213133824287.png" alt="image-20201213133824287"></p>
</li>
<li><p>尽量让拍摄角度与背景面板保持垂直平行</p>
</li>
<li><p>用当地的特色建筑或街道作为背景</p>
</li>
</ul>
</li>
<li><p>只拍一款美食时诀窍</p>
<ul>
<li><p>构图采用中心点构图，将一盘美食放置于画面最中间（尽量让整盘食物充满画面，但也不能太拥挤，画面至少保留餐盘边缘）</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201213134024640.png" alt="image-20201213134024640"></p>
</li>
</ul>
</li>
<li><p>采用俯拍，保持30-45°的角度拍摄</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201213134215182.png" alt="image-20201213134215182"></p>
</li>
<li><p>部分实物，采用特殊角度拍摄</p>
<ul>
<li><p>饮料蛋糕冰淇淋等有立体感的食物，有时候采用平视角度更加合适</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201213134343823.png" alt="image-20201213134343823"></p>
</li>
<li><p>整桌的食物更适合俯视平拍角度</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201213135433744.png" alt="image-20201213135433744"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201213135454240.png" alt="image-20201213135454240"></p>
</li>
<li><p>加入手的元素，让照片有互动感</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201213135532991.png" alt="image-20201213135532991"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201213135552575.png" alt="image-20201213135552575"></p>
</li>
<li><p>拍摄前整理盘内食物形状与盘边食物残渣</p>
</li>
<li><p>利用小道具让画面摆脱单调，更丰富</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201213135846143.png" alt="image-20201213135846143"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201213135857777.png" alt="image-20201213135857777"></p>
</li>
<li><p>foodie APP</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201213135944030.png" alt="image-20201213135944030"></p>
</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>拯救镜头恐惧症</strong></p>
<ul>
<li><p>低头微笑</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201213140114237.png" alt="image-20201213140114237"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201213140144768.png" alt="image-20201213140144768"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201213140201519.png" alt="image-20201213140201519"></p>
</li>
<li><p>撩头发</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201213140221731.png" alt="image-20201213140221731"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201213140236419.png" alt="image-20201213140236419"></p>
</li>
<li><p>回眸一笑</p>
<ul>
<li>回眸时，压低头。否则容易拍出大脸</li>
<li>回眸瞬间记得用头发遮下脸，别用力太猛把头发甩开了</li>
<li>回头时可以保持微笑，头与身体朝镜头方向倾斜一些，这样可以显瘦</li>
<li>若想要自然状态，可以不看镜头，看自己的斜后方</li>
</ul>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201213140306240.png" alt="image-20201213140306240"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201213140322080.png" alt="image-20201213140322080"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201213140331437.png" alt="image-20201213140331437"></p>
</li>
<li><p>托住脸颊</p>
<ul>
<li><p>轻轻放在脸颊旁边，真正托住脸颊的话，脸会被压变形</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201213140703775.png" alt="image-20201213140703775"></p>
</li>
<li><p>不看镜头，等待观看，凝视</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201213140738606.png" alt="image-20201213140738606"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201213140753038.png" alt="image-20201213140753038"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201213140806898.png" alt="image-20201213140806898"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201213140822623.png" alt="image-20201213140822623"></p>
</li>
<li><p>借助食物饮料等作为道具拿在手里</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201213140909615.png" alt="image-20201213140909615"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201213140958000.png" alt="image-20201213140958000"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201213141013536.png" alt="image-20201213141013536"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201213141025585.png" alt="image-20201213141025585"></p>
</li>
<li><p>抬头闭眼微笑</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201213141052558.png" alt="image-20201213141052558"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201213141103600.png" alt="image-20201213141103600"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201213141128318.png" alt="image-20201213141128318"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201213141139502.png" alt="image-20201213141139502"></p>
</li>
<li><p>坐下来</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201213141242494.png" alt="image-20201213141242494"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201213141255040.png" alt="image-20201213141255040"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201213141310287.png" alt="image-20201213141310287"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201213141327583.png" alt="image-20201213141327583"></p>
</li>
<li><p>奔跑（奔跑的速度比平时慢一点，动作比平时夸张，拍摄角度最好从侧面拍摄）</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201213141426483.png" alt="image-20201213141426483"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201213141505295.png" alt="image-20201213141505295"></p>
</li>
<li><p>走路（连拍，步子迈的明显一些）</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201213141536080.png" alt="image-20201213141536080"></p>
</li>
<li><p>跳跃</p>
<ul>
<li>机位蹲低，可以显高</li>
<li>跳跃时人脸容易变形、表情不受控制，采用侧面拍摄可以避免尴尬</li>
</ul>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201213141749071.png" alt="image-20201213141749071"></p>
</li>
<li><p>旋转，转圈</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201213141822223.png" alt="image-20201213141822223"></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201213141832320.png" alt="image-20201213141832320"></p>
</li>
<li><p>凝望镜头，眼睛里要有戏</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/image-20201213141917825.png" alt="image-20201213141917825"></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul>
<li><a href="https://www.bilibili.com/video/BV1Gb411S7wC?from=search&seid=5668966452379294491">手机摄影之生活拍照技巧</a></li>
</ul>
]]></content>
      <categories>
        <category>摄影</category>
      </categories>
  </entry>
  <entry>
    <title>计算机网络</title>
    <url>/2022/01/03/%E9%9D%A2%E8%AF%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><h2 id="HTTP，HTTPS"><a href="#HTTP，HTTPS" class="headerlink" title="HTTP，HTTPS"></a><a href="https://www.cnblogs.com/klb561/p/10289199.html">HTTP，HTTPS</a></h2><h3 id="1-HTTP，HTTPS-概念"><a href="#1-HTTP，HTTPS-概念" class="headerlink" title="1. HTTP，HTTPS 概念"></a>1. HTTP，HTTPS 概念</h3><p>  HTTP：<strong>HTTP</strong>协议以<strong>明文的方式发送内容</strong>，不提供任何方式的数据加密，如果攻击者截取了Web浏览器和网站服务器之间的传输报文，就可以直接读懂其中的信息，因此，HTTP协议不适合传输一些敏感信息，如：卡号、密码等支付信息。<br>  HTTPS：安全套接字层超文本传输协议HTTPS，为了数据传输的安全，HTTPS在HTTP的基础上加入了SSL协议，SSL依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密。是以安全为目标的HTTP通道，简单讲是HTTP的安全版。<br>  HTTPS协议的主要作用可以分为两种：一种是建立一个信息安全通道，来保证数据传输的安全；另一种就是确认网站的真实性。</p>
<h3 id="2-HTTP与HTTPS的区别"><a href="#2-HTTP与HTTPS的区别" class="headerlink" title="2. HTTP与HTTPS的区别"></a>2. HTTP与HTTPS的区别</h3><pre><code>   1. https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。
      2. http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。
      3. http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。
      4. http的连接很简单，是无状态的；HTTPS协议是SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。
</code></pre>
<h3 id="3-HTTPS的工作原理"><a href="#3-HTTPS的工作原理" class="headerlink" title="3. HTTPS的工作原理"></a>3. HTTPS的工作原理</h3><p>我们都知道HTTPS能够加密信息，以免敏感信息被第三方获取，所以<strong>很多银行网站或电子邮箱等等安全级别较高的服务都会采用HTTPS协议</strong></p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/1-150H120343I41.jpg" alt="HTTP与HTTPS的区别-马海祥博客"></p>
<p>客户端在使用HTTPS方式与Web服务器<strong>通信时有以下几个步骤</strong>，如图所示。</p>
<pre><code>（1）客户使用https的URL访问Web服务器，要求与Web服务器建立SSL连接。

（2）Web服务器收到客户端请求后，会将网站的证书信息（证书中包含公钥）传送一份给客户端。

（3）客户端的浏览器与Web服务器开始协商SSL连接的安全等级，也就是信息加密的等级。

（4）客户端的浏览器根据双方同意的安全等级，建立会话密钥，然后利用网站的公钥将会话密钥加密，并传送给网站。

（5）Web服务器利用自己的私钥解密出会话密钥。

（6）Web服务器利用会话密钥加密与客户端之间的通信。
</code></pre>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/2012071410212142.gif" alt="img"></p>
<h3 id="4-HTTPS的优点"><a href="#4-HTTPS的优点" class="headerlink" title="4. HTTPS的优点"></a>4. HTTPS的优点</h3><p>尽管HTTPS并非绝对安全，<strong>掌握根证书的机构、掌握加密算法的组织</strong>同样可以进行中间人形式的攻击，但HTTPS仍是现行架构下最安全的解决方案，主要有以下几个好处：</p>
<pre><code>（1）使用HTTPS协议可认证用户和服务器，确保数据发送到正确的客户机和服务器；

（2）HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全，可防止数据在传输过程中不被窃取、改变，确保数据的完整性。

（3）HTTPS是现行架构下最安全的解决方案，虽然不是绝对安全，但它大幅增加了中间人攻击的成本。

（4）谷歌曾在2014年8月份调整搜索引擎算法，并称“比起同等HTTP网站，采用HTTPS加密的网站在搜索结果中的排名将会更高”
</code></pre>
<h3 id="5-HTTPS的缺点"><a href="#5-HTTPS的缺点" class="headerlink" title="5. HTTPS的缺点"></a>5. HTTPS的缺点</h3><p>虽然说HTTPS有很大的优势，但其相对来说，还是存在不足之处的：</p>
<pre><code>（1）HTTPS协议**握手阶段比较费时**，会使页面的加载时间延长近50%，增加10%到20%的耗电；

（2）HTTPS连接**缓存不如HTTP高效**，会增加数据开销和功耗，甚至已有的安全措施也会因此而受到影响；

（3）**SSL证书需要钱**，功能越强大的证书费用越高，个人网站、小网站没有必要一般不会用。

（4）**SSL证书通常需要绑定IP**，不能在同一IP上绑定多个域名，IPv4资源不可能支撑这个消耗。

（5）HTTPS协议的**加密范围也比较有限**，在黑客攻击、拒绝服务攻击、服务器劫持等方面几乎起不到什么作用。最关键的，SSL证书的信用链体系并不安全，特别是在某些国家可以控制CA根证书的情况下，中间人攻击一样可行。
</code></pre>
<h3 id="6-http切换到HTTPS"><a href="#6-http切换到HTTPS" class="headerlink" title="6. http切换到HTTPS"></a>6. http切换到HTTPS</h3><pre><code>如果需要将网站从http切换到https到底该如何实现呢？
</code></pre>
<p>   这里需要将页面中所有的链接，例如js，css，图片等等链接都由http改为https。例如：<a href="http://www.baidu.com改为https//www.baidu.com">http://www.baidu.com改为https://www.baidu.com</a></p>
<pre><code>BTW，这里虽然将http切换为了https，还是建议保留http。所以我们在切换的时候可以做http和https的兼容，具体实现方式是，去掉页面链接中的http头部，这样可以自动匹配http头和https头。例如：将http://www.baidu.com改为//www.baidu.com。然后当用户从http的入口进入访问页面时，页面就是http，如果用户是从https的入口进入访问页面，页面即使https的。
</code></pre>
<h2 id="cookie和session的区别详解"><a href="#cookie和session的区别详解" class="headerlink" title="cookie和session的区别详解"></a><a href="https://www.cnblogs.com/klb561/p/10289199.html">cookie和session的区别详解</a></h2><h3 id="cookie和session的定义："><a href="#cookie和session的定义：" class="headerlink" title="cookie和session的定义："></a>cookie和session的定义：</h3><p>当你在浏览网站的时候，WEB 服务器会先送一小小资料放在你的计算机上，<strong>Cookie 会把你在网站上所打的文字或是一些选择，都纪录下来</strong>。当下次你再光临同一个网站，WEB 服务器会先看看有没有它上次留下的 Cookie 资料，有的话，就会依据 Cookie里的内容来判断使用者，送出特定的网页内容给你。 Cookie 的使用很普遍，许多有提供个人化服务的网站，都是利用 Cookie来辨认使用者，以方便送出使用者量身定做的内容，像是 Web 接口的免费 email 网站，都要用到 Cookie。</p>
<p>具体来说cookie机制采用的是在客户端保持状态的方案，而session机制采用的是在服务器端保持状态的方案。</p>
<p>同时我们也看到，由于采用服务器端保持状态的方案在客户端也需要保存一个标识，所以session机制可能需要借助于cookie机制来达到保存标识的目的，但实际上它还有其他选择。</p>
<p>cookie机制。正统的cookie分发是通过扩展HTTP协议来实现的，服务器通过在HTTP的响应头中加上一行特殊的指示以提示浏览器按照指示生成相应的cookie。然而纯粹的客户端脚本如JavaScript或者VBScript也可以生成cookie。而cookie的使用是由浏览器按照一定的原则在后台自动发送给服务器的。浏览器检查所有存储的cookie，如果某个cookie所声明的作用范围大于等于将要请求的资源所在的位置，则把该cookie附在请求资源的HTTP请求头上发送给服务器。</p>
<p>cookie的内容主要包括：名字，值，过期时间，路径和域。路径与域一起构成cookie的作用范围。若不设置过期时间，则表示这个cookie的生命期为浏览器会话期间，关闭浏览器窗口，cookie就消失。<strong>这种生命期为浏览器会话期的cookie被称为会话cookie</strong>。 </p>
<p>会话cookie一般不存储在硬盘上而是保存在内存里，当然这种行为并不是规范规定的。若设置了过期时间，浏览器就会把cookie保存到硬盘上，关闭后再次打开浏览器，这些cookie仍然有效直到超过设定的过期时间。存储在硬盘上的cookie可以在不同的浏览器进程间共享，比如两个IE窗口。而对于保存在内存里的cookie，不同的浏览器有不同的处理方式。</p>
<p><strong>session机制</strong>。session机制是一种服务器端的机制，服务器使用一种类似于散列表的结构（也可能就是使用散列表）来保存信息。</p>
<p>当程序需要为某个客户端的请求创建一个session时，服务器首先检查这个客户端的请求里是否已包含了一个session标识（称为session id），如果已包含则说明以前已经为此客户端创建过session，服务器就按照session id把这个session检索出来。使用（检索不到，会新建一个），如果客户端请求不包含session id，则为此客户端创建一个session并且生成一个与此session相关联的session id，session id的值应该是一个既不会重复，又不容易被找到规律以仿造的字符串，这个session id将被在本次响应中返回给客户端保存。保存这个session id的方式可以采用cookie，这样在交互过程中浏览器可以自动的按照规则把这个标识发送给服务器。一般这个cookie的名字都是类似于SEEESIONID。但<strong>cookie可以被人为的禁止</strong>，则必须有其他机制以便在cookie被禁止时仍然能够把session id传递回服务器。经常被使用的一种技术叫做<strong>URL重写</strong>，就是把session id直接附加在URL路径的后面。还有一种技术叫做表单隐藏字段。就是服务器会自动修改表单，添加一个隐藏字段，以便在表单提交时能够把session id传递回服务器。比如： </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">&quot;testform&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/xxx&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;jsessionid&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ByOK3vjFD75aPnrF7C2HmdnV6QZcEbzWoWiBYEnLerjQ99zWpBng!-145788764&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<p>实际上这种技术可以简单的用对action应用URL重写来代替。</p>
<h3 id="cookie和session的区别："><a href="#cookie和session的区别：" class="headerlink" title="cookie和session的区别："></a>cookie和session的区别：</h3><p>1、cookie数据存放在<strong>客户的浏览器上</strong>，session数据放在<strong>服务器上</strong>。</p>
<p>2、<strong>cookie不是很安全</strong>，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗<br>      <strong>考虑到安全应当使用session</strong>。</p>
<p>3、<strong>session</strong>会在一定时间内保存在服务器上。当访问增多，<strong>会比较占用你服务器的性能</strong><br>     考虑到减轻服务器性能方面，应当使用COOKIE。</p>
<p>4、单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。</p>
<p>5、所以个人建议：<br>      将登陆信息等重要信息存放为SESSION<br>      其他信息如果需要保留，可以放在COOKIE中</p>
<h2 id="TCP，UDP"><a href="#TCP，UDP" class="headerlink" title="TCP，UDP"></a><a href="https://www.cnblogs.com/fundebug/p/differences-of-tcp-and-udp.html">TCP，UDP</a></h2><h3 id="1-TCP-IP网络模型"><a href="#1-TCP-IP网络模型" class="headerlink" title="1. TCP/IP网络模型"></a>1. TCP/IP网络模型</h3><p>TCP/IP 是互联网相关的各类协议族的总称，比如：TCP，UDP，IP，FTP，HTTP，ICMP，SMTP 等都属于 TCP/IP 族内的协议。</p>
<p>TCP/IP模型是互联网的基础，它是一系列网络协议的总称。这些协议可以划分为四层，分别为链路层、网络层、传输层和应用层。</p>
<ul>
<li>链路层：负责封装和解封装IP报文，发送和接受ARP/RARP报文等。</li>
<li>网络层：负责路由以及把分组报文发送给目标网络或主机。</li>
<li>传输层：负责对报文进行分组和重组，并以TCP或UDP协议格式封装报文。</li>
<li>应用层：负责向用户提供应用程序，比如HTTP、FTP、Telnet、DNS、SMTP等。</li>
</ul>
<table border="1">
    <tr>
        <th align="center">OSI七层模型</th>   <!-- 左对齐 -->
        <th align="center"> TCP/IP概念层模型</th> <!-- 居中对其（默认）-->
        <th align="center">功能</th>  <!-- 右对齐-->
        <th align="center">TCP/IP协议族</th>  <!-- 右对齐-->
    </tr>
    <tr>
        <td>应用层</td>
        <td rowspan="3">应用层</td>
        <td>文件传输，电子邮件，文件服务，虚拟终端</td>
        <td>TFTP，HTTP，SNMP，DNS，Telnet</td>
    </tr>
    <tr>
        <td>表示层</td>
        <td>数据格式化，代码转换，数据加密</td>
        <td>没有协议</td>
    </tr>
    <tr>
        <td>会话层</td>
        <td>解除或建立与别的接口的联系</td>
        <td>没有协议</td>
    </tr>
    <tr>
        <td>传输层</td>
        <td>传输层</td>
        <td>提供端到端的接口</td>
        <td>TCP，UDP</td>
    </tr>
    <tr>
        <td>网络层</td>
        <td>网络层</td>
        <td>为数据包选择路由</td>
        <td>IP，ICMP，RIP，OSPF，BGF，IGMP</td>
    </tr>
    <tr>
        <td>数据链路层</td>
        <td rowspan="2">链路层</td>
        <td>传输有地址的帧以及错误检测功能</td>
        <td>SLIP，CSLIP，PPP，ARP，RARP，MTU</td>
    </tr>
    <tr>
        <td>物理层</td>
        <td>以二进制数据形式在物理层媒体上传输数据</td>
        <td>ISO2110.IEEE802，IEEE802.2</td>
    </tr>
</table>

<p>在网络体系结构中网络通信的建立必须是在通信双方的对等层进行，不能交错。 在整个数据传输过程中，<strong>数据在发送端时经过各层时都要附加上相应层的协议头和协议尾</strong>（仅数据链路层需要封装协议尾）部分，也就是要对数据进行协议封装，以标识对应层所用的通信协议。接下去介绍TCP/IP 中有两个具有代表性的传输层协议—-TCP 和 UDP。</p>
<h3 id="2-UDP"><a href="#2-UDP" class="headerlink" title="2. UDP"></a>2. UDP</h3><p>UDP协议全称是用户数据报协议，在网络中它与TCP协议一样<strong>用于处理数据包</strong>，是一种<strong>无连接的协议</strong>。在OSI模型中，在第四层——<strong>传输层，处于IP协议的上一层</strong>。UDP有不提供数据包分组、组装和不能对数据包进行排序的缺点，也就是说，当报文发送之后，是无法得知其是否安全完整到达的。</p>
<h4 id="UDP特点"><a href="#UDP特点" class="headerlink" title="UDP特点"></a>UDP特点</h4><h5 id="1-面向无连接"><a href="#1-面向无连接" class="headerlink" title="1. 面向无连接"></a>1. 面向无连接</h5><p>首先 UDP 是不需要和 TCP一样在发送数据前进行三次握手建立连接的，想发数据就可以开始发送了。并且也只是数据报文的搬运工，不会对数据报文进行任何拆分和拼接操作。</p>
<p>具体来说就是：</p>
<ul>
<li>在发送端，应用层将数据传递给传输层的 UDP 协议，UDP 只会给数据增加一个 UDP 头标识下是 UDP 协议，然后就传递给网络层了</li>
<li>在接收端，网络层将数据传递给传输层，UDP 只去除 IP 报文头就传递给应用层，不会任何拼接操作</li>
</ul>
<h5 id="2-有单播，多播，广播的功能"><a href="#2-有单播，多播，广播的功能" class="headerlink" title="2. 有单播，多播，广播的功能"></a>2. 有单播，多播，广播的功能</h5><p>UDP 不止支持一对一的传输方式，同样支持一对多，多对多，多对一的方式，也就是说 <strong>UDP 提供了单播，多播，广播的功能</strong>。</p>
<h5 id="3-UDP是面向报文的"><a href="#3-UDP是面向报文的" class="headerlink" title="3. UDP是面向报文的"></a>3. UDP是面向报文的</h5><p>发送方的UDP对应用程序交下来的报文，在添加首部后就向下交付IP层。UDP对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界。因此，应用程序必须选择合适大小的报文</p>
<h5 id="4-不可靠性"><a href="#4-不可靠性" class="headerlink" title="4. 不可靠性"></a>4. 不可靠性</h5><p>首先不可靠性体现在无连接上，通信都不需要建立连接，想发就发，这样的情况肯定不可靠。</p>
<p>并且收到什么数据就传递什么数据，并且也不会备份数据，发送数据也不会关心对方是否已经正确接收到数据了。</p>
<p>再者网络环境时好时坏，但是 UDP 因为没有拥塞控制，一直会以恒定的速度发送数据。即使网络条件不好，也不会对发送速率进行调整。这样实现的弊端就是在网络条件不好的情况下可能会导致丢包，但是优点也很明显，在某些实时性要求高的场景（比如电话会议）就需要使用 UDP 而不是 TCP。</p>
<p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/2019-03-21-02.gif" alt="img"></p>
<p>从上面的动态图可以得知，UDP只会把想发的数据报文一股脑的丢给对方，并不在意数据有无安全完整到达。</p>
<h5 id="5-头部开销小，传输数据报文时是很高效的。"><a href="#5-头部开销小，传输数据报文时是很高效的。" class="headerlink" title="5. 头部开销小，传输数据报文时是很高效的。"></a>5. 头部开销小，传输数据报文时是很高效的。</h5><p><img src="https://gitee.com/sssuperbear/typora/raw/master/img/2019-03-21-03.png" alt="img"></p>
<p>UDP 头部包含了以下几个数据：</p>
<ul>
<li>两个十六位的端口号，分别为源端口（可选字段）和目标端口</li>
<li>整个数据报文的长度</li>
<li>整个数据报文的检验和（IPv4 可选 字段），该字段用于发现头部信息和数据中的错误</li>
</ul>
<p>因此 UDP 的头部开销小，只有八字节，相比 TCP 的至少二十字节要少得多，在传输数据报文时是很高效的</p>
<h3 id="3-TCP与UDP的比较"><a href="#3-TCP与UDP的比较" class="headerlink" title="3. TCP与UDP的比较"></a>3. TCP与UDP的比较</h3><table>
<thead>
<tr>
<th align="left"></th>
<th align="left">UDP</th>
<th align="left">TCP</th>
</tr>
</thead>
<tbody><tr>
<td align="left">是否连接</td>
<td align="left">无连接</td>
<td align="left">面向连接</td>
</tr>
<tr>
<td align="left">是否可靠</td>
<td align="left">不可靠传输，不使用流量控制和拥塞控制</td>
<td align="left">可靠传输，使用流量控制和拥塞控制</td>
</tr>
<tr>
<td align="left">连接对象个数</td>
<td align="left">支持一对一，一对多，多对一和多对多交互通信</td>
<td align="left">只能是一对一通信</td>
</tr>
<tr>
<td align="left">传输方式</td>
<td align="left">面向报文</td>
<td align="left">面向字节流</td>
</tr>
<tr>
<td align="left">首部开销</td>
<td align="left">首部开销小，仅8字节</td>
<td align="left">首部最小20字节，最大60字节</td>
</tr>
<tr>
<td align="left">适用场景</td>
<td align="left">适用于实时应用（IP电话、视频会议、直播等）</td>
<td align="left">适用于要求可靠传输的应用，例如文件传输</td>
</tr>
</tbody></table>
<ul>
<li><strong>TCP</strong>向上层提供面向<strong>连接的可靠服务</strong> ，<strong>UDP</strong>向上层提供<strong>无连接不可靠服务</strong>。</li>
<li>虽然 <strong>UDP</strong> 并没有 TCP 传输来的准确，但是也能在很多<strong>实时性要求高</strong>的地方有所作为</li>
<li>对数据<strong>准确性要求高</strong>，速度可以相对较慢的，可以选用<strong>TCP</strong></li>
</ul>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
  </entry>
</search>
